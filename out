// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const lazy::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:21:1: 47:2>::INIT: lazy::Lazy<T> = {
    let mut _0: lazy::Lazy<T>;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:21: 23:25
    let mut _1: core::cell::Cell<core::option::Option<T>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:33: 23:48
    let mut _2: core::option::Option<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:43: 23:47

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:33: 23:48
        StorageLive(_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:43: 23:47
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:43: 23:47
        discriminant(_2) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:43: 23:47
        _1 = Cell::<core::option::Option<T>>::new(move _2) -> [return: bb1, unwind: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:33: 23:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:33: 23:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::option::Option<T>) -> Cell<core::option::Option<T>> {Cell::<core::option::Option<T>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:47: 23:48
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:28: 23:60
        (_0.0: core::cell::Cell<core::option::Option<T>>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:28: 23:60
        (_0.1: lazy::std::sync::Once) = const ONCE_INIT; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:28: 23:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:50: 23:59
                                         // + literal: Const { ty: std::sync::Once, val: Unevaluated(ONCE_INIT, [], None) }
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:59: 23:60
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:5: 23:61
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:23:5: 23:61
    }
}

fn lazy::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:21:1: 47:2>::get::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10]) -> () {
    debug self => (*(_1.0: &&lazy::Lazy<T>)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:26:19: 26:32
    debug f => (_1.1: F);                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:26:34: 26:35
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:29: 30:29
    let _2: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:13: 31:34
    let mut _3: &core::cell::Cell<core::option::Option<T>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:13: 31:34
    let mut _4: core::option::Option<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:24: 31:33
    let mut _5: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:29: 31:32
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:29: 31:30
    let mut _7: ();                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:29: 31:32
    let mut _8: &&lazy::Lazy<T>;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
    let mut _9: &lazy::Lazy<T>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10

    bb0: {
        _8 = move (_1.0: &&lazy::Lazy<T>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:13: 31:34
        _9 = move (*_8);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:13: 31:34
        _3 = &((*_9).0: core::cell::Cell<core::option::Option<T>>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:13: 31:34
        _6 = move (_1.1: F);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:29: 31:30
        _5 = <F as core::ops::FnOnce<()>>::call_once(move _6, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:29: 31:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:29: 31:30
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as core::ops::FnOnce<()>>::Output {<F as core::ops::FnOnce<()>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:24: 31:33
        ((_4 as Some).0: T) = move _5;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:24: 31:33
        discriminant(_4) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:24: 31:33
        _2 = Cell::<core::option::Option<T>>::set(move _3, move _4) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:13: 31:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:31:20: 31:23
                                         // + literal: Const { ty: for<'r> fn(&'r Cell<core::option::Option<T>>, core::option::Option<T>) {Cell::<core::option::Option<T>>::set}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:32:10: 32:10
    }
}

fn lazy::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:21:1: 47:2>::get(_1: &lazy::Lazy<T>, _2: F) -> &T {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:26:19: 26:32
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:26:34: 26:35
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:9: 32:11
    let mut _4: &lazy::std::sync::Once;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:9: 32:11
    let mut _5: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
    let mut _6: &&lazy::Lazy<T>;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
    let mut _7: *mut core::option::Option<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:20: 37:35
    let mut _8: &core::cell::Cell<core::option::Option<T>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:20: 37:35
    let mut _9: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:38:17: 38:28
    scope 1 {
        let mut _0: &T;                  // return place in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:38:22: 38:27
        scope 2 {
            debug x => _0;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:38:22: 38:27
        }
    }

    bb0: {
        _4 = &((*_1).1: lazy::std::sync::Once); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:9: 32:11
        _6 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
        (_5.0: &&lazy::Lazy<T>) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
        (_5.1: F) = move _2;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10
        _3 = std::sync::Once::call_once::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10]>(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:9: 32:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:16: 30:25
                                         // + literal: Const { ty: for<'r> fn(&'r std::sync::Once, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10]) {std::sync::Once::call_once::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:30:26: 32:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = &((*_1).0: core::cell::Cell<core::option::Option<T>>); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:20: 37:35
        _7 = Cell::<core::option::Option<T>>::as_ptr(move _8) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:20: 37:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:27: 37:33
                                         // + literal: Const { ty: for<'r> fn(&'r Cell<core::option::Option<T>>) -> *mut core::option::Option<T> {Cell::<core::option::Option<T>>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _9 = discriminant((*_7));        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:19: 37:35
        switchInt(move _9) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:13: 37:35
    }

    bb3: {
        panic(const "attempted to derefence an uninitialized lazy static. This is a bug"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:28:9: 28:39
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:28:9: 28:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:40:42: 40:110
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        unreachable;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:37:19: 37:35
    }

    bb5: {
        _0 = &(((*_7) as Some).0: T);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:38:22: 38:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:46:6: 46:6
    }
}

fn initialize(_1: &T) -> () {
    debug lazy => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:213:34: 213:38
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:213:44: 213:44
    let _2: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:214:5: 214:33
    let mut _3: &T;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:214:28: 214:32

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:214:28: 214:32
        _2 = <T as LazyStatic>::initialize(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:214:5: 214:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:214:5: 214:27
                                         // + literal: Const { ty: for<'r> fn(&'r T) {<T as LazyStatic>::initialize}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\lib.rs:215:2: 215:2
    }
}

fn lazy::Lazy(_1: Cell<core::option::Option<T>>, _2: std::sync::Once) -> lazy::Lazy<T> {
    let mut _0: lazy::Lazy<T>;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
        (_0.0: core::cell::Cell<core::option::Option<T>>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
        (_0.1: lazy::std::sync::Once) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
    }
}

// MIR FOR CTFE
fn lazy::Lazy(_1: Cell<core::option::Option<T>>, _2: std::sync::Once) -> lazy::Lazy<T> {
    let mut _0: lazy::Lazy<T>;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
        (_0.0: core::cell::Cell<core::option::Option<T>>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
        (_0.1: lazy::std::sync::Once) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\lazy_static-1.4.0\src\inline_lazy.rs:19:1: 19:49
    }
}
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:229:1: 232:2>::should_run() -> bool {
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:231:24: 231:28

    bb0: {
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:231:31: 231:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:231:37: 231:37
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:308:1: 362:2>::with_strategy(_1: T, _2: F) -> ScopeGuard<T, F, S> {
    debug v => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:317:26: 317:27
    debug dropfn => _2;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:317:32: 317:38
    let mut _0: ScopeGuard<T, F, S>;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:317:46: 317:65
    let mut _3: core::mem::ManuallyDrop<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:20: 319:40
    let mut _4: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:38: 319:39
    let mut _5: core::mem::ManuallyDrop<F>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:320:21: 320:46
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:320:39: 320:45
    let mut _7: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:323:5: 323:6

    bb0: {
        _7 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:20: 319:40
        _7 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:20: 319:40
        _4 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:38: 319:39
        _3 = ManuallyDrop::<T>::new(move _4) -> [return: bb1, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:20: 319:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:319:20: 319:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> ManuallyDrop<T> {ManuallyDrop::<T>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:320:39: 320:45
        _6 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:320:39: 320:45
        _5 = ManuallyDrop::<F>::new(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:320:21: 320:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:320:21: 320:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(F) -> ManuallyDrop<F> {ManuallyDrop::<F>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:318:9: 322:10
        (_0.0: core::mem::ManuallyDrop<T>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:318:9: 322:10
        (_0.1: core::mem::ManuallyDrop<F>) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:318:9: 322:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:323:6: 323:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:317:5: 323:6
    }

    bb4 (cleanup): {
        drop(_2) -> bb3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:323:5: 323:6
    }

    bb5 (cleanup): {
        switchInt(_7) -> [false: bb3, otherwise: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:323:5: 323:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:308:1: 362:2>::into_inner(_1: ScopeGuard<T, F, S>) -> T {
    debug guard => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:348:23: 348:28
    let mut _2: *const T;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:35: 352:48
    let _3: &T;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:35: 352:48
    let _4: &T;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:36: 352:48
    let mut _5: &core::mem::ManuallyDrop<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:37: 352:48
    let mut _7: *const F;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:37: 357:51
    let _8: &F;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:37: 357:51
    let _9: &F;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:38: 357:51
    let mut _10: &core::mem::ManuallyDrop<F>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:39: 357:51
    let _11: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:358:13: 358:31
    let mut _12: ScopeGuard<T, F, S>;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:358:25: 358:30
    let mut _13: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:360:9: 360:10
    let mut _14: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:361:5: 361:6
    scope 1 {
        let mut _0: T;                   // return place in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:17: 352:22
        scope 2 {
            debug value => _0;           // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:17: 352:22
            let _6: F;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:17: 357:24
            scope 3 {
                debug _dropfn => _6;     // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:17: 357:24
            }
        }
    }

    bb0: {
        _14 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:17: 352:22
        _13 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:17: 352:22
        _14 = const true;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:17: 352:22
        _5 = &(_1.0: core::mem::ManuallyDrop<T>); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:37: 352:48
        _4 = <ManuallyDrop<T> as Deref>::deref(move _5) -> [return: bb1, unwind: bb12]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:36: 352:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:36: 352:48
                                         // + literal: Const { ty: for<'r> fn(&'r ManuallyDrop<T>) -> &'r <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:35: 352:48
        _2 = &raw const (*_3);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:35: 352:48
        _0 = read::<T>(move _2) -> [return: bb2, unwind: bb12]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:25: 352:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:25: 352:34
                                         // + literal: Const { ty: unsafe fn(*const T) -> T {read::<T>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _13 = const true;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:352:48: 352:49
        _10 = &(_1.1: core::mem::ManuallyDrop<F>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:39: 357:51
        _9 = <ManuallyDrop<F> as Deref>::deref(move _10) -> [return: bb3, unwind: bb10]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:38: 357:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:38: 357:51
                                         // + literal: Const { ty: for<'r> fn(&'r ManuallyDrop<F>) -> &'r <ManuallyDrop<F> as Deref>::Target {<ManuallyDrop<F> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = _9;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:37: 357:51
        _7 = &raw const (*_8);           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:37: 357:51
        _6 = read::<F>(move _7) -> [return: bb4, unwind: bb10]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:27: 357:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:357:27: 357:36
                                         // + literal: Const { ty: unsafe fn(*const F) -> F {read::<F>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _14 = const false;               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:358:25: 358:30
        _12 = move _1;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:358:25: 358:30
        _11 = core::mem::forget::<ScopeGuard<T, F, S>>(move _12) -> [return: bb5, unwind: bb7]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:358:13: 358:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:358:13: 358:24
                                         // + literal: Const { ty: fn(ScopeGuard<T, F, S>) {core::mem::forget::<ScopeGuard<T, F, S>>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _13 = const false;               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:359:13: 359:18
        drop(_6) -> [return: bb6, unwind: bb10]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:360:9: 360:10
    }

    bb6: {
        _13 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:360:9: 360:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:361:6: 361:6
    }

    bb7 (cleanup): {
        drop(_6) -> bb10;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:360:9: 360:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:348:5: 361:6
    }

    bb9 (cleanup): {
        drop(_0) -> bb12;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:360:9: 360:10
    }

    bb10 (cleanup): {
        switchInt(_13) -> [false: bb12, otherwise: bb9]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:360:9: 360:10
    }

    bb11 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:361:5: 361:6
    }

    bb12 (cleanup): {
        switchInt(_14) -> [false: bb8, otherwise: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:361:5: 361:6
    }
}

fn guard(_1: T, _2: F) -> ScopeGuard<T, F> {
    debug v => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:367:20: 367:21
    debug dropfn => _2;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:367:26: 367:32
    let mut _0: ScopeGuard<T, F>;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:367:40: 367:64
    let mut _3: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:370:31: 370:32
    let mut _4: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:370:34: 370:40

    bb0: {
        _3 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:370:31: 370:32
        _4 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:370:34: 370:40
        _0 = ScopeGuard::<T, F>::with_strategy(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:370:5: 370:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:370:5: 370:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T, F) -> ScopeGuard<T, F> {ScopeGuard::<T, F>::with_strategy}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:371:2: 371:2
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:428:1: 437:2>::deref(_1: &ScopeGuard<T, F, S>) -> &T {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:434:14: 434:19
    let mut _0: &T;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:9: 435:21
    let _2: &T;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:10: 435:21
    let mut _3: &core::mem::ManuallyDrop<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:11: 435:21

    bb0: {
        _3 = &((*_1).0: core::mem::ManuallyDrop<T>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:11: 435:21
        _2 = <ManuallyDrop<T> as Deref>::deref(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:10: 435:21
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:10: 435:21
                                         // + literal: Const { ty: for<'r> fn(&'r ManuallyDrop<T>) -> &'r <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:435:9: 435:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:436:6: 436:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:439:1: 446:2>::deref_mut(_1: &mut ScopeGuard<T, F, S>) -> &mut T {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:443:18: 443:27
    let mut _0: &mut T;                  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:443:32: 443:38
    let mut _2: &mut T;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:9: 444:25
    let mut _3: &mut T;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:9: 444:25
    let mut _4: &mut T;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:14: 444:25
    let mut _5: &mut core::mem::ManuallyDrop<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:15: 444:25

    bb0: {
        _5 = &mut ((*_1).0: core::mem::ManuallyDrop<T>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:15: 444:25
        _4 = <ManuallyDrop<T> as DerefMut>::deref_mut(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:14: 444:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:14: 444:25
                                         // + literal: Const { ty: for<'r> fn(&'r mut ManuallyDrop<T>) -> &'r mut <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as DerefMut>::deref_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = &mut (*_4);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:9: 444:25
        _2 = &mut (*_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:9: 444:25
        _0 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:444:9: 444:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:445:6: 445:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:448:1: 462:2>::drop(_1: &mut ScopeGuard<T, F, S>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:452:13: 452:22
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:452:24: 452:24
    let _2: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:14: 455:19
    let _3: F;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:21: 455:27
    let mut _4: (T, F);                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:31: 457:10
    let mut _5: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:14: 456:37
    let mut _6: *const T;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:24: 456:36
    let _7: &T;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:24: 456:36
    let _8: &T;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:25: 456:36
    let mut _9: &core::mem::ManuallyDrop<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:26: 456:36
    let mut _10: F;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:39: 456:63
    let mut _11: *const F;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:49: 456:62
    let _12: &F;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:49: 456:62
    let _13: &F;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:50: 456:62
    let mut _14: &core::mem::ManuallyDrop<F>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:51: 456:62
    let mut _15: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:458:12: 458:27
    let _16: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:26
    let mut _17: F;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:19
    let mut _18: (T,);                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:26
    let mut _19: T;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:20: 459:25
    let mut _20: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    let mut _21: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    scope 1 {
        debug value => _2;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:14: 455:19
        debug dropfn => _3;              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:21: 455:27
    }
    scope 2 {
    }

    bb0: {
        _21 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:31: 457:10
        _20 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:31: 457:10
        _9 = &((*_1).0: core::mem::ManuallyDrop<T>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:26: 456:36
        _8 = <ManuallyDrop<T> as Deref>::deref(move _9) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:25: 456:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:25: 456:36
                                         // + literal: Const { ty: for<'r> fn(&'r ManuallyDrop<T>) -> &'r <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = _8;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:24: 456:36
        _6 = &raw const (*_7);           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:24: 456:36
        _5 = read::<T>(move _6) -> bb2;  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:14: 456:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:14: 456:23
                                         // + literal: Const { ty: unsafe fn(*const T) -> T {read::<T>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = &((*_1).1: core::mem::ManuallyDrop<F>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:51: 456:62
        _13 = <ManuallyDrop<F> as Deref>::deref(move _14) -> [return: bb3, unwind: bb11]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:50: 456:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:50: 456:62
                                         // + literal: Const { ty: for<'r> fn(&'r ManuallyDrop<F>) -> &'r <ManuallyDrop<F> as Deref>::Target {<ManuallyDrop<F> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _12 = _13;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:49: 456:62
        _11 = &raw const (*_12);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:49: 456:62
        _10 = read::<F>(move _11) -> [return: bb4, unwind: bb11]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:39: 456:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:39: 456:48
                                         // + literal: Const { ty: unsafe fn(*const F) -> F {read::<F>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_4);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:13: 456:64
        (_4.0: T) = move _5;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:13: 456:64
        (_4.1: F) = move _10;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:13: 456:64
        _21 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:14: 455:19
        _2 = move (_4.0: T);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:14: 455:19
        _20 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:21: 455:27
        _3 = move (_4.1: F);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:455:21: 455:27
        _15 = <S as Strategy>::should_run() -> [return: bb5, unwind: bb16]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:458:12: 458:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:458:12: 458:25
                                         // + literal: Const { ty: fn() -> bool {<S as Strategy>::should_run}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        switchInt(move _15) -> [false: bb7, otherwise: bb6]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:458:12: 458:27
    }

    bb6: {
        _20 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:19
        _17 = move _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:19
        _21 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:20: 459:25
        _19 = move _2;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:20: 459:25
        Deinit(_18);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:26
        (_18.0: T) = move _19;           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:26
        _16 = <F as FnOnce<(T,)>>::call_once(move _17, move _18) -> [return: bb18, unwind: bb16]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:26
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:19
                                         // + literal: Const { ty: extern "rust-call" fn(F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnOnce<(T,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        switchInt(_20) -> [false: bb8, otherwise: bb13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb8: {
        _20 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
        switchInt(_21) -> [false: bb9, otherwise: bb14]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb9: {
        _21 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:6: 461:6
    }

    bb10 (cleanup): {
        switchInt(_21) -> [false: bb12, otherwise: bb17]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb11 (cleanup): {
        drop(_5) -> bb12;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:456:63: 456:64
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:452:5: 461:6
    }

    bb13: {
        drop(_3) -> [return: bb8, unwind: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb14: {
        drop(_2) -> bb9;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb15 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb16 (cleanup): {
        switchInt(_20) -> [false: bb10, otherwise: bb15]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb17 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:461:5: 461:6
    }

    bb18: {
        goto -> bb7;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:459:13: 459:26
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:464:1: 474:2>::fmt(_1: &ScopeGuard<T, F, S>, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:469:12: 469:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:469:19: 469:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:469:46: 469:57
    let mut _3: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 472:19
    let mut _4: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 471:39
    let mut _5: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 471:39
    let mut _6: core::fmt::DebugStruct;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 470:47
    let mut _7: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 470:47
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:24: 470:46
    let _9: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:24: 470:46
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:17: 471:24
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:17: 471:24
    let mut _12: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:26: 471:38
    let mut _13: &T;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:26: 471:38
    let _14: &T;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:26: 471:38
    let _15: &T;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:27: 471:38
    let mut _16: &core::mem::ManuallyDrop<T>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:28: 471:38

    bb0: {
        _7 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 470:47
        _9 = const "ScopeGuard";         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:24: 470:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:24: 470:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:24: 470:46
        _6 = Formatter::debug_struct(move _7, move _8) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 470:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:11: 470:23
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugStruct<'b, '_> {Formatter::debug_struct}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 471:39
        _11 = const "value";             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:17: 471:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:17: 471:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:17: 471:24
        _16 = &((*_1).0: core::mem::ManuallyDrop<T>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:28: 471:38
        _15 = <ManuallyDrop<T> as Deref>::deref(move _16) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:27: 471:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:27: 471:38
                                         // + literal: Const { ty: for<'r> fn(&'r ManuallyDrop<T>) -> &'r <ManuallyDrop<T> as Deref>::Target {<ManuallyDrop<T> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = _15;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:26: 471:38
        _13 = _14;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:26: 471:38
        _12 = move _13 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:26: 471:38
        _4 = DebugStruct::field(move _5, move _10, move _12) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 471:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:471:11: 471:16
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _3 = &mut (*_4);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 472:19
        _0 = DebugStruct::finish(move _3) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:470:9: 472:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:472:11: 472:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugStruct) -> Result<(), Error> {DebugStruct::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:473:6: 473:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:212:10: 212:15>::fmt(_1: &Always, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:212:10: 212:15
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:212:10: 212:15
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:212:10: 212:15
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\scopeguard-1.1.0\src\lib.rs:212:10: 212:15
    }
}
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get() -> usize {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:73:17: 73:22

    bb0: {
        _0 = get_num_cpus() -> bb1;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:74:5: 74:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:74:5: 74:17
                                         // + literal: Const { ty: fn() -> usize {get_num_cpus}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:75:2: 75:2
    }
}

fn get_physical() -> usize {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:108:26: 108:31

    bb0: {
        _0 = get_num_physical_cpus() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:109:5: 109:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:109:5: 109:26
                                         // + literal: Const { ty: fn() -> usize {get_num_physical_cpus}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:110:2: 110:2
    }
}

fn get_num_physical_cpus() -> usize {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:121:31: 121:36
    let mut _1: std::option::Option<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:122:11: 122:42
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:123:9: 123:18
    let _3: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:123:14: 123:17
    scope 1 {
        debug num => _3;                 // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:123:14: 123:17
    }

    bb0: {
        _1 = get_num_physical_cpus_windows() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:122:11: 122:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:122:11: 122:40
                                         // + literal: Const { ty: fn() -> Option<usize> {get_num_physical_cpus_windows}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:122:11: 122:42
        switchInt(move _2) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:122:5: 122:42
    }

    bb2: {
        _0 = get_num_cpus() -> bb5;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:124:17: 124:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:124:17: 124:29
                                         // + literal: Const { ty: fn() -> usize {get_num_cpus}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:122:11: 122:42
    }

    bb4: {
        _3 = ((_1 as Some).0: usize);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:123:14: 123:17
        _0 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:123:22: 123:25
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:123:24: 123:25
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:126:2: 126:2
    }
}

fn get_num_physical_cpus_windows::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76], _2: &&SYSTEM_LOGICAL_PROCESSOR_INFORMATION) -> bool {
    debug proc_info => _2;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:18: 193:27
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:29: 193:29
    let mut _3: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:29: 193:51
    let mut _4: &get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:18: 193:27

    bb0: {
        _4 = move (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:29: 193:51
        _3 = ((*_4).1: u32);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:29: 193:51
        _0 = Eq(move _3, const RelationProcessorCore); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:29: 193:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:76: 193:76
    }
}

fn get_num_physical_cpus_windows() -> Option<usize> {
    let mut _0: std::option::Option<usize>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:129:39: 129:52
    let mut _1: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:156:9: 156:24
    let _2: u32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:9: 159:74
    let mut _3: *mut get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:40: 159:55
    let mut _4: &mut u32;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:57: 159:73
    let mut _5: &mut u32;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:57: 159:73
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:162:23: 162:77
    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:53
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:19
    let mut _11: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:28: 165:53
    let mut _12: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:28: 165:39
    let mut _13: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:42: 165:53
    let mut _14: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:87
    let mut _15: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:82
    let mut _16: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:68
    let mut _17: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:71: 165:82
    let mut _18: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:82
    let mut _20: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:17: 169:28
    let mut _21: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:31: 169:42
    let mut _22: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:17: 169:42
    let mut _24: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:38: 172:52
    let mut _25: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:38: 172:43
    let mut _27: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:18: 177:84
    let mut _28: *mut get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:49: 177:65
    let mut _29: &mut std::vec::Vec<get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:49: 177:65
    let mut _30: &mut u32;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:67: 177:83
    let mut _31: &mut u32;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:67: 177:83
    let mut _32: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:181:8: 181:14
    let mut _34: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:17: 185:28
    let mut _35: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:31: 185:42
    let mut _36: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:17: 185:42
    let _37: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:9: 188:36
    let mut _38: &mut std::vec::Vec<get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:9: 188:36
    let mut _39: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:21: 188:35
    let mut _40: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:21: 188:26
    let mut _42: std::iter::Filter<std::slice::Iter<get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 193:77
    let mut _43: std::slice::Iter<get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
    let mut _44: &[get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
    let _45: &[get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
    let mut _46: &std::vec::Vec<get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
    let mut _47: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76
    let mut _48: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:196:8: 196:23
    let mut _49: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:199:14: 199:29
    scope 1 {
        debug needed_size => _1;         // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:156:9: 156:24
        let _6: u32;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:162:9: 162:20
        scope 2 {
        }
        scope 3 {
            debug struct_size => _6;     // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:162:9: 162:20
            let _19: u32;                // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:9: 169:14
            scope 4 {
                debug count => _19;      // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:9: 169:14
                let mut _23: std::vec::Vec<get_num_physical_cpus_windows::SYSTEM_LOGICAL_PROCESSOR_INFORMATION>; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:9: 172:16
                scope 5 {
                    debug buf => _23;    // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:9: 172:16
                    let _26: u32;        // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:174:9: 174:15
                    scope 6 {
                        debug result => _26; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:174:9: 174:15
                        let _33: u32;    // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:9: 185:14
                        scope 7 {
                        }
                        scope 8 {
                            debug count => _33; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:9: 185:14
                            let _41: usize; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:9: 191:24
                            scope 9 {
                            }
                            scope 10 {
                                debug phys_proc_count => _41; // in scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:9: 191:24
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_u32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:156:27: 156:28
        _3 = null_mut::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>() -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:40: 159:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:40: 159:53
                                         // + literal: Const { ty: fn() -> *mut SYSTEM_LOGICAL_PROCESSOR_INFORMATION {null_mut::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = &mut _1;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:57: 159:73
        _4 = &mut (*_5);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:57: 159:73
        _2 = get_num_physical_cpus_windows::GetLogicalProcessorInformation(move _3, move _4) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:9: 159:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:159:9: 159:39
                                         // + literal: Const { ty: for<'r> unsafe extern "system" fn(*mut SYSTEM_LOGICAL_PROCESSOR_INFORMATION, &'r mut u32) -> u32 {get_num_physical_cpus_windows::GetLogicalProcessorInformation}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _7 = std::mem::size_of::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>() -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:162:23: 162:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:162:23: 162:75
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _6 = move _7 as u32 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:162:23: 162:84
        _10 = _1;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:19
        switchInt(move _10) -> [0_u32: bb7, otherwise: bb8]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:53
    }

    bb4: {
        _8 = const true;                 // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
        goto -> bb6;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
    }

    bb5: {
        _16 = _1;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:68
        _17 = _6;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:71: 165:82
        _18 = Eq(_17, const 0_u32);      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:82
        assert(!move _18, "attempt to calculate the remainder of `{}` with a divisor of zero", _16) -> bb10; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:82
    }

    bb6: {
        switchInt(move _8) -> [false: bb12, otherwise: bb11]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
    }

    bb7: {
        _9 = const true;                 // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:53
        goto -> bb9;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:53
    }

    bb8: {
        _12 = _1;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:28: 165:39
        _13 = _6;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:42: 165:53
        _11 = Lt(move _12, move _13);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:28: 165:53
        _9 = move _11;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:53
        goto -> bb9;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:53
    }

    bb9: {
        switchInt(move _9) -> [false: bb5, otherwise: bb4]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
    }

    bb10: {
        _15 = Rem(move _16, move _17);   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:82
        _14 = Ne(move _15, const 0_u32); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:57: 165:87
        _8 = move _14;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
        goto -> bb6;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:165:8: 165:87
    }

    bb11: {
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:166:16: 166:20
        discriminant(_0) = 0;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:166:16: 166:20
        goto -> bb28;                    // scope 3 at no-location
    }

    bb12: {
        _20 = _1;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:17: 169:28
        _21 = _6;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:31: 169:42
        _22 = Eq(_21, const 0_u32);      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:17: 169:42
        assert(!move _22, "attempt to divide `{}` by zero", _20) -> bb13; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:17: 169:42
    }

    bb13: {
        _19 = Div(move _20, move _21);   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:169:17: 169:42
        _25 = _19;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:38: 172:43
        _24 = move _25 as usize (Misc);  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:38: 172:52
        _23 = Vec::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>::with_capacity(move _24) -> bb14; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:19: 172:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:172:19: 172:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> {Vec::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>::with_capacity}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _29 = &mut _23;                  // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:49: 177:65
        _28 = Vec::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>::as_mut_ptr(move _29) -> [return: bb15, unwind: bb29]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:49: 177:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:53: 177:63
                                         // + literal: Const { ty: for<'r> fn(&'r mut Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>) -> *mut SYSTEM_LOGICAL_PROCESSOR_INFORMATION {Vec::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _31 = &mut _1;                   // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:67: 177:83
        _30 = &mut (*_31);               // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:67: 177:83
        _27 = get_num_physical_cpus_windows::GetLogicalProcessorInformation(move _28, move _30) -> [return: bb16, unwind: bb29]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:18: 177:84
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:18: 177:48
                                         // + literal: Const { ty: for<'r> unsafe extern "system" fn(*mut SYSTEM_LOGICAL_PROCESSOR_INFORMATION, &'r mut u32) -> u32 {get_num_physical_cpus_windows::GetLogicalProcessorInformation}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _26 = move _27;                  // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:177:9: 177:84
        _32 = _26;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:181:8: 181:14
        switchInt(move _32) -> [0_u32: bb17, otherwise: bb18]; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:181:8: 181:19
    }

    bb17: {
        Deinit(_0);                      // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:182:16: 182:20
        discriminant(_0) = 0;            // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:182:16: 182:20
        drop(_23) -> bb28;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:201:1: 201:2
    }

    bb18: {
        _34 = _1;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:17: 185:28
        _35 = _6;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:31: 185:42
        _36 = Eq(_35, const 0_u32);      // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:17: 185:42
        assert(!move _36, "attempt to divide `{}` by zero", _34) -> [success: bb19, unwind: bb29]; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:17: 185:42
    }

    bb19: {
        _33 = Div(move _34, move _35);   // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:185:17: 185:42
        _38 = &mut _23;                  // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:9: 188:36
        _40 = _33;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:21: 188:26
        _39 = move _40 as usize (Misc);  // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:21: 188:35
        _37 = Vec::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>::set_len(move _38, move _39) -> [return: bb20, unwind: bb29]; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:9: 188:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:188:13: 188:20
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r mut Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, usize) {Vec::<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>::set_len}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _46 = &_23;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
        _45 = <Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> as Deref>::deref(move _46) -> [return: bb21, unwind: bb29]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
                                         // + literal: Const { ty: for<'r> fn(&'r Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>) -> &'r <Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> as Deref>::Target {<Vec<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _44 = _45;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
        _43 = core::slice::<impl [SYSTEM_LOGICAL_PROCESSOR_INFORMATION]>::iter(move _44) -> [return: bb22, unwind: bb29]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 191:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:31: 191:35
                                         // + literal: Const { ty: for<'r> fn(&'r [SYSTEM_LOGICAL_PROCESSOR_INFORMATION]) -> std::slice::Iter<'r, SYSTEM_LOGICAL_PROCESSOR_INFORMATION> {core::slice::<impl [SYSTEM_LOGICAL_PROCESSOR_INFORMATION]>::iter}, val: Value(Scalar(<ZST>)) }
    }

    bb22: {
        _42 = <std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]>(move _43, move _47) -> [return: bb23, unwind: bb29]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 193:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:10: 193:16
                                         // + literal: Const { ty: fn(std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]) -> Filter<std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]> {<std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]>}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _41 = <Filter<std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]> as Iterator>::count(move _42) -> [return: bb24, unwind: bb29]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:191:27: 194:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:194:10: 194:15
                                         // + literal: Const { ty: fn(Filter<std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]>) -> usize {<Filter<std::slice::Iter<SYSTEM_LOGICAL_PROCESSOR_INFORMATION>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:193:17: 193:76]> as Iterator>::count}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        _48 = _41;                       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:196:8: 196:23
        switchInt(move _48) -> [0_usize: bb25, otherwise: bb26]; // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:196:8: 196:28
    }

    bb25: {
        Deinit(_0);                      // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:197:9: 197:13
        discriminant(_0) = 0;            // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:197:9: 197:13
        goto -> bb27;                    // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:196:5: 200:6
    }

    bb26: {
        _49 = _41;                       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:199:14: 199:29
        Deinit(_0);                      // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:199:9: 199:30
        ((_0 as Some).0: usize) = move _49; // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:199:9: 199:30
        discriminant(_0) = 1;            // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:199:9: 199:30
        goto -> bb27;                    // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:196:5: 200:6
    }

    bb27: {
        drop(_23) -> bb28;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:201:1: 201:2
    }

    bb28: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:201:2: 201:2
    }

    bb29 (cleanup): {
        drop(_23) -> bb30;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:201:1: 201:2
    }

    bb30 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:129:1: 201:2
    }
}

const RelationProcessorCore: u32 = {
    let mut _0: u32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:136:34: 136:37

    bb0: {
        _0 = const 0_u32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:136:40: 136:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:136:5: 136:42
    }
}

SYSTEM_LOGICAL_PROCESSOR_INFORMATION::_unused::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:143:24: 143:25

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:143:24: 143:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:143:24: 143:25
    }
}

fn get_num_cpus() -> usize {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:204:22: 204:27
    let _2: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:9: 226:36
    let mut _3: *mut get_num_cpus::SYSTEM_INFO; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:23: 226:35
    let mut _4: &mut get_num_cpus::SYSTEM_INFO; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:23: 226:35
    let mut _5: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:227:9: 227:37
    scope 1 {
// WARNING: This output format is intended for human consumers only
        let mut _1: get_num_cpus::SYSTEM_INFO; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:225:13: 225:24
        scope 2 {
            debug sysinfo => _1;         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:225:13: 225:24
        }
    }

    bb0: {
        _1 = zeroed::<SYSTEM_INFO>() -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:225:40: 225:58
                                         // mir::Constant
// and is subject to change without notice. Knock yourself out.
fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:13:1: 26:2>::description(_1: &error::Error) -> &str {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:225:40: 225:56
                                         // + literal: Const { ty: unsafe fn() -> SYSTEM_INFO {zeroed::<SYSTEM_INFO>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:23: 226:35
        _3 = &raw mut (*_4);             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:23: 226:35
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:14:20: 14:25
        _2 = get_num_cpus::GetSystemInfo(move _3) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:9: 226:36
                                         // mir::Constant
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:15:9: 15:24

    bb0: {
        _0 = const "AutoCfg error";      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:15:9: 15:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:15:9: 15:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:226:9: 226:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:16:6: 16:6
    }
}

                                         // + literal: Const { ty: unsafe extern "system" fn(*mut SYSTEM_INFO) {get_num_cpus::GetSystemInfo}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:13:1: 26:2>::cause(_1: &error::Error) -> Option<&dyn std::error::Error> {
        _5 = (_1.6: u32);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:227:9: 227:37
        _0 = move _5 as usize (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:227:9: 227:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\num_cpus-1.13.1\src\lib.rs:229:2: 229:2
    }
}
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:18:14: 18:19
    let mut _0: std::option::Option<&dyn std::error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:18:24: 18:45
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:13: 20:33
    let _3: &std::io::Error;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:27: 20:32
    let mut _4: &dyn std::error::Error;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:42: 20:43
    let mut _5: &std::io::Error;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:42: 20:43
    let _6: &std::num::ParseIntError;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:28: 21:33
    let mut _7: &dyn std::error::Error;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:43: 21:44
    let mut _8: &std::num::ParseIntError; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:43: 21:44
    let _9: &std::str::Utf8Error;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:29: 22:34
    let mut _10: &dyn std::error::Error; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:44: 22:45
    let mut _11: &std::str::Utf8Error;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:44: 22:45
    scope 1 {
        debug e => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:27: 20:32
    }
    scope 2 {
        debug e => _6;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:28: 21:33
    }
    scope 3 {
        debug e => _9;                   // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:29: 22:34
    }

    bb0: {
        _2 = discriminant(((*_1).0: error::ErrorKind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:19:15: 19:24
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:19:9: 19:24
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:23:36: 23:40
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:23:36: 23:40
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:23:36: 23:40
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:19:15: 19:24
    }

    bb3: {
        _3 = &((((*_1).0: error::ErrorKind) as Io).0: std::io::Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:27: 20:32
        _5 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:42: 20:43
        _4 = move _5 as &dyn std::error::Error (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:42: 20:43
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:37: 20:44
        ((_0 as Some).0: &dyn std::error::Error) = move _4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:37: 20:44
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:37: 20:44
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:20:43: 20:44
    }

    bb4: {
        _6 = &((((*_1).0: error::ErrorKind) as Num).0: std::num::ParseIntError); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:28: 21:33
        _8 = _6;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:43: 21:44
        _7 = move _8 as &dyn std::error::Error (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:43: 21:44
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:38: 21:45
        ((_0 as Some).0: &dyn std::error::Error) = move _7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:38: 21:45
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:38: 21:45
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:21:44: 21:45
    }

    bb5: {
        _9 = &((((*_1).0: error::ErrorKind) as Utf8).0: std::str::Utf8Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:29: 22:34
        _11 = _9;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:44: 22:45
        _10 = move _11 as &dyn std::error::Error (Pointer(Unsize)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:44: 22:45
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:39: 22:46
        ((_0 as Some).0: &dyn std::error::Error) = move _10; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:39: 22:46
        discriminant(_0) = 1;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:39: 22:46
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:22:45: 22:46
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:25:6: 25:6
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:28:1: 37:2>::fmt(_1: &error::Error, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:29:12: 29:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:29:19: 29:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:29:46: 29:68
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:13: 31:33
    let _4: &std::io::Error;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:27: 31:32
    let mut _5: &std::io::Error;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:37: 31:45
    let mut _6: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:43: 31:44
    let _7: &std::num::ParseIntError;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:28: 32:33
    let mut _8: &std::num::ParseIntError; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:38: 32:46
    let mut _9: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:44: 32:45
    let _10: &std::str::Utf8Error;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:29: 33:34
    let mut _11: &std::str::Utf8Error;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:39: 33:47
    let mut _12: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:45: 33:46
    let _13: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:30: 34:31
    let mut _14: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:36: 34:44
    let mut _15: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:42: 34:43
    scope 1 {
        debug e => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:27: 31:32
    }
    scope 2 {
        debug e => _7;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:28: 32:33
    }
    scope 3 {
        debug e => _10;                  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:29: 33:34
    }
    scope 4 {
        debug s => _13;                  // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:30: 34:31
    }

    bb0: {
        _3 = discriminant(((*_1).0: error::ErrorKind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:30:15: 30:24
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:30:9: 30:24
    }

    bb1: {
        _13 = ((((*_1).0: error::ErrorKind) as Other).0: &str); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:30: 34:31
        _14 = _13;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:36: 34:44
        _15 = &mut (*_2);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:42: 34:43
        _0 = <str as std::fmt::Display>::fmt(move _14, move _15) -> bb6; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:36: 34:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:34:38: 34:41
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error> {<str as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:30:15: 30:24
    }

    bb3: {
        _4 = &((((*_1).0: error::ErrorKind) as Io).0: std::io::Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:27: 31:32
        _5 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:37: 31:45
        _6 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:43: 31:44
        _0 = <std::io::Error as std::fmt::Display>::fmt(move _5, move _6) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:37: 31:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:31:39: 31:42
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r std::io::Error, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error> {<std::io::Error as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _7 = &((((*_1).0: error::ErrorKind) as Num).0: std::num::ParseIntError); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:28: 32:33
        _8 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:38: 32:46
        _9 = &mut (*_2);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:44: 32:45
        _0 = <ParseIntError as std::fmt::Display>::fmt(move _8, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:38: 32:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:32:40: 32:43
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r ParseIntError, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error> {<ParseIntError as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _10 = &((((*_1).0: error::ErrorKind) as Utf8).0: std::str::Utf8Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:29: 33:34
        _11 = _10;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:39: 33:47
        _12 = &mut (*_2);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:45: 33:46
        _0 = <Utf8Error as std::fmt::Display>::fmt(move _11, move _12) -> bb6; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:39: 33:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:33:41: 33:44
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r Utf8Error, &'s mut Formatter<'t0>) -> Result<(), std::fmt::Error> {<Utf8Error as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:36:6: 36:6
    }
}

fn from_io(_1: std::io::Error) -> error::Error {
    debug e => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:47:16: 47:17
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:47:33: 47:38
    let mut _2: error::ErrorKind;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:49:15: 49:31
    let mut _3: std::io::Error;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:49:29: 49:30

    bb0: {
        _3 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:49:29: 49:30
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:49:15: 49:31
        ((_2 as Io).0: std::io::Error) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:49:15: 49:31
        discriminant(_2) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:49:15: 49:31
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:48:5: 50:6
        (_0.0: error::ErrorKind) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:48:5: 50:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:51:2: 51:2
    }
}

fn from_num(_1: ParseIntError) -> error::Error {
    debug e => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:53:17: 53:18
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:53:43: 53:48
    let mut _2: error::ErrorKind;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:55:15: 55:32
    let mut _3: std::num::ParseIntError; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:55:30: 55:31

    bb0: {
        _3 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:55:30: 55:31
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:55:15: 55:32
        ((_2 as Num).0: std::num::ParseIntError) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:55:15: 55:32
        discriminant(_2) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:55:15: 55:32
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:54:5: 56:6
        (_0.0: error::ErrorKind) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:54:5: 56:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:57:2: 57:2
    }
}

fn error::from_utf8(_1: Utf8Error) -> error::Error {
    debug e => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:59:18: 59:19
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:59:40: 59:45
    let mut _2: error::ErrorKind;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:61:15: 61:33
    let mut _3: std::str::Utf8Error;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:61:31: 61:32

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:61:31: 61:32
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:61:15: 61:33
        ((_2 as Utf8).0: std::str::Utf8Error) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:61:15: 61:33
        discriminant(_2) = 2;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:61:15: 61:33
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:60:5: 62:6
        (_0.0: error::ErrorKind) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:60:5: 62:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:63:2: 63:2
    }
}

fn error::from_str(_1: &str) -> error::Error {
    debug s => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:65:17: 65:18
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:65:37: 65:42
    let mut _2: error::ErrorKind;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:67:15: 67:34
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:67:32: 67:33

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:67:32: 67:33
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:67:15: 67:34
        ((_2 as Other).0: &str) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:67:15: 67:34
        discriminant(_2) = 3;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:67:15: 67:34
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:66:5: 68:6
        (_0.0: error::ErrorKind) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:66:5: 68:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:69:2: 69:2
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:15:1: 60:2>::new(_1: usize, _2: usize, _3: usize) -> Version {
    debug major => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:17:16: 17:21
    debug minor => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:17:30: 17:35
    debug patch => _3;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:17:44: 17:49
    let mut _0: version::Version;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:17:61: 17:65
    let mut _4: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:19:20: 19:25
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:20:20: 20:25
    let mut _6: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:21:20: 21:25

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:19:20: 19:25
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:20:20: 20:25
        _6 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:21:20: 21:25
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:18:9: 22:10
        (_0.0: usize) = move _4;         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:18:9: 22:10
        (_0.1: usize) = move _5;         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:18:9: 22:10
        (_0.2: usize) = move _6;         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:18:9: 22:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:23:6: 23:6
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:15:1: 60:2>::from_rustc::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:49: 37:85], _2: &&str) -> bool {
    debug line => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:50: 37:54
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:56: 37:56
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:56: 37:85
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:50: 37:54

    bb0: {
        _4 = move (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:56: 37:85
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:56: 37:85
        _0 = core::str::<impl str>::starts_with::<&str>(move _3, const "release: ") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:56: 37:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:61: 37:72
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::starts_with::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:73: 37:84
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:85: 37:85
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:15:1: 60:2>::from_rustc(_1: &Path) -> Result<Version, error::Error> {
    debug rustc => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:25:23: 25:28
    let mut _0: std::result::Result<version::Version, error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:25:40: 25:59
    let _2: std::process::Output;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:13: 27:19
    let mut _3: std::result::Result<std::process::Output, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 30:37
    let mut _4: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 29:22
    let mut _5: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 29:22
    let mut _6: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 28:47
    let mut _7: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 28:47
    let mut _8: std::process::Command;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 27:46
    let mut _9: &std::path::Path;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:40: 27:45
    let mut _10: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let _12: std::process::Output;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
    let _13: error::Error;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
    let mut _14: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _15: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:12: 31:36
    let mut _16: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:13: 31:36
    let mut _17: &std::process::ExitStatus; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:13: 31:36
    let mut _18: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:24: 32:66
    let mut _20: std::result::Result<&str, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:83
    let mut _21: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:57
    let mut _22: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
    let _23: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
    let mut _24: &std::vec::Vec<u8>;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
    let _25: &std::vec::Vec<u8>;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
    let mut _26: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _29: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _31: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:86
    let mut _32: &mut std::str::Lines;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:86
    let mut _33: std::str::Lines;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:43
    let mut _34: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:43
    let mut _35: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:49: 37:85]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:49: 37:85
    let mut _36: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:13: 38:23
    let _38: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:28: 38:53
    let mut _39: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:28: 38:32
    let mut _40: std::ops::RangeFrom<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:52
    let mut _41: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:50
    let mut _42: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:50
    let _43: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:44
    let mut _44: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:32: 39:79
    let mut _46: std::option::Option<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:29: 43:46
    let mut _47: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:29: 43:46
    let mut _48: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:13: 44:20
    let _50: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:25: 44:37
    let mut _51: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:25: 44:32
    let mut _52: std::ops::RangeTo<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:33: 44:36
    let mut _53: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:35: 44:36
    let mut _55: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:49:24: 49:46
    let mut _57: std::result::Result<&str, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:85
    let mut _58: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:37
    let mut _59: &mut std::str::SplitN<char>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:37
    let mut _60: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:44: 50:84
    let mut _61: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _64: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _66: std::result::Result<&str, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:85
    let mut _67: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:37
    let mut _68: &mut std::str::SplitN<char>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:37
    let mut _69: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:44: 51:84
    let mut _70: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _73: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _75: std::result::Result<&str, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:85
    let mut _76: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:37
    let mut _77: &mut std::str::SplitN<char>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:37
    let mut _78: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:44: 52:84
    let mut _79: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _82: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _83: version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:54:12: 58:10
    let mut _84: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 58:10
    let mut _85: std::result::Result<usize, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:56
    let mut _86: std::result::Result<usize, std::num::ParseIntError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:31
    let mut _87: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:31
    let mut _88: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _91: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _92: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 58:10
    let mut _93: std::result::Result<usize, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:56
    let mut _94: std::result::Result<usize, std::num::ParseIntError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:31
    let mut _95: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:31
    let mut _96: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _99: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _100: usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 58:10
    let mut _101: std::result::Result<usize, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:56
    let mut _102: std::result::Result<usize, std::num::ParseIntError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:31
    let mut _103: &str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:31
    let mut _104: isize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _107: error::Error;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _108: &[&str; 2];            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
    scope 1 {
        debug output => _2;              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:13: 27:19
        let _19: &str;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:13: 34:19
        let _27: &str;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        let _28: error::Error;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        scope 4 {
            debug output => _19;         // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:13: 34:19
            let _30: &str;               // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:13: 37:20
            let _37: &str;               // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:18: 38:22
            scope 7 {
                debug release => _30;    // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:13: 37:20
                let _45: &str;           // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:13: 43:20
                let _49: usize;          // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:18: 44:19
                scope 9 {
                    debug version => _45; // in scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:13: 43:20
                    let mut _54: std::str::SplitN<char>; // in scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:49:13: 49:21
                    scope 11 {
                        debug iter => _54; // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:49:13: 49:21
                        let _56: &str;   // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:13: 50:18
                        let _62: &str;   // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                        let _63: error::Error; // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                        scope 12 {
                            debug major => _56; // in scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:13: 50:18
                            let _65: &str; // in scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:13: 51:18
                            let _71: &str; // in scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                            let _72: error::Error; // in scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                            scope 15 {
                                debug minor => _65; // in scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:13: 51:18
                                let _74: &str; // in scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:13: 52:18
                                let _80: &str; // in scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                let _81: error::Error; // in scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                scope 18 {
                                    debug patch => _74; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:13: 52:18
                                    let _89: usize; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                    let _90: error::Error; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                    let _97: usize; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                    let _98: error::Error; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                    let _105: usize; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                    let _106: error::Error; // in scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                    scope 21 {
                                        debug value => _89; // in scope 21 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                    }
                                    scope 22 {
                                        debug error => _90; // in scope 22 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                    }
                                    scope 23 {
                                        debug value => _97; // in scope 23 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                    }
                                    scope 24 {
                                        debug error => _98; // in scope 24 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                    }
                                    scope 25 {
                                        debug value => _105; // in scope 25 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                    }
                                    scope 26 {
                                        debug error => _106; // in scope 26 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                    }
                                }
                                scope 19 {
                                    debug value => _80; // in scope 19 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                                }
                                scope 20 {
                                    debug error => _81; // in scope 20 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                                }
                            }
                            scope 16 {
                                debug value => _71; // in scope 16 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                            }
                            scope 17 {
                                debug error => _72; // in scope 17 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                            }
                        }
                        scope 13 {
                            debug value => _62; // in scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                        }
                        scope 14 {
                            debug error => _63; // in scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                        }
                    }
                }
                scope 10 {
                    debug i => _49;      // in scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:18: 44:19
                }
            }
            scope 8 {
                debug line => _37;       // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:18: 38:22
            }
        }
        scope 5 {
            debug value => _27;          // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        }
        scope 6 {
            debug error => _28;          // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        }
    }
    scope 2 {
        debug value => _12;              // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
    }
    scope 3 {
        debug error => _13;              // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
    }

    bb0: {
        _9 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:40: 27:45
        _8 = Command::new::<&Path>(move _9) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 27:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 27:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&Path) -> Command {Command::new::<&Path>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = &mut _8;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 28:47
        _108 = const Version::from_rustc::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Version::from_rustc, [], Some(promoted[0])) }
        _10 = _108;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
        _6 = Command::args::<&[&str; 2], &&str>(move _7, move _10) -> [return: bb2, unwind: bb76]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 28:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:14: 28:18
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &[&str; 2]) -> &'r mut Command {Command::args::<&[&str; 2], &&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = &mut (*_6);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 29:22
        _4 = Command::output(move _5) -> [return: bb3, unwind: bb76]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 29:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:29:14: 29:20
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _3 = Result::<Output, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>(move _4, from_io) -> [return: bb4, unwind: bb76]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 30:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:30:14: 30:21
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>, fn(std::io::Error) -> error::Error {from_io}) -> Result<Output, error::Error> {Result::<Output, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:30:22: 30:36
                                         // + literal: Const { ty: fn(std::io::Error) -> error::Error {from_io}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _11 = discriminant(_3);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 30:37
        switchInt(move _11) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb5: {
        _13 = move ((_3 as Err).0: error::Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _14 = move _13;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _14; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        drop(_8) -> bb71;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:30:38: 30:39
    }

    bb6: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:27:27: 30:37
    }

    bb7: {
        _12 = move ((_3 as Ok).0: std::process::Output); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _2 = move _12;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        drop(_8) -> [return: bb8, unwind: bb75]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:30:38: 30:39
    }

    bb8: {
        _17 = &(_2.0: std::process::ExitStatus); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:13: 31:36
        _16 = ExitStatus::success(move _17) -> [return: bb9, unwind: bb75]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:13: 31:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:27: 31:34
                                         // + literal: Const { ty: for<'r> fn(&'r ExitStatus) -> bool {ExitStatus::success}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _15 = Not(move _16);             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:12: 31:36
        switchInt(move _15) -> [false: bb12, otherwise: bb10]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:31:12: 31:36
    }

    bb10: {
        _18 = error::from_str(const "could not execute rustc") -> [return: bb11, unwind: bb75]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:24: 32:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:24: 32:39
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:40: 32:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:20: 32:67
        ((_0 as Err).0: error::Error) = move _18; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:20: 32:67
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:32:20: 32:67
        goto -> bb70;                    // scope 1 at no-location
    }

    bb12: {
        _25 = &(_2.1: std::vec::Vec<u8>); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
        _24 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
        _23 = <Vec<u8> as Deref>::deref(move _24) -> [return: bb13, unwind: bb75]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
                                         // + literal: Const { ty: for<'r> fn(&'r Vec<u8>) -> &'r <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _22 = _23;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:42: 34:56
        _21 = std::str::from_utf8(move _22) -> [return: bb14, unwind: bb75]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:41
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> Result<&'r str, Utf8Error> {std::str::from_utf8}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _20 = Result::<&str, Utf8Error>::map_err::<error::Error, fn(Utf8Error) -> error::Error {error::from_utf8}>(move _21, error::from_utf8) -> [return: bb15, unwind: bb75]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:83
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:58: 34:65
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>, fn(Utf8Error) -> error::Error {error::from_utf8}) -> Result<&str, error::Error> {Result::<&str, Utf8Error>::map_err::<error::Error, fn(Utf8Error) -> error::Error {error::from_utf8}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:66: 34:82
                                         // + literal: Const { ty: fn(Utf8Error) -> error::Error {error::from_utf8}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _26 = discriminant(_20);         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:83
        switchInt(move _26) -> [0_isize: bb18, 1_isize: bb16, otherwise: bb17]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb16: {
        _28 = move ((_20 as Err).0: error::Error); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _29 = move _28;                  // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _29; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb70;                    // scope 1 at no-location
    }

    bb17: {
        unreachable;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:34:27: 34:83
    }

    bb18: {
        _27 = ((_20 as Ok).0: &str);     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _19 = _27;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _34 = _19;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:43
        _33 = core::str::<impl str>::lines(move _34) -> [return: bb19, unwind: bb75]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:36: 37:41
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::str::Lines<'r> {core::str::<impl str>::lines}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _32 = &mut _33;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:86
        _31 = <std::str::Lines as Iterator>::find::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:49: 37:85]>(move _32, move _35) -> [return: bb20, unwind: bb75]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:86
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:44: 37:48
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::Lines, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:49: 37:85]) -> Option<<std::str::Lines as Iterator>::Item> {<std::str::Lines as Iterator>::find::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:49: 37:85]>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _36 = discriminant(_31);         // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:86
        switchInt(move _36) -> [0_isize: bb21, 1_isize: bb23, otherwise: bb22]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:23: 37:86
    }

    bb21: {
        _44 = error::from_str(const "could not find rustc release") -> [return: bb26, unwind: bb75]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:32: 39:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:32: 39:47
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:48: 39:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        unreachable;                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:37:29: 37:86
    }

    bb23: {
        _37 = ((_31 as Some).0: &str);   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:18: 38:22
        _39 = _37;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:28: 38:32
        _43 = const "release: ";         // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _42 = _43;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:50
        _41 = core::str::<impl str>::len(move _42) -> [return: bb24, unwind: bb75]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:45: 38:48
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> usize {core::str::<impl str>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb24: {
        Deinit(_40);                     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:52
        (_40.0: usize) = move _41;       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:33: 38:52
        _38 = <str as Index<RangeFrom<usize>>>::index(move _39, move _40) -> [return: bb25, unwind: bb75]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:28: 38:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:28: 38:53
                                         // + literal: Const { ty: for<'r> fn(&'r str, RangeFrom<usize>) -> &'r <str as Index<RangeFrom<usize>>>::Output {<str as Index<RangeFrom<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _30 = _38;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:38:27: 38:53
        _47 = _30;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:29: 43:46
        _46 = core::str::<impl str>::find::<char>(move _47, const '-') -> [return: bb27, unwind: bb75]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:29: 43:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:37: 43:41
                                         // + literal: Const { ty: fn(&str, char) -> Option<usize> {core::str::<impl str>::find::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        Deinit(_0);                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:28: 39:80
        ((_0 as Err).0: error::Error) = move _44; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:28: 39:80
        discriminant(_0) = 1;            // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:39:28: 39:80
        goto -> bb70;                    // scope 4 at no-location
    }

    bb27: {
        _48 = discriminant(_46);         // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:29: 43:46
        switchInt(move _48) -> [0_isize: bb28, 1_isize: bb30, otherwise: bb29]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:23: 43:46
    }

    bb28: {
        _45 = _30;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:45:21: 45:28
        goto -> bb32;                    // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:45:21: 45:28
    }

    bb29: {
        unreachable;                     // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:43:29: 43:46
    }

    bb30: {
        _49 = ((_46 as Some).0: usize);  // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:18: 44:19
        _51 = _30;                       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:25: 44:32
        _53 = _49;                       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:35: 44:36
        Deinit(_52);                     // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:33: 44:36
        (_52.0: usize) = move _53;       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:33: 44:36
        _50 = <str as Index<RangeTo<usize>>>::index(move _51, move _52) -> [return: bb31, unwind: bb75]; // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:25: 44:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:25: 44:37
                                         // + literal: Const { ty: for<'r> fn(&'r str, RangeTo<usize>) -> &'r <str as Index<RangeTo<usize>>>::Output {<str as Index<RangeTo<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        _45 = _50;                       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:24: 44:37
        goto -> bb32;                    // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:44:36: 44:37
    }

    bb32: {
        _55 = _45;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:49:24: 49:46
        _54 = core::str::<impl str>::splitn::<char>(move _55, const 3_usize, const '.') -> [return: bb33, unwind: bb75]; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:49:24: 49:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:49:32: 49:38
                                         // + literal: Const { ty: fn(&str, usize, char) -> std::str::SplitN<char> {core::str::<impl str>::splitn::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        _59 = &mut _54;                  // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:37
        _58 = <std::str::SplitN<char> as Iterator>::next(move _59) -> [return: bb34, unwind: bb75]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:31: 50:35
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::SplitN<char>) -> Option<<std::str::SplitN<char> as Iterator>::Item> {<std::str::SplitN<char> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _60 = error::from_str(const "missing major version") -> [return: bb35, unwind: bb75]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:44: 50:84
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:44: 50:59
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:60: 50:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _57 = Option::<&str>::ok_or::<error::Error>(move _58, move _60) -> [return: bb36, unwind: bb75]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:38: 50:43
                                         // + literal: Const { ty: fn(Option<&str>, error::Error) -> Result<&str, error::Error> {Option::<&str>::ok_or::<error::Error>}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        _61 = discriminant(_57);         // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:85
        switchInt(move _61) -> [0_isize: bb39, 1_isize: bb37, otherwise: bb38]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb37: {
        _63 = move ((_57 as Err).0: error::Error); // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _64 = move _63;                  // scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _64; // scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb70;                    // scope 11 at no-location
    }

    bb38: {
        unreachable;                     // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:50:26: 50:85
    }

    bb39: {
        _62 = ((_57 as Ok).0: &str);     // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _56 = _62;                       // scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _68 = &mut _54;                  // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:37
        _67 = <std::str::SplitN<char> as Iterator>::next(move _68) -> [return: bb40, unwind: bb75]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:31: 51:35
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::SplitN<char>) -> Option<<std::str::SplitN<char> as Iterator>::Item> {<std::str::SplitN<char> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        _69 = error::from_str(const "missing minor version") -> [return: bb41, unwind: bb75]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:44: 51:84
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:44: 51:59
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:60: 51:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _66 = Option::<&str>::ok_or::<error::Error>(move _67, move _69) -> [return: bb42, unwind: bb75]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:38: 51:43
                                         // + literal: Const { ty: fn(Option<&str>, error::Error) -> Result<&str, error::Error> {Option::<&str>::ok_or::<error::Error>}, val: Value(Scalar(<ZST>)) }
    }

    bb42: {
        _70 = discriminant(_66);         // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:85
        switchInt(move _70) -> [0_isize: bb45, 1_isize: bb43, otherwise: bb44]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb43: {
        _72 = move ((_66 as Err).0: error::Error); // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _73 = move _72;                  // scope 17 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 17 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _73; // scope 17 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 17 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb70;                    // scope 12 at no-location
    }

    bb44: {
        unreachable;                     // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:51:26: 51:85
    }

    bb45: {
        _71 = ((_66 as Ok).0: &str);     // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _65 = _71;                       // scope 16 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _77 = &mut _54;                  // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:37
        _76 = <std::str::SplitN<char> as Iterator>::next(move _77) -> [return: bb46, unwind: bb75]; // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:31: 52:35
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::SplitN<char>) -> Option<<std::str::SplitN<char> as Iterator>::Item> {<std::str::SplitN<char> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        _78 = error::from_str(const "missing patch version") -> [return: bb47, unwind: bb75]; // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:44: 52:84
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:44: 52:59
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:60: 52:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _75 = Option::<&str>::ok_or::<error::Error>(move _76, move _78) -> [return: bb48, unwind: bb75]; // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:38: 52:43
                                         // + literal: Const { ty: fn(Option<&str>, error::Error) -> Result<&str, error::Error> {Option::<&str>::ok_or::<error::Error>}, val: Value(Scalar(<ZST>)) }
    }

    bb48: {
        _79 = discriminant(_75);         // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:85
        switchInt(move _79) -> [0_isize: bb51, 1_isize: bb49, otherwise: bb50]; // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb49: {
        _81 = move ((_75 as Err).0: error::Error); // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _82 = move _81;                  // scope 20 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 20 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _82; // scope 20 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 20 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb70;                    // scope 15 at no-location
    }

    bb50: {
        unreachable;                     // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:52:26: 52:85
    }

    bb51: {
        _80 = ((_75 as Ok).0: &str);     // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _74 = _80;                       // scope 19 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _87 = _56;                       // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:31
        _86 = core::str::<impl str>::parse::<usize>(move _87) -> [return: bb52, unwind: bb75]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:24: 55:29
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Result<usize, <usize as FromStr>::Err> {core::str::<impl str>::parse::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb52: {
        _85 = Result::<usize, ParseIntError>::map_err::<error::Error, fn(ParseIntError) -> error::Error {from_num}>(move _86, from_num) -> [return: bb53, unwind: bb75]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:32: 55:39
                                         // + literal: Const { ty: fn(Result<usize, ParseIntError>, fn(ParseIntError) -> error::Error {from_num}) -> Result<usize, error::Error> {Result::<usize, ParseIntError>::map_err::<error::Error, fn(ParseIntError) -> error::Error {from_num}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:40: 55:55
                                         // + literal: Const { ty: fn(ParseIntError) -> error::Error {from_num}, val: Value(Scalar(<ZST>)) }
    }

    bb53: {
        _88 = discriminant(_85);         // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:56
        switchInt(move _88) -> [0_isize: bb56, 1_isize: bb54, otherwise: bb55]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb54: {
        _90 = move ((_85 as Err).0: error::Error); // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _91 = move _90;                  // scope 22 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 22 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _91; // scope 22 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 22 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        drop(_2) -> bb79;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb55: {
        unreachable;                     // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:55:18: 55:56
    }

    bb56: {
        _89 = ((_85 as Ok).0: usize);    // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _84 = _89;                       // scope 21 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _95 = _65;                       // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:31
        _94 = core::str::<impl str>::parse::<usize>(move _95) -> [return: bb57, unwind: bb74]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:24: 56:29
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Result<usize, <usize as FromStr>::Err> {core::str::<impl str>::parse::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb57: {
        _93 = Result::<usize, ParseIntError>::map_err::<error::Error, fn(ParseIntError) -> error::Error {from_num}>(move _94, from_num) -> [return: bb58, unwind: bb74]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:32: 56:39
                                         // + literal: Const { ty: fn(Result<usize, ParseIntError>, fn(ParseIntError) -> error::Error {from_num}) -> Result<usize, error::Error> {Result::<usize, ParseIntError>::map_err::<error::Error, fn(ParseIntError) -> error::Error {from_num}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:40: 56:55
                                         // + literal: Const { ty: fn(ParseIntError) -> error::Error {from_num}, val: Value(Scalar(<ZST>)) }
    }

    bb58: {
        _96 = discriminant(_93);         // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:56
        switchInt(move _96) -> [0_isize: bb61, 1_isize: bb59, otherwise: bb60]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb59: {
        _98 = move ((_93 as Err).0: error::Error); // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _99 = move _98;                  // scope 24 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 24 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _99; // scope 24 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 24 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        drop(_2) -> bb78;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb60: {
        unreachable;                     // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:56:18: 56:56
    }

    bb61: {
        _97 = ((_93 as Ok).0: usize);    // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _92 = _97;                       // scope 23 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _103 = _74;                      // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:31
        _102 = core::str::<impl str>::parse::<usize>(move _103) -> [return: bb62, unwind: bb73]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:24: 57:29
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Result<usize, <usize as FromStr>::Err> {core::str::<impl str>::parse::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb62: {
        _101 = Result::<usize, ParseIntError>::map_err::<error::Error, fn(ParseIntError) -> error::Error {from_num}>(move _102, from_num) -> [return: bb63, unwind: bb73]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:32: 57:39
                                         // + literal: Const { ty: fn(Result<usize, ParseIntError>, fn(ParseIntError) -> error::Error {from_num}) -> Result<usize, error::Error> {Result::<usize, ParseIntError>::map_err::<error::Error, fn(ParseIntError) -> error::Error {from_num}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:40: 57:55
                                         // + literal: Const { ty: fn(ParseIntError) -> error::Error {from_num}, val: Value(Scalar(<ZST>)) }
    }

    bb63: {
        _104 = discriminant(_101);       // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:56
        switchInt(move _104) -> [0_isize: bb66, 1_isize: bb64, otherwise: bb65]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb64: {
        _106 = move ((_101 as Err).0: error::Error); // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _107 = move _106;                // scope 26 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 26 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _107; // scope 26 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 26 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        drop(_2) -> bb69;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb65: {
        unreachable;                     // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:57:18: 57:56
    }

    bb66: {
        _105 = ((_101 as Ok).0: usize);  // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _100 = _105;                     // scope 25 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _83 = Version::new(move _84, move _92, move _100) -> [return: bb67, unwind: bb72]; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:54:12: 58:10
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:54:12: 54:24
                                         // + literal: Const { ty: fn(usize, usize, usize) -> Version {Version::new}, val: Value(Scalar(<ZST>)) }
    }

    bb67: {
        Deinit(_0);                      // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:54:9: 58:11
        ((_0 as Ok).0: version::Version) = move _83; // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:54:9: 58:11
        discriminant(_0) = 0;            // scope 18 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:54:9: 58:11
        drop(_2) -> bb68;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb68: {
        goto -> bb71;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:6: 59:6
    }

    bb69: {
        goto -> bb78;                    // scope 0 at no-location
    }

    bb70: {
        drop(_2) -> bb71;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb71: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:6: 59:6
    }

    bb72 (cleanup): {
        drop(_2) -> bb77;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb73 (cleanup): {
        drop(_2) -> bb77;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb74 (cleanup): {
        drop(_2) -> bb77;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb75 (cleanup): {
        drop(_2) -> bb77;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:59:5: 59:6
    }

    bb76 (cleanup): {
        drop(_8) -> bb77;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:30:38: 30:39
    }

    bb77 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:25:5: 59:6
    }

    bb78: {
        goto -> bb79;                    // scope 0 at no-location
    }

    bb79: {
        goto -> bb71;                    // scope 0 at no-location
    }
}

promoted[0] in version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:15:1: 60:2>::from_rustc: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:20: 28:46
    let mut _2: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:34: 28:45
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:34: 28:45

    bb0: {
        _3 = const "--verbose";          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:34: 28:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:34: 28:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:34: 28:45
        _1 = [const "--version", move _2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:20: 28:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:21: 28:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:28:19: 28:46
    }
}

fn emit(_1: &str) -> () {
    debug cfg => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:97:13: 97:16
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:97:24: 97:24
    let _2: ();                          // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:62
    let mut _3: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _4: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
    let mut _5: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
    let _6: &[&str; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
    let mut _7: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _8: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let _9: &[std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let _10: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _11: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
    let mut _12: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
    let _13: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
    let mut _14: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34

    bb0: {
        _14 = const emit::promoted[0];   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(emit, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
        _13 = &_1;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
        _12 = _13;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
        _11 = ArgumentV1::new_display::<&str>(move _12) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:36: 98:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _9 = &_10;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _8 = _9;                         // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _7 = move _8 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _3 = Arguments::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:62
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:27
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) {_print}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:99:2: 99:2
    }
}

promoted[0] in emit: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34

    bb0: {
        _1 = [const "cargo:rustc-cfg=", const "\n"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:98:14: 98:34
    }
}

fn rerun_path(_1: &str) -> () {
    debug path => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:107:19: 107:23
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:107:31: 107:31
    let _2: ();                          // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:62
    let mut _3: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _4: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
    let mut _5: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
    let _6: &[&str; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
    let mut _7: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _8: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let _9: &[std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let _10: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _11: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
    let mut _12: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
    let _13: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
    let mut _14: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41

    bb0: {
        _14 = const rerun_path::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(rerun_path, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
        _13 = &_1;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
        _12 = _13;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
        _11 = ArgumentV1::new_display::<&str>(move _12) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:43: 108:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _9 = &_10;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _8 = _9;                         // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _7 = move _8 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _3 = Arguments::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:62
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:27
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) {_print}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:109:2: 109:2
    }
}

promoted[0] in rerun_path: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41

    bb0: {
        _1 = [const "cargo:rerun-if-changed=", const "\n"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:108:14: 108:41
    }
}

fn rerun_env(_1: &str) -> () {
    debug var => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:118:18: 118:21
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:118:29: 118:29
    let _2: ();                          // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:62
    let mut _3: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _4: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
    let mut _5: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
    let _6: &[&str; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
    let mut _7: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _8: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let _9: &[std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let _10: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
    let mut _11: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
    let mut _12: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
    let _13: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
    let mut _14: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45

    bb0: {
        _14 = const rerun_env::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(rerun_env, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
        _13 = &_1;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
        _12 = _13;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
        _11 = ArgumentV1::new_display::<&str>(move _12) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:47: 119:50
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _9 = &_10;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _8 = _9;                         // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _7 = move _8 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
        _3 = Arguments::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:28: 106:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:62
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\std\src\macros.rs:106:9: 106:27
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) {_print}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:120:2: 120:2
    }
}

promoted[0] in rerun_env: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45

    bb0: {
        _1 = [const "cargo:rerun-if-env-changed=", const "\n"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:119:14: 119:45
    }
}

fn new() -> AutoCfg {
    let mut _0: AutoCfg;                 // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:127:17: 127:24
    let mut _1: std::result::Result<AutoCfg, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:128:5: 128:19

    bb0: {
        _1 = AutoCfg::new() -> bb1;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:128:5: 128:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:128:5: 128:17
                                         // + literal: Const { ty: fn() -> Result<AutoCfg, error::Error> {AutoCfg::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = Result::<AutoCfg, error::Error>::unwrap(move _1) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:128:5: 128:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:128:20: 128:26
                                         // + literal: Const { ty: fn(Result<AutoCfg, error::Error>) -> AutoCfg {Result::<AutoCfg, error::Error>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:129:2: 129:2
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::new() -> Result<AutoCfg, error::Error> {
    let mut _0: std::result::Result<AutoCfg, error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:140:21: 140:40
    let mut _1: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:15: 141:37
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:13: 142:20
    let _3: std::ffi::OsString;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:18: 142:19
    let mut _4: std::ffi::OsString;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:39: 142:40
    let mut _5: error::Error;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:25: 143:65
    scope 1 {
        debug d => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:18: 142:19
    }

    bb0: {
        _1 = var_os::<&str>(const "OUT_DIR") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:15: 141:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:15: 141:26
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:27: 141:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:15: 141:37
        switchInt(move _2) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:9: 141:37
    }

    bb2: {
        _5 = error::from_str(const "no OUT_DIR specified!") -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:25: 143:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:25: 143:40
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:41: 143:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:141:15: 141:37
    }

    bb4: {
        _3 = move ((_1 as Some).0: std::ffi::OsString); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:18: 142:19
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:39: 142:40
        _0 = AutoCfg::with_dir::<OsString>(move _4) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:24: 142:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:142:24: 142:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(OsString) -> Result<AutoCfg, error::Error> {AutoCfg::with_dir::<OsString>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:21: 143:66
        ((_0 as Err).0: error::Error) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:21: 143:66
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:21: 143:66
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:143:65: 143:66
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:145:6: 145:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::with_dir::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:57: 156:74]) -> OsString {
    let mut _0: std::ffi::OsString;      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:60
    let mut _2: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:74
    let _3: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:67

    bb0: {
        _3 = const "rustc";              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:74
        _0 = <&str as Into<OsString>>::into(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:60: 156:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:68: 156:72
                                         // + literal: Const { ty: fn(&str) -> OsString {<&str as Into<OsString>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:74: 156:74
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::with_dir(_1: T) -> Result<AutoCfg, error::Error> {
    debug dir => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:155:39: 155:42
    let mut _0: std::result::Result<AutoCfg, error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:155:50: 155:69
    let _2: std::ffi::OsString;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
    let mut _3: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:21: 156:41
    let mut _4: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:57: 156:74]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:57: 156:74
    let mut _6: std::ffi::OsString;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:30: 157:35
    let mut _8: std::result::Result<version::Version, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:34: 158:61
    let mut _9: &std::path::Path;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
    let _10: &std::path::Path;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
    let mut _11: &std::path::PathBuf;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
    let _12: &std::path::PathBuf;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
    let mut _13: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _16: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _19: T;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:19: 163:22
    let mut _21: std::result::Result<std::fs::Metadata, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:67
    let mut _22: std::result::Result<std::fs::Metadata, std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:43
    let mut _23: &std::path::PathBuf;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:38: 164:42
    let mut _24: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _27: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _28: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
    let mut _29: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:26
    let mut _30: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:13: 165:26
    let mut _31: &std::fs::Metadata;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:13: 165:26
    let mut _32: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:59
    let mut _33: &std::fs::Permissions;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:59
    let _34: std::fs::Permissions;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:48
    let mut _35: &std::fs::Metadata;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:48
    let mut _36: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:24: 166:82
    let mut _38: std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:24: 170:48
    let mut _39: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:34: 170:41
    let _40: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:34: 170:41
    let mut _41: &std::path::Path;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
    let _42: &std::path::Path;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
    let mut _43: &std::path::PathBuf;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
    let _44: &std::path::PathBuf;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
    let mut _45: std::path::PathBuf;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:171:22: 171:25
    let mut _46: std::path::PathBuf;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:172:20: 172:25
    let mut _47: version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:173:28: 173:41
    let mut _48: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:174:21: 174:27
    let mut _49: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:12: 179:42
    let mut _50: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:13: 179:42
    let mut _51: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:13: 179:25
    let mut _52: &AutoCfg;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:13: 179:25
    let mut _53: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:16: 181:46
    let mut _54: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:17: 181:46
    let mut _55: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:17: 181:29
    let mut _56: &AutoCfg;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:17: 181:29
    let _58: std::option::Option<()>;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:49
    let mut _59: std::result::Result<(), std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:44
    let mut _60: &mut std::io::Stderr;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:44
    let mut _61: std::io::Stderr;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:25
    let mut _62: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:36: 185:43
    let mut _63: &[u8; 43];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:36: 185:43
    let mut _64: AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:188:12: 188:14
    let mut _65: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    let mut _66: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    let mut _67: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    let mut _68: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    scope 1 {
        debug rustc => _2;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
        let _5: std::path::PathBuf;      // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:13: 157:18
        scope 2 {
            debug rustc => _5;           // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:13: 157:18
            let _7: version::Version;    // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:13: 158:26
            let _14: version::Version;   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
            let _15: error::Error;       // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
            scope 3 {
                debug rustc_version => _7; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:13: 158:26
                let _17: std::option::Option<std::ffi::OsString>; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:160:13: 160:19
                scope 6 {
                    debug target => _17; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:160:13: 160:19
                    let _18: std::path::PathBuf; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:13: 163:16
                    scope 7 {
                        debug dir => _18; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:13: 163:16
                        let _20: std::fs::Metadata; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:13: 164:17
                        let _25: std::fs::Metadata; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                        let _26: error::Error; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                        scope 8 {
                            debug meta => _20; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:13: 164:17
                            let mut _37: AutoCfg; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:13: 169:19
                            scope 11 {
                                debug ac => _37; // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:13: 169:19
                                let _57: &[u8; 43]; // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:184:21: 184:28
                                scope 12 {
                                    debug warning => _57; // in scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:184:21: 184:28
                                }
                            }
                        }
                        scope 9 {
                            debug value => _25; // in scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                        }
                        scope 10 {
                            debug error => _26; // in scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                        }
                    }
                }
            }
            scope 4 {
                debug value => _14;      // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
            }
            scope 5 {
                debug error => _15;      // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
            }
        }
    }

    bb0: {
        _68 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
        _67 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
        _65 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
        _66 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
        _65 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:13: 156:18
        _3 = var_os::<&str>(const "RUSTC") -> [return: bb1, unwind: bb52]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:21: 156:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:21: 156:32
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:33: 156:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = Option::<OsString>::unwrap_or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:57: 156:74]>(move _3, move _4) -> [return: bb2, unwind: bb52]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:21: 156:75
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:42: 156:56
                                         // + literal: Const { ty: fn(Option<OsString>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:57: 156:74]) -> OsString {Option::<OsString>::unwrap_or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:156:57: 156:74]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:30: 157:35
        _5 = <OsString as Into<PathBuf>>::into(move _6) -> [return: bb3, unwind: bb52]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:30: 157:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:36: 157:40
                                         // + literal: Const { ty: fn(OsString) -> PathBuf {<OsString as Into<PathBuf>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _68 = const true;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:157:41: 157:42
        _12 = &_5;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
        _11 = _12;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
        _10 = <PathBuf as Deref>::deref(move _11) -> [return: bb4, unwind: bb50]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
                                         // + literal: Const { ty: for<'r> fn(&'r PathBuf) -> &'r <PathBuf as Deref>::Target {<PathBuf as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _9 = _10;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:54: 158:60
        _8 = Version::from_rustc(move _9) -> [return: bb5, unwind: bb50]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:34: 158:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:34: 158:53
                                         // + literal: Const { ty: for<'r> fn(&'r Path) -> Result<Version, error::Error> {Version::from_rustc}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _13 = discriminant(_8);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:34: 158:61
        switchInt(move _13) -> [0_isize: bb8, 1_isize: bb6, otherwise: bb7]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb6: {
        _15 = move ((_8 as Err).0: error::Error); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _16 = move _15;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _16; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb39;                    // scope 2 at no-location
    }

    bb7: {
        unreachable;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:158:34: 158:61
    }

    bb8: {
        _14 = move ((_8 as Ok).0: version::Version); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _7 = move _14;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _17 = var_os::<&str>(const "TARGET") -> [return: bb9, unwind: bb50]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:160:22: 160:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:160:22: 160:33
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:160:34: 160:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _67 = const true;                // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:13: 163:16
        _65 = const false;               // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:19: 163:22
        _19 = move _1;                   // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:19: 163:22
        _18 = <T as Into<PathBuf>>::into(move _19) -> [return: bb10, unwind: bb48]; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:19: 163:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:23: 163:27
                                         // + literal: Const { ty: fn(T) -> PathBuf {<T as Into<PathBuf>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _66 = const true;                // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:163:28: 163:29
        _23 = &_18;                      // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:38: 164:42
        _22 = std::fs::metadata::<&PathBuf>(move _23) -> [return: bb11, unwind: bb46]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:37
                                         // + literal: Const { ty: fn(&PathBuf) -> Result<Metadata, std::io::Error> {std::fs::metadata::<&PathBuf>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _21 = Result::<Metadata, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>(move _22, from_io) -> [return: bb12, unwind: bb46]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:44: 164:51
                                         // + literal: Const { ty: fn(Result<Metadata, std::io::Error>, fn(std::io::Error) -> error::Error {from_io}) -> Result<Metadata, error::Error> {Result::<Metadata, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:52: 164:66
                                         // + literal: Const { ty: fn(std::io::Error) -> error::Error {from_io}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _24 = discriminant(_21);         // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:67
        switchInt(move _24) -> [0_isize: bb15, 1_isize: bb13, otherwise: bb14]; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb13: {
        _26 = move ((_21 as Err).0: error::Error); // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _27 = move _26;                  // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _27; // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb36;                    // scope 7 at no-location
    }

    bb14: {
        unreachable;                     // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:164:25: 164:67
    }

    bb15: {
        _25 = move ((_21 as Ok).0: std::fs::Metadata); // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _20 = move _25;                  // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _31 = &_20;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:13: 165:26
        _30 = Metadata::is_dir(move _31) -> [return: bb19, unwind: bb46]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:13: 165:26
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:18: 165:24
                                         // + literal: Const { ty: for<'r> fn(&'r Metadata) -> bool {Metadata::is_dir}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _28 = const true;                // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
        goto -> bb18;                    // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
    }

    bb17: {
        _35 = &_20;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:48
        _34 = Metadata::permissions(move _35) -> [return: bb20, unwind: bb46]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:35: 165:46
                                         // + literal: Const { ty: for<'r> fn(&'r Metadata) -> Permissions {Metadata::permissions}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        switchInt(move _28) -> [false: bb24, otherwise: bb22]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
    }

    bb19: {
        _29 = Not(move _30);             // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:26
        switchInt(move _29) -> [false: bb17, otherwise: bb16]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
    }

    bb20: {
        _33 = &_34;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:59
        _32 = Permissions::readonly(move _33) -> [return: bb21, unwind: bb46]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:30: 165:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:49: 165:57
                                         // + literal: Const { ty: for<'r> fn(&'r Permissions) -> bool {Permissions::readonly}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _28 = move _32;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
        goto -> bb18;                    // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:165:12: 165:59
    }

    bb22: {
        _36 = error::from_str(const "output path is not a writable directory") -> [return: bb23, unwind: bb46]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:24: 166:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:24: 166:39
                                         // + literal: Const { ty: fn(&'static str) -> error::Error {error::from_str}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:40: 166:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        Deinit(_0);                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:20: 166:83
        ((_0 as Err).0: error::Error) = move _36; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:20: 166:83
        discriminant(_0) = 1;            // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:166:20: 166:83
        goto -> bb36;                    // scope 8 at no-location
    }

    bb24: {
        _40 = &_17;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:34: 170:41
        _39 = _40;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:34: 170:41
        _44 = &_18;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
        _43 = _44;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
        _42 = <PathBuf as Deref>::deref(move _43) -> [return: bb25, unwind: bb46]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
                                         // + literal: Const { ty: for<'r> fn(&'r PathBuf) -> &'r <PathBuf as Deref>::Target {<PathBuf as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _41 = _42;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:43: 170:47
        _38 = rustflags(move _39, move _41) -> [return: bb26, unwind: bb46]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:24: 170:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:170:24: 170:33
                                         // + literal: Const { ty: for<'r, 's> fn(&'r Option<OsString>, &'s Path) -> Vec<String> {rustflags}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        _66 = const false;               // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:171:22: 171:25
        _45 = move _18;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:171:22: 171:25
        _68 = const false;               // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:172:20: 172:25
        _46 = move _5;                   // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:172:20: 172:25
        _47 = move _7;                   // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:173:28: 173:41
        _67 = const false;               // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:174:21: 174:27
        _48 = move _17;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:174:21: 174:27
        Deinit(_37);                     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        (_37.0: std::path::PathBuf) = move _45; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        (_37.1: std::path::PathBuf) = move _46; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        (_37.2: version::Version) = move _47; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        (_37.3: std::option::Option<std::ffi::OsString>) = move _48; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        (_37.4: bool) = const false;     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        (_37.5: std::vec::Vec<std::string::String>) = move _38; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:169:22: 176:10
        _52 = &_37;                      // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:13: 179:25
        _51 = AutoCfg::probe::<&str>(move _52, const "") -> [return: bb27, unwind: bb42]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:13: 179:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:16: 179:21
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, &str) -> Result<bool, error::Error> {AutoCfg::probe::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:22: 179:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _50 = Result::<bool, error::Error>::unwrap_or(move _51, const false) -> [return: bb28, unwind: bb42]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:13: 179:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:26: 179:35
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _49 = Not(move _50);             // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:12: 179:42
        switchInt(move _49) -> [false: bb35, otherwise: bb29]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:179:12: 179:42
    }

    bb29: {
        (_37.4: bool) = const true;      // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:180:13: 180:29
        _56 = &_37;                      // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:17: 181:29
        _55 = AutoCfg::probe::<&str>(move _56, const "") -> [return: bb30, unwind: bb42]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:17: 181:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:20: 181:25
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, &str) -> Result<bool, error::Error> {AutoCfg::probe::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:26: 181:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _54 = Result::<bool, error::Error>::unwrap_or(move _55, const false) -> [return: bb31, unwind: bb42]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:17: 181:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:30: 181:39
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    bb31: {
        _53 = Not(move _54);             // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:16: 181:46
        switchInt(move _53) -> [false: bb35, otherwise: bb32]; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:181:16: 181:46
    }

    bb32: {
        (_37.4: bool) = const false;     // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:183:17: 183:34
        _57 = const b"warning: autocfg could not probe for `std`\n"; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:184:31: 184:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:184:31: 184:78
                                         // + literal: Const { ty: &[u8; 43], val: Value(Scalar(alloc1)) }
        _61 = stderr() -> [return: bb33, unwind: bb42]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:23
                                         // + literal: Const { ty: fn() -> Stderr {stderr}, val: Value(Scalar(<ZST>)) }
    }

    bb33: {
        _60 = &mut _61;                  // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:44
        _63 = _57;                       // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:36: 185:43
        _62 = move _63 as &[u8] (Pointer(Unsize)); // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:36: 185:43
        _59 = <Stderr as std::io::Write>::write_all(move _60, move _62) -> [return: bb34, unwind: bb42]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:26: 185:35
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Stderr, &'s [u8]) -> Result<(), std::io::Error> {<Stderr as std::io::Write>::write_all}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _58 = Result::<(), std::io::Error>::ok(move _59) -> [return: bb53, unwind: bb42]; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:45: 185:47
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) -> Option<()> {Result::<(), std::io::Error>::ok}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _64 = move _37;                  // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:188:12: 188:14
        Deinit(_0);                      // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:188:9: 188:15
        ((_0 as Ok).0: AutoCfg) = move _64; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:188:9: 188:15
        discriminant(_0) = 0;            // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:188:9: 188:15
        _66 = const false;               // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
        _67 = const false;               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
        _68 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
        goto -> bb41;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb36: {
        drop(_18) -> [return: bb37, unwind: bb48]; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb37: {
        _66 = const false;               // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
        drop(_17) -> [return: bb38, unwind: bb50]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb38: {
        _67 = const false;               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
        goto -> bb39;                    // scope 3 at no-location
    }

    bb39: {
        drop(_5) -> [return: bb40, unwind: bb52]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb40: {
        _68 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
        switchInt(_65) -> [false: bb41, otherwise: bb44]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb41: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:6: 189:6
    }

    bb42 (cleanup): {
        drop(_37) -> bb46;               // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb43 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:155:5: 189:6
    }

    bb44: {
        drop(_1) -> bb41;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb45 (cleanup): {
        drop(_18) -> bb48;               // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb46 (cleanup): {
        switchInt(_66) -> [false: bb48, otherwise: bb45]; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb47 (cleanup): {
        drop(_17) -> bb50;               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb48 (cleanup): {
        switchInt(_67) -> [false: bb50, otherwise: bb47]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb49 (cleanup): {
        drop(_5) -> bb52;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb50 (cleanup): {
        switchInt(_68) -> [false: bb52, otherwise: bb49]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb51 (cleanup): {
        drop(_1) -> bb43;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb52 (cleanup): {
        switchInt(_65) -> [false: bb43, otherwise: bb51]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:189:5: 189:6
    }

    bb53: {
        goto -> bb35;                    // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:185:17: 185:49
    }
}

alloc1 (size: 43, align: 1) {
    0x00 │ 77 61 72 6e 69 6e 67 3a 20 61 75 74 6f 63 66 67 │ warning: autocfg
    0x10 │ 20 63 6f 75 6c 64 20 6e 6f 74 20 70 72 6f 62 65 │  could not probe
    0x20 │ 20 66 6f 72 20 60 73 74 64 60 0a                │  for `std`.
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_rustc_version(_1: &AutoCfg, _2: usize, _3: usize) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:193:32: 193:37
    debug major => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:193:39: 193:44
    debug minor => _3;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:193:53: 193:58
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:193:70: 193:74
    let mut _4: &version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:9: 194:27
    let mut _5: &version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:31: 194:60
    let _6: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:31: 194:60
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:44: 194:49
    let mut _8: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:51: 194:56

    bb0: {
        _4 = &((*_1).2: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:9: 194:27
        _7 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:44: 194:49
        _8 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:51: 194:56
        _6 = Version::new(move _7, move _8, const 0_usize) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:31: 194:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:31: 194:43
                                         // + literal: Const { ty: fn(usize, usize, usize) -> Version {Version::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:31: 194:60
        _0 = <Version as PartialOrd>::ge(move _4, move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:9: 194:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:194:9: 194:60
                                         // + literal: Const { ty: for<'r, 's> fn(&'r Version, &'s Version) -> bool {<Version as PartialOrd>::ge}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:195:6: 195:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_rustc_version(_1: &AutoCfg, _2: usize, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:199:31: 199:36
    debug major => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:199:38: 199:43
    debug minor => _3;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:199:52: 199:57
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:199:66: 199:66
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:12: 200:50
    let mut _5: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:12: 200:50
    let mut _6: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:37: 200:42
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:44: 200:49
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:13: 201:56
    let mut _9: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
    let _10: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
    let mut _11: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
    let _12: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
    let _13: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _14: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    let mut _15: std::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _16: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
    let mut _17: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
    let _18: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
    let mut _19: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _20: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _21: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _22: [std::fmt::ArgumentV1; 2];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _23: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
    let mut _24: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
    let _25: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
    let mut _26: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
    let mut _27: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
    let _28: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
    let mut _29: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
    scope 1 {
        debug res => _14;                // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:12: 200:50
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:37: 200:42
        _7 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:44: 200:49
        _4 = AutoCfg::probe_rustc_version(move _5, move _6, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:12: 200:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:17: 200:36
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, usize, usize) -> bool {AutoCfg::probe_rustc_version}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        switchInt(move _4) -> [false: bb9, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:200:12: 200:50
    }

    bb2: {
        _29 = const AutoCfg::emit_rustc_version::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::emit_rustc_version, [], Some(promoted[0])) }
        _18 = _29;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
        _17 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
        _25 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
        _24 = _25;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
        _23 = ArgumentV1::new_display::<usize>(move _24) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:42: 201:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> ArgumentV1<'b> {ArgumentV1::new_display::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _28 = &_3;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
        _27 = _28;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
        _26 = ArgumentV1::new_display::<usize>(move _27) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:49: 201:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> ArgumentV1<'b> {ArgumentV1::new_display::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _22 = [move _23, move _26];      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _21 = &_22;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _20 = _21;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _19 = move _20 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _15 = Arguments::new_v1(move _16, move _19) -> bb5; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _14 = format(move _15) -> bb6;   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _13 = move _14;                  // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _12 = &_13;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
        _11 = _12;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
        _10 = <String as Deref>::deref(move _11) -> [return: bb7, unwind: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:18: 201:55
        _8 = emit(move _9) -> [return: bb8, unwind: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:13: 201:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:13: 201:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        drop(_13) -> bb9;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:56: 201:57
    }

    bb9: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:203:6: 203:6
    }

    bb10 (cleanup): {
        drop(_13) -> bb11;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:56: 201:57
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:199:5: 203:6
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_rustc_version: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40

    bb0: {
        _1 = [const "rustc_", const "_"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:201:27: 201:40
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe(_1: &AutoCfg, _2: T) -> Result<bool, error::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:205:30: 205:35
    debug code => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:205:37: 205:41
    let mut _0: std::result::Result<bool, error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:205:49: 205:68
    let _3: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:13: 209:15
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:18: 209:52
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:18: 209:20
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:34: 209:51
    let mut _8: &std::path::PathBuf;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:210:40: 210:51
    let _9: &mut std::process::Command;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 217:35
    let mut _10: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 217:35
    let mut _11: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 216:32
    let mut _12: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 216:32
    let mut _13: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 215:30
    let mut _14: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 215:30
    let mut _15: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 214:37
    let mut _16: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 214:37
    let mut _17: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 213:41
    let mut _18: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 213:41
    let mut _19: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 212:33
    let mut _20: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 212:33
    let mut _21: std::string::String;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let mut _23: std::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _24: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
    let mut _25: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
    let _26: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
    let mut _27: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _28: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _29: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _30: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _31: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
    let mut _32: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
    let _33: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
    let mut _34: &std::path::PathBuf;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:216:18: 216:31
    let mut _35: std::option::Option<&std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:31: 219:51
    let mut _36: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:31: 219:51
    let mut _37: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:16: 219:28
    let _39: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:48
    let mut _40: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:48
    let mut _41: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:36
    let mut _42: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:36
    let mut _43: &std::ffi::OsString;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:41: 220:47
    let _44: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:9: 223:38
    let mut _45: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:9: 223:38
    let mut _46: &std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:22: 223:37
    let _47: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:47
    let mut _48: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:47
    let mut _49: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:25
    let mut _50: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:25
    let mut _51: std::process::Stdio;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:32: 225:46
    let mut _53: std::result::Result<std::process::Child, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:69
    let mut _54: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:45
    let mut _55: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:45
    let mut _56: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _59: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _61: std::option::Option<std::process::ChildStdin>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:25: 227:43
    let mut _62: &mut std::option::Option<std::process::ChildStdin>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:25: 227:43
    let mut _63: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:51: 227:64
    let _64: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:51: 227:64
    let mut _65: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:229:12: 229:23
    let mut _66: std::result::Result<(), error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:74
    let mut _67: std::result::Result<(), std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:50
    let mut _68: &mut std::process::ChildStdin; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:50
    let mut _69: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
    let mut _70: &[u8; 11];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
    let _71: &[u8; 11];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
    let mut _72: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _75: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _76: std::result::Result<(), error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:68
    let mut _77: std::result::Result<(), std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:44
    let mut _78: &mut std::process::ChildStdin; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:44
    let mut _79: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:30: 232:43
    let _80: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:30: 232:43
    let mut _81: &T;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:30: 232:43
    let mut _82: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _85: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let _86: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:233:9: 233:20
    let mut _87: std::process::ChildStdin; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:233:14: 233:19
    let mut _89: std::result::Result<std::process::ExitStatus, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:63
    let mut _90: std::result::Result<std::process::ExitStatus, std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:39
    let mut _91: &mut std::process::Child; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:39
    let mut _92: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:13: 56:22
    let mut _95: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
    let mut _96: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:12: 236:28
    let mut _97: &std::process::ExitStatus; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:12: 236:28
    let mut _99: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    scope 1 {
        debug id => _3;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:13: 209:15
        let mut _7: std::process::Command; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:210:13: 210:24
        scope 2 {
            debug command => _7;         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:210:13: 210:24
            let _22: std::string::String; // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
            let _38: &std::ffi::OsString; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:21: 219:27
            let mut _52: std::process::Child; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:13: 226:22
            let _57: std::process::Child; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
            let _58: error::Error;       // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
            let mut _98: &[&str; 1];     // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
            scope 3 {
                debug res => _22;        // in scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
            }
            scope 4 {
                debug target => _38;     // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:21: 219:27
            }
            scope 5 {
                debug child => _52;      // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:13: 226:22
                let mut _60: std::process::ChildStdin; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:13: 227:22
                scope 8 {
                    debug stdin => _60;  // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:13: 227:22
                    let _73: ();         // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                    let _74: error::Error; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                    let _83: ();         // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                    let _84: error::Error; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                    let _88: std::process::ExitStatus; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:13: 235:19
                    let _93: std::process::ExitStatus; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                    let _94: error::Error; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                    scope 9 {
                        debug value => _73; // in scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                    }
                    scope 10 {
                        debug error => _74; // in scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                    }
                    scope 11 {
                        debug value => _83; // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                    }
                    scope 12 {
                        debug error => _84; // in scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                    }
                    scope 13 {
                        debug status => _88; // in scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:13: 235:19
                    }
                    scope 14 {
                        debug value => _93; // in scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
                    }
                    scope 15 {
                        debug error => _94; // in scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
                    }
                }
            }
            scope 6 {
                debug value => _57;      // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
            }
            scope 7 {
                debug error => _58;      // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
            }
        }
    }

    bb0: {
        _99 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:13: 209:15
        _5 = const {alloc2: &AtomicUsize}; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:18: 209:20
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:18: 209:20
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc2)) }
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:18: 209:52
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:34: 209:51
        discriminant(_6) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:34: 209:51
        _3 = AtomicUsize::fetch_add(move _4, const 1_usize, move _6) -> [return: bb1, unwind: bb55]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:18: 209:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:209:21: 209:30
                                         // + literal: Const { ty: for<'r> fn(&'r AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = &((*_1).1: std::path::PathBuf); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:210:40: 210:51
        _7 = Command::new::<&PathBuf>(move _8) -> [return: bb2, unwind: bb55]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:210:27: 210:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:210:27: 210:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&PathBuf) -> Command {Command::new::<&PathBuf>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _20 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 212:33
        _19 = Command::arg::<&str>(move _20, const "--crate-name") -> [return: bb3, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 212:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:212:14: 212:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:212:18: 212:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _18 = &mut (*_19);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 213:41
        _98 = const AutoCfg::probe::<T>::promoted[0]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(AutoCfg::probe, [T], Some(promoted[0])) }
        _26 = _98;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
        _25 = _26;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
        _24 = move _25 as &[&str] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
        _33 = &_3;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
        _32 = _33;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
        _31 = ArgumentV1::new_display::<usize>(move _32) -> [return: bb4, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:37: 213:39
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> ArgumentV1<'b> {ArgumentV1::new_display::<usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _30 = [move _31];                // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _29 = &_30;                      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _28 = _29;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _27 = move _28 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _23 = Arguments::new_v1(move _24, move _27) -> [return: bb5, unwind: bb54]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _22 = format(move _23) -> [return: bb6, unwind: bb54]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _21 = move _22;                  // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _17 = Command::arg::<String>(move _18, move _21) -> [return: bb7, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 213:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:14: 213:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, String) -> &'r mut Command {Command::arg::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _16 = &mut (*_17);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 214:37
        _15 = Command::arg::<&str>(move _16, const "--crate-type=lib") -> [return: bb8, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 214:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:214:14: 214:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:214:18: 214:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _14 = &mut (*_15);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 215:30
        _13 = Command::arg::<&str>(move _14, const "--out-dir") -> [return: bb9, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 215:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:215:14: 215:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:215:18: 215:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _12 = &mut (*_13);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 216:32
        _34 = &((*_1).0: std::path::PathBuf); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:216:18: 216:31
        _11 = Command::arg::<&PathBuf>(move _12, move _34) -> [return: bb10, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 216:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:216:14: 216:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &PathBuf) -> &'r mut Command {Command::arg::<&PathBuf>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _10 = &mut (*_11);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 217:35
        _9 = Command::arg::<&str>(move _10, const "--emit=llvm-ir") -> [return: bb11, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:211:9: 217:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:217:14: 217:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:217:18: 217:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _36 = &((*_1).3: std::option::Option<std::ffi::OsString>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:31: 219:51
        _35 = Option::<OsString>::as_ref(move _36) -> [return: bb12, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:31: 219:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:43: 219:49
                                         // + literal: Const { ty: for<'r> fn(&'r Option<OsString>) -> Option<&'r OsString> {Option::<OsString>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _37 = discriminant(_35);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:16: 219:28
        switchInt(move _37) -> [1_isize: bb13, otherwise: bb15]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:16: 219:28
    }

    bb13: {
        _38 = ((_35 as Some).0: &std::ffi::OsString); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:219:21: 219:27
        _42 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:36
        _41 = Command::arg::<&str>(move _42, const "--target") -> [return: bb14, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:21: 220:24
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:25: 220:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _40 = &mut (*_41);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:48
        _43 = _38;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:41: 220:47
        _39 = Command::arg::<&OsString>(move _40, move _43) -> [return: bb61, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:37: 220:40
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &OsString) -> &'r mut Command {Command::arg::<&OsString>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _45 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:9: 223:38
        _46 = &((*_1).5: std::vec::Vec<std::string::String>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:22: 223:37
        _44 = Command::args::<&Vec<String>, &String>(move _45, move _46) -> [return: bb16, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:9: 223:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:223:17: 223:21
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &Vec<String>) -> &'r mut Command {Command::args::<&Vec<String>, &String>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _50 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:25
        _49 = Command::arg::<&str>(move _50, const "-") -> [return: bb17, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:17: 225:20
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:21: 225:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _48 = &mut (*_49);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:47
        _51 = Stdio::piped() -> [return: bb18, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:32: 225:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:32: 225:44
                                         // + literal: Const { ty: fn() -> Stdio {Stdio::piped}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _47 = Command::stdin::<Stdio>(move _48, move _51) -> [return: bb19, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:9: 225:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:225:26: 225:31
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, Stdio) -> &'r mut Command {Command::stdin::<Stdio>}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _55 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:45
        _54 = Command::spawn(move _55) -> [return: bb20, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:38: 226:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _53 = Result::<Child, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>(move _54, from_io) -> [return: bb21, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:46: 226:53
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>, fn(std::io::Error) -> error::Error {from_io}) -> Result<Child, error::Error> {Result::<Child, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:54: 226:68
                                         // + literal: Const { ty: fn(std::io::Error) -> error::Error {from_io}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        _56 = discriminant(_53);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:69
        switchInt(move _56) -> [0_isize: bb24, 1_isize: bb22, otherwise: bb23]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb22: {
        _58 = move ((_53 as Err).0: error::Error); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _59 = move _58;                  // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _59; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb50;                    // scope 2 at no-location
    }

    bb23: {
        unreachable;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:226:30: 226:69
    }

    bb24: {
        _57 = move ((_53 as Ok).0: std::process::Child); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _52 = move _57;                  // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _62 = &mut (_52.1: std::option::Option<std::process::ChildStdin>); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:25: 227:43
        _61 = Option::<ChildStdin>::take(move _62) -> [return: bb25, unwind: bb53]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:25: 227:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:37: 227:41
                                         // + literal: Const { ty: for<'r> fn(&'r mut Option<ChildStdin>) -> Option<ChildStdin> {Option::<ChildStdin>::take}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        _64 = const "rustc stdin";       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:51: 227:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:51: 227:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _63 = _64;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:51: 227:64
        _60 = Option::<ChildStdin>::expect(move _61, move _63) -> [return: bb26, unwind: bb53]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:25: 227:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:44: 227:50
                                         // + literal: Const { ty: for<'r> fn(Option<ChildStdin>, &'r str) -> ChildStdin {Option::<ChildStdin>::expect}, val: Value(Scalar(<ZST>)) }
    }

    bb26: {
        _99 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:227:64: 227:65
        _65 = ((*_1).4: bool);           // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:229:12: 229:23
        switchInt(move _65) -> [false: bb33, otherwise: bb27]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:229:12: 229:23
    }

    bb27: {
        _68 = &mut _60;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:50
        _71 = const b"#![no_std]\n";     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
                                         // + literal: Const { ty: &[u8; 11], val: Value(Scalar(alloc3)) }
        _70 = _71;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
        _69 = move _70 as &[u8] (Pointer(Unsize)); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:34: 230:49
        _67 = <ChildStdin as std::io::Write>::write_all(move _68, move _69) -> [return: bb28, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:24: 230:33
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut ChildStdin, &'s [u8]) -> Result<(), std::io::Error> {<ChildStdin as std::io::Write>::write_all}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _66 = Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>(move _67, from_io) -> [return: bb29, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:51: 230:58
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>, fn(std::io::Error) -> error::Error {from_io}) -> Result<(), error::Error> {Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:59: 230:73
                                         // + literal: Const { ty: fn(std::io::Error) -> error::Error {from_io}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        _72 = discriminant(_66);         // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:74
        switchInt(move _72) -> [0_isize: bb32, 1_isize: bb30, otherwise: bb31]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb30: {
        _74 = move ((_66 as Err).0: error::Error); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _75 = move _74;                  // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _75; // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb58;                    // scope 8 at no-location
    }

    bb31: {
        unreachable;                     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:230:18: 230:74
    }

    bb32: {
        goto -> bb33;                    // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:229:9: 231:10
    }

    bb33: {
        _78 = &mut _60;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:44
        _81 = &_2;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:30: 232:43
        _80 = <T as AsRef<[u8]>>::as_ref(move _81) -> [return: bb34, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:30: 232:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:35: 232:41
                                         // + literal: Const { ty: for<'r> fn(&'r T) -> &'r [u8] {<T as AsRef<[u8]>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb34: {
        _79 = _80;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:30: 232:43
        _77 = <ChildStdin as std::io::Write>::write_all(move _78, move _79) -> [return: bb35, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:20: 232:29
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut ChildStdin, &'s [u8]) -> Result<(), std::io::Error> {<ChildStdin as std::io::Write>::write_all}, val: Value(Scalar(<ZST>)) }
    }

    bb35: {
        _76 = Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>(move _77, from_io) -> [return: bb36, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:45: 232:52
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>, fn(std::io::Error) -> error::Error {from_io}) -> Result<(), error::Error> {Result::<(), std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:53: 232:67
                                         // + literal: Const { ty: fn(std::io::Error) -> error::Error {from_io}, val: Value(Scalar(<ZST>)) }
    }

    bb36: {
        _82 = discriminant(_76);         // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:68
        switchInt(move _82) -> [0_isize: bb39, 1_isize: bb37, otherwise: bb38]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb37: {
        _84 = move ((_76 as Err).0: error::Error); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _85 = move _84;                  // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _85; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb58;                    // scope 8 at no-location
    }

    bb38: {
        unreachable;                     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:232:14: 232:68
    }

    bb39: {
        _99 = const false;               // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:233:14: 233:19
        _87 = move _60;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:233:14: 233:19
        _86 = std::mem::drop::<ChildStdin>(move _87) -> [return: bb40, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:233:9: 233:20
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:233:9: 233:13
                                         // + literal: Const { ty: fn(ChildStdin) {std::mem::drop::<ChildStdin>}, val: Value(Scalar(<ZST>)) }
    }

    bb40: {
        _91 = &mut _52;                  // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:39
        _90 = Child::wait(move _91) -> [return: bb41, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:33: 235:37
                                         // + literal: Const { ty: for<'r> fn(&'r mut Child) -> Result<ExitStatus, std::io::Error> {Child::wait}, val: Value(Scalar(<ZST>)) }
    }

    bb41: {
        _89 = Result::<ExitStatus, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>(move _90, from_io) -> [return: bb42, unwind: bb60]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:40: 235:47
                                         // + literal: Const { ty: fn(Result<ExitStatus, std::io::Error>, fn(std::io::Error) -> error::Error {from_io}) -> Result<ExitStatus, error::Error> {Result::<ExitStatus, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {from_io}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:48: 235:62
                                         // + literal: Const { ty: fn(std::io::Error) -> error::Error {from_io}, val: Value(Scalar(<ZST>)) }
    }

    bb42: {
        _92 = discriminant(_89);         // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:63
        switchInt(move _92) -> [0_isize: bb45, 1_isize: bb43, otherwise: bb44]; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:55:9: 55:9
    }

    bb43: {
        _94 = move ((_89 as Err).0: error::Error); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:17: 57:22
        _95 = move _94;                  // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:38: 57:43
        Deinit(_0);                      // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        ((_0 as Err).0: error::Error) = move _95; // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        discriminant(_0) = 1;            // scope 15 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:57:34: 57:44
        goto -> bb58;                    // scope 8 at no-location
    }

    bb44: {
        unreachable;                     // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:235:27: 235:63
    }

    bb45: {
        _93 = ((_89 as Ok).0: std::process::ExitStatus); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:16: 56:21
        _88 = _93;                       // scope 14 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:56:26: 56:31
        _97 = &_88;                      // scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:12: 236:28
        _96 = ExitStatus::success(move _97) -> [return: bb46, unwind: bb60]; // scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:12: 236:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:19: 236:26
                                         // + literal: Const { ty: for<'r> fn(&'r ExitStatus) -> bool {ExitStatus::success}, val: Value(Scalar(<ZST>)) }
    }

    bb46: {
        Deinit(_0);                      // scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:9: 236:29
        ((_0 as Ok).0: bool) = move _96; // scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:9: 236:29
        discriminant(_0) = 0;            // scope 13 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:236:9: 236:29
        _99 = const false;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
        drop(_52) -> [return: bb47, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb47: {
        drop(_7) -> [return: bb48, unwind: bb55]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb48: {
        drop(_2) -> bb52;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb49: {
        _99 = const false;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
        drop(_52) -> [return: bb50, unwind: bb54]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb50: {
        drop(_7) -> [return: bb51, unwind: bb55]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb51: {
        drop(_2) -> bb52;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb52: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:6: 237:6
    }

    bb53 (cleanup): {
        drop(_52) -> bb54;               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb54 (cleanup): {
        drop(_7) -> bb55;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb55 (cleanup): {
        drop(_2) -> bb56;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb56 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:205:5: 237:6
    }

    bb57: {
        drop(_60) -> [return: bb49, unwind: bb53]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb58: {
        switchInt(_99) -> [false: bb49, otherwise: bb57]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb59 (cleanup): {
        drop(_60) -> bb53;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb60 (cleanup): {
        switchInt(_99) -> [false: bb53, otherwise: bb59]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:237:5: 237:6
    }

    bb61: {
        goto -> bb15;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:220:13: 220:48
    }
}

alloc3 (size: 11, align: 1) {
    23 21 5b 6e 6f 5f 73 74 64 5d 0a                │ #![no_std].
}

alloc2 (static: ID, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35

    bb0: {
        _1 = [const "probe"];            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:213:26: 213:35
    }
}

static ID: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:207:20: 207:31

    bb0: {
        _0 = const ATOMIC_USIZE_INIT;    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:207:34: 207:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:207:34: 207:51
                                         // + literal: Const { ty: AtomicUsize, val: Unevaluated(ATOMIC_USIZE_INIT, [], None) }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:207:9: 207:52
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_sysroot_crate(_1: &AutoCfg, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:246:32: 246:37
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:246:39: 246:43
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:246:54: 246:58
    let mut _3: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:9: 247:63
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:9: 247:63
    let mut _5: std::string::String;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _6: std::string::String;         // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _8: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
    let mut _9: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
    let _10: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
    let mut _16: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
    let _17: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
    let mut _18: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
    scope 1 {
        debug res => _6;                 // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:9: 247:63
        _18 = const AutoCfg::probe_sysroot_crate::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::probe_sysroot_crate, [], Some(promoted[0])) }
        _10 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
        _17 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
        _15 = ArgumentV1::new_display::<&str>(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:57: 247:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _14 = [move _15];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = &_14;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = _13;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _7 = Arguments::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

// WARNING: This output format is intended for human consumers only
    bb2: {
// and is subject to change without notice. Knock yourself out.
        _6 = format(move _7) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _5 = move _6;                    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _3 = AutoCfg::probe::<String>(move _4, move _5) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:9: 247:63
                                         // mir::Constant
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::read::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:23: 23:45], _2: (Option<String>, Option<String>)) -> Option<String> {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:14: 247:19
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, String) -> Result<bool, error::Error> {AutoCfg::probe::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:25: 23:32
        _0 = Result::<bool, error::Error>::unwrap_or(move _3, const false) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:9: 248:30
    scope 1 {
                                         // mir::Constant
        debug version => _0;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:25: 23:32
    }

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:248:14: 248:23
    bb0: {
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
        _0 = move (_2.0: std::option::Option<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:25: 23:32
    }

        drop((_2.1: std::option::Option<std::string::String>)) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:44: 23:45
    bb5: {
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:249:6: 249:6
    }
}

        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:45: 23:45
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_sysroot_crate: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::read::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57], _2: String) -> Option<version::Version> {
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55

    bb0: {
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:24: 24:31
    let mut _0: std::option::Option<version::Version>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:33: 24:33
        _1 = [const "extern crate ", const " as probe;"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
    let mut _5: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
    let _6: &std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56

    bb0: {
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:247:28: 247:55
    }
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
}

        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_sysroot_crate(_1: &AutoCfg, _2: &str) -> () {
                                         // mir::Constant
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:252:31: 252:36
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:252:38: 252:42
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:252:50: 252:50
    }

    bb1: {
    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:12: 253:42
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:48: 24:56
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:12: 253:42
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:37: 253:41
    let _6: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:13: 254:51
        _0 = version::Version::parse(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:33: 24:57
                                         // mir::Constant
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
    let mut _9: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:33: 24:47
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }
    let _10: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50

    let _11: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _12: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    bb2: {
    let mut _13: std::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        drop(_2) -> bb3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:56: 24:57
    let mut _14: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    }
    let mut _15: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:57: 24:57
    }

    bb4 (cleanup): {
    let _16: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    let mut _17: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _18: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:56: 24:57
    }

    bb5 (cleanup): {
    let _19: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _20: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _21: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57
    }
}

    let mut _22: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
    let _23: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
    let _24: std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::read() -> Option<version::Version> {
    let mut _0: std::option::Option<version::Version>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:21:22: 21:37
    let mut _25: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:44: 254:48
    let mut _1: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:22:9: 23:46
    let mut _26: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    scope 1 {
    let mut _2: std::option::Option<(std::option::Option<std::string::String>, std::option::Option<std::string::String>)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:22:9: 22:33
        debug res => _12;                // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
    let mut _3: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:23: 23:45]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:23: 23:45
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:12: 253:42
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:37: 253:41
        _3 = AutoCfg::probe_sysroot_crate(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:12: 253:42
    let mut _4: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57

    bb0: {
        _2 = get_version_and_date() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:22:9: 22:33
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:17: 253:36
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_sysroot_crate}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:22:9: 22:31
                                         // + literal: Const { ty: fn() -> Option<(Option<String>, Option<String>)> {get_version_and_date}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        switchInt(move _3) -> [false: bb10, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:253:12: 253:42
    }

    bb2: {
        _26 = const AutoCfg::emit_sysroot_crate::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
                                         // mir::Constant
        _1 = Option::<(Option<String>, Option<String>)>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:23: 23:45]>(move _2, move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:22:9: 23:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:14: 23:22
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(AutoCfg::emit_sysroot_crate, [], Some(promoted[0])) }
        _16 = _26;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
                                         // + literal: Const { ty: fn(Option<(Option<String>, Option<String>)>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:23: 23:45]) -> Option<String> {Option::<(Option<String>, Option<String>)>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:23:23: 23:45]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = _16;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
        _25 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:44: 254:48
        _0 = Option::<String>::and_then::<version::Version, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57]>(move _1, move _4) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:22:9: 24:58
                                         // mir::Constant
        _24 = mangle(move _25) -> bb3;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:43
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {mangle}, val: Value(Scalar(<ZST>)) }
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:14: 24:22

    bb3: {
        _23 = &_24;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
                                         // + literal: Const { ty: fn(Option<String>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57]) -> Option<version::Version> {Option::<String>::and_then::<version::Version, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:24:23: 24:57]>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = ArgumentV1::new_display::<String>(move _22) -> [return: bb4, unwind: bb13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:25:6: 25:6
    }
}

                                         // mir::Constant
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::parse::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38], _2: &str) -> Result<u16, ParseIntError> {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:37: 254:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> ArgumentV1<'b> {ArgumentV1::new_display::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:19: 62:20
        _20 = [move _21];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _19 = &_20;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _0: std::result::Result<u16, std::num::ParseIntError>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:22: 62:22
        _18 = _19;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _17 = move _18 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:22: 62:38

    bb0: {
        _13 = Arguments::new_v1(move _14, move _17) -> [return: bb5, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _3 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:22: 62:38
                                         // mir::Constant
        _0 = core::str::<impl str>::parse::<u16>(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:22: 62:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:24: 62:29
                                         // + user_ty: UserType(0)
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Result<u16, <u16 as FromStr>::Err> {core::str::<impl str>::parse::<u16>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:38: 62:38
    }
}

        _12 = format(move _13) -> [return: bb6, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::parse::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:64:30: 64:31

    bb0: {
    }

    bb6: {
        drop(_24) -> [return: bb7, unwind: bb12]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
    }

    bb7: {
        _11 = move _12;                  // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _0 = const 3_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:64:30: 64:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:64:30: 64:31
        _10 = &_11;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
    }
}

        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
        _8 = <String as Deref>::deref(move _9) -> [return: bb8, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::parse(_1: &str) -> Option<version::Version> {
                                         // mir::Constant
    debug version => _1;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:57:18: 57:25
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
    let mut _0: std::option::Option<version::Version>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:57:36: 57:51
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    let _2: std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:13: 58:19
    bb8: {
        _7 = _8;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:18: 254:50
    let mut _3: std::str::Split<char>;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 61:24
        _6 = emit(move _7) -> [return: bb9, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:13: 254:51
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 61:24
                                         // mir::Constant
    let _5: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 60:27
    let mut _6: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 59:20
    let mut _7: &mut std::str::Split<char>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 59:20
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:13: 254:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    let mut _8: std::str::Split<char>;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 58:40
    }

    bb9: {
        drop(_11) -> bb10;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:51: 254:52
    }

    let mut _9: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 58:40
    bb10: {
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:60:24: 60:26
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:256:6: 256:6
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:60:24: 60:26
    }

    bb11 (cleanup): {
    let mut _12: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38
        drop(_11) -> bb14;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:51: 254:52
    }

    bb12 (cleanup): {
        drop(_12) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:115:5: 115:6
    }

    bb13 (cleanup): {
        drop(_24) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
    }
    let mut _14: std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45

    bb14 (cleanup): {
    let mut _15: std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:252:5: 256:6
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_sysroot_crate: &[&str; 1] = {
    let mut _16: std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:33
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35

    bb0: {
        _1 = [const "has_"];             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    let mut _18: std::option::Option<(usize, std::result::Result<u16, std::num::ParseIntError>)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _19: &mut std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    let mut _20: &mut std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:254:27: 254:35
    let mut _21: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:9: 70:10
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_path(_1: &AutoCfg, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:265:23: 265:28
    let mut _24: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:22: 69:14
    let mut _25: (usize, std::result::Result<u16, std::num::ParseIntError>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:28: 66:38
    debug path => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:265:30: 265:34
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:265:45: 265:49
    let mut _3: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:9: 266:49
    let mut _26: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:29: 66:30
    let mut _27: std::result::Result<u16, std::num::ParseIntError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:32: 66:37
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:9: 266:49
    let mut _5: std::string::String;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _6: std::string::String;         // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    let mut _28: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:67:30: 67:36
    let _30: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:17: 66:18
    let mut _31: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:13: 66:19
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _8: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    let mut _9: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    let mut _32: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:13: 66:19
    let mut _36: (u16, u16, u16);        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:33: 72:57
    let mut _37: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:34: 72:40
    let _10: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _38: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:38: 72:39
    let mut _39: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:42: 72:48
    let _40: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:46: 72:47
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
    let mut _41: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:50: 72:56
    let _42: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:54: 72:55
    let mut _43: version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:14: 73:48
    let mut _16: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
    let _17: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
    let mut _18: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    scope 1 {
    let mut _44: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:32: 73:35
    let mut _45: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:37: 73:40
    let mut _46: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:42: 73:47
        debug res => _6;                 // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:9: 266:49
    scope 1 {
        _18 = const AutoCfg::probe_path::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
        debug splits => _2;              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:13: 58:19
        let mut _13: [u16; 3];           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:64:13: 64:20
        scope 2 {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::probe_path, [], Some(promoted[0])) }
            debug mmp => _13;            // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:64:13: 64:20
            let mut _17: std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        _10 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
            let _33: u16;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:14: 72:17
            let _34: u16;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:19: 72:22
            let _35: u16;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:24: 72:29
            scope 3 {
                debug iter => _17;       // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
                let _22: usize;          // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:14: 65:15
        _17 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
        _15 = ArgumentV1::new_display::<&str>(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
                                         // mir::Constant
                let _23: std::result::Result<u16, std::num::ParseIntError>; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:17: 65:22
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:43: 266:47
                                         // + user_ty: UserType(1)
                scope 4 {
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
                    debug i => _22;      // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:14: 65:15
    }

    bb1: {
                    debug split => _23;  // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:17: 65:22
                    let _29: u16;        // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:68:24: 68:25
                    scope 5 {
        _14 = [move _15];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = &_14;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = _13;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                        debug v => _29;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:68:24: 68:25
                    }
                }
            }
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
            scope 6 {
        _7 = Arguments::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                debug maj => _33;        // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:14: 72:17
                                         // mir::Constant
                debug min => _34;        // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:19: 72:22
                debug patch => _35;      // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:24: 72:29
            }
        }
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    }
                                         // + user_ty: UserType(0)

    bb0: {
        _9 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 58:40
        _8 = core::str::<impl str>::split::<char>(move _9, const '-') -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 58:40
                                         // mir::Constant
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:30: 58:35
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = format(move _7) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = &mut _8;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 59:20
        _6 = <std::str::Split<char> as Iterator>::nth(move _7, const 0_usize) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 59:20
                                         // mir::Constant
        _5 = move _6;                    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _3 = AutoCfg::probe::<String>(move _4, move _5) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:9: 266:49
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:59:14: 59:17
                                         // mir::Constant
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::Split<char>, usize) -> Option<<std::str::Split<char> as Iterator>::Item> {<std::str::Split<char> as Iterator>::nth}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:14: 266:19
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, String) -> Result<bool, error::Error> {AutoCfg::probe::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _11 = const "";                  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:60:24: 60:26
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:60:24: 60:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Result::<bool, error::Error>::unwrap_or(move _3, const false) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:9: 266:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:50: 266:59
        _10 = _11;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:60:24: 60:26
        _5 = Option::<&str>::unwrap_or(move _6, move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 60:27
                                         // mir::Constant
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:267:6: 267:6
    }
}

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:60:14: 60:23
                                         // + literal: Const { ty: fn(Option<&str>, &str) -> &str {Option::<&str>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 61:24
promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_path: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41

    bb0: {
        _3 = core::str::<impl str>::split::<char>(move _4, const '.') -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 61:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:61:14: 61:19
        _1 = [const "pub use ", const ";"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    }

                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    bb4: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <std::str::Split<char> as Iterator>::map::<Result<u16, ParseIntError>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>(move _3, move _12) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:58:22: 62:39
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
                                         // mir::Constant
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:266:28: 266:41
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:14: 62:17
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_has_path(_1: &AutoCfg, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:273:26: 273:31
                                         // + literal: Const { ty: fn(std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]) -> Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]> {<std::str::Split<char> as Iterator>::map::<Result<u16, ParseIntError>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>}, val: Value(Scalar(<ZST>)) }
    debug path => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:273:33: 273:37
    }

    bb5: {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:273:45: 273:45
        _13 = [const 0_u16; 3];          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:64:23: 64:32
    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:12: 274:33
        _16 = move _2;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:33
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:12: 274:33
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:28: 274:32
    let _6: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:13: 275:51
        _15 = <Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]> as Iterator>::enumerate(move _16) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:34: 65:43
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
    let mut _9: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
                                         // + literal: Const { ty: fn(Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>) -> Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> {<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]> as Iterator>::enumerate}, val: Value(Scalar(<ZST>)) }
    }
    let _10: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
    let _11: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _12: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16

    bb6: {
        _14 = <Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> as IntoIterator>::into_iter(move _15) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
                                         // mir::Constant
    let mut _13: std::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _14: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
    let mut _15: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
    let _16: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
                                         // + literal: Const { ty: fn(Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>) -> <Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> as IntoIterator>::IntoIter {<Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    let mut _17: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    bb7: {
    let mut _18: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _17 = move _14;                  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
    let _19: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _20: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _21: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
        goto -> bb8;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:9: 70:10
    }

    bb8: {
        _20 = &mut _17;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        _19 = &mut (*_20);               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        _18 = <Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> as Iterator>::next(move _19) -> bb9; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
                                         // mir::Constant
    let mut _22: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
    let _23: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
    let _24: std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
    let mut _25: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:44: 275:48
    let mut _26: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
                                         // + literal: Const { ty: for<'r> fn(&'r mut Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>>) -> Option<<Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> as Iterator>::Item> {<Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:62:18: 62:38]>> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    scope 1 {
        debug res => _12;                // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
    }

    bb9: {
        _21 = discriminant(_18);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:12: 274:33
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:28: 274:32
        _3 = AutoCfg::probe_path(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:12: 274:33
        switchInt(move _21) -> [0_isize: bb12, 1_isize: bb10, otherwise: bb11]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
    }

    bb10: {
        _22 = (((_18 as Some).0: (usize, std::result::Result<u16, std::num::ParseIntError>)).0: usize); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:14: 65:15
        _23 = move (((_18 as Some).0: (usize, std::result::Result<u16, std::num::ParseIntError>)).1: std::result::Result<u16, std::num::ParseIntError>); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:17: 65:22
                                         // mir::Constant
        _26 = _22;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:29: 66:30
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:17: 274:27
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_path}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        switchInt(move _3) -> [false: bb10, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:274:12: 274:33
    }

        _27 = move _23;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:32: 66:37
        Deinit(_25);                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:28: 66:38
        (_25.0: usize) = move _26;       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:28: 66:38
        (_25.1: std::result::Result<u16, std::num::ParseIntError>) = move _27; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:28: 66:38
        switchInt((_25.0: usize)) -> [3_usize: bb16, otherwise: bb13]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:22: 66:38
    bb2: {
        _26 = const AutoCfg::emit_has_path::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
    }
                                         // mir::Constant

    bb11: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
        unreachable;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:27: 65:45
    }

    bb12: {
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(AutoCfg::emit_has_path, [], Some(promoted[0])) }
        _38 = const 0_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:38: 72:39
        _16 = _26;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
        _37 = _13[_38];                  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:34: 72:40
        _40 = const 1_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:46: 72:47
        _39 = _13[_40];                  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:42: 72:48
        _42 = const 2_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:54: 72:55
        _15 = _16;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
        _41 = _13[_42];                  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:50: 72:56
        Deinit(_36);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:33: 72:57
        (_36.0: u16) = move _37;         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:33: 72:57
        (_36.1: u16) = move _39;         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:33: 72:57
        (_36.2: u16) = move _41;         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:33: 72:57
        _25 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:44: 275:48
        _33 = (_36.0: u16);              // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:14: 72:17
        _24 = mangle(move _25) -> bb3;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:43
        _34 = (_36.1: u16);              // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:19: 72:22
        _35 = (_36.2: u16);              // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:72:24: 72:29
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {mangle}, val: Value(Scalar(<ZST>)) }
        _44 = _33;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:32: 73:35
    }
        _45 = _34;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:37: 73:40
        _46 = _35;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:42: 73:47

    bb3: {
        _23 = &_24;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
        _43 = version::Version::from_mmp(move _44, move _45, move _46) -> bb18; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:14: 73:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:14: 73:31
                                         // + literal: Const { ty: fn(u16, u16, u16) -> version::Version {version::Version::from_mmp}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _28 = discriminant((_25.1: std::result::Result<u16, std::num::ParseIntError>)); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:28: 66:38
        _21 = ArgumentV1::new_display::<String>(move _22) -> [return: bb4, unwind: bb13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:37: 275:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> ArgumentV1<'b> {ArgumentV1::new_display::<String>}, val: Value(Scalar(<ZST>)) }
        switchInt(move _28) -> [0_isize: bb14, 1_isize: bb16, otherwise: bb15]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:22: 66:38
    }

    }

    bb4: {
    bb14: {
        _29 = (((_25.1: std::result::Result<u16, std::num::ParseIntError>) as Ok).0: u16); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:68:24: 68:25
        _20 = [move _21];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _24 = _29;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:68:31: 68:32
        _19 = &_20;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _30 = _22;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:17: 66:18
        _31 = const 3_usize;             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:13: 66:19
        _18 = _19;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _17 = move _18 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = Arguments::new_v1(move _14, move _17) -> [return: bb5, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _32 = Lt(_30, _31);              // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:13: 66:19
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> bb17; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:13: 66:19
    }

    bb15: {
        unreachable;                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:28: 66:38
    }

    bb16: {
        Deinit(_0);                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:67:48: 67:52
        discriminant(_0) = 0;            // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:67:48: 67:52
                                         // mir::Constant
        goto -> bb19;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:74:6: 74:6
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    }

                                         // + user_ty: UserType(0)
    bb17: {
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
        _13[_30] = move _24;             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:66:13: 69:14
    }

        goto -> bb8;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:65:9: 70:10
    bb5: {
    }

    bb18: {
        Deinit(_0);                      // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:9: 73:49
        ((_0 as Some).0: version::Version) = move _43; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:9: 73:49
        _12 = format(move _13) -> [return: bb6, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
        discriminant(_0) = 1;            // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:73:9: 73:49
                                         // mir::Constant
        goto -> bb19;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:74:6: 74:6
    }

                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
    bb19: {
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:74:6: 74:6
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::from_mmp(_1: u16, _2: u16, _3: u16) -> version::Version {
    debug major => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:88:21: 88:26
    }

    bb6: {
        drop(_24) -> [return: bb7, unwind: bb12]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
    }

    bb7: {
        _11 = move _12;                  // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _10 = &_11;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
    debug minor => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:88:33: 88:38
    debug patch => _3;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:88:45: 88:50
    let mut _0: version::Version;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:88:60: 88:67
    let mut _4: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:79
    let mut _5: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:64
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
        _8 = <String as Deref>::deref(move _9) -> [return: bb8, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
                                         // mir::Constant
    let mut _6: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:39
    let mut _7: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:18: 89:32
    let mut _8: u16;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:19: 89:24
    let mut _9: (u64, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:39
    let mut _10: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:42: 89:64
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
    let mut _11: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:43: 89:57
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _7 = _8;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:18: 275:50
    let mut _12: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:44: 89:49
    let mut _13: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:42: 89:64
    let mut _14: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:67: 89:79
        _6 = emit(move _7) -> [return: bb9, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:13: 275:51
    let mut _15: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:67: 89:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:13: 275:17

                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    bb0: {
        _8 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:19: 89:24
        _7 = move _8 as u64 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:18: 89:32
    }

    bb9: {
        drop(_11) -> bb10;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:51: 275:52
    }

    bb10: {
        _9 = CheckedShl(_7, const 32_i32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:39
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:277:6: 277:6
    }

    bb11 (cleanup): {
        assert(!move (_9.1: bool), "attempt to shift left by `{}`, which would overflow", const 32_i32) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:39
    }

    bb1: {
        _6 = move (_9.0: u64);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:39
        _12 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:44: 89:49
        _11 = move _12 as u64 (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:43: 89:57
        drop(_11) -> bb14;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:51: 275:52
    }

    bb12 (cleanup): {
        drop(_12) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:115:5: 115:6
    }

    bb13 (cleanup): {
        drop(_24) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
        _13 = CheckedShl(_11, const 16_i32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:42: 89:64
    }
        assert(!move (_13.1: bool), "attempt to shift left by `{}`, which would overflow", const 16_i32) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:42: 89:64
    }

    bb2: {
        _10 = move (_13.0: u64);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:42: 89:64
        _5 = BitOr(move _6, move _10);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:64
        _15 = _3;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:67: 89:72

        _14 = move _15 as u64 (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:67: 89:79
        _4 = BitOr(move _5, move _14);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:17: 89:79
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:9: 89:80
    bb14 (cleanup): {
        (_0.0: u64) = move _4;           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:89:9: 89:80
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:90:6: 90:6
    }
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:273:5: 277:6
}

    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_has_path: &[&str; 1] = {
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::to_mmp(_1: &version::Version) -> (u16, u16, u16) {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35

    bb0: {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:104:19: 104:24
        _1 = [const "has_"];             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
    let mut _0: (u16, u16, u16);         // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:104:29: 104:44
    let _2: u64;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:13: 105:18
    let mut _3: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:21: 105:27
    let mut _4: (u64, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:21: 105:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _6: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:21: 106:27
    let mut _7: (u64, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:21: 106:33
    let mut _9: u16;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:10: 108:22
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
    let mut _10: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:10: 108:15
    let mut _11: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:24: 108:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:275:27: 275:35
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_path_cfg(_1: &AutoCfg, _2: &str, _3: &str) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:280:26: 280:31
    let mut _12: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:24: 108:29
    let mut _13: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:38: 108:50
    let mut _14: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:38: 108:43
    scope 1 {
        debug major => _2;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:13: 105:18
        let _5: u64;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:13: 106:18
        scope 2 {
    debug path => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:280:33: 280:37
    debug cfg => _3;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:280:45: 280:48
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:280:56: 280:56
            debug minor => _5;           // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:13: 106:18
            let _8: u64;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:107:13: 107:18
            scope 3 {
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:12: 281:33
                debug patch => _8;       // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:107:13: 107:18
            }
        }
    }

    bb0: {
        _3 = ((*_1).0: u64);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:21: 105:27
        _4 = CheckedShr(_3, const 32_i32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:21: 105:33
    let mut _5: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:12: 281:33
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:28: 281:32
    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:282:13: 282:22
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:282:18: 282:21

    bb0: {
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", const 32_i32) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:21: 105:33
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:12: 281:33
    }

    bb1: {
        _2 = move (_4.0: u64);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:105:21: 105:33
        _6 = ((*_1).0: u64);             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:21: 106:27
        _7 = CheckedShr(_6, const 16_i32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:21: 106:33
        assert(!move (_7.1: bool), "attempt to shift right by `{}`, which would overflow", const 16_i32) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:21: 106:33
    }

    bb2: {
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:28: 281:32
        _4 = AutoCfg::probe_path(move _5, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:12: 281:33
                                         // mir::Constant
        _5 = move (_7.0: u64);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:106:21: 106:33
        _8 = ((*_1).0: u64);             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:107:21: 107:27
        _10 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:10: 108:15
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:17: 281:27
        _9 = move _10 as u16 (Misc);     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:10: 108:22
        _12 = _5;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:24: 108:29
        _11 = move _12 as u16 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:24: 108:36
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_path}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        switchInt(move _4) -> [false: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:281:12: 281:33
    }
        _14 = _8;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:38: 108:43
        _13 = move _14 as u16 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:38: 108:50
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:9: 108:51

        (_0.0: u16) = move _9;           // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:9: 108:51
    bb2: {
        (_0.1: u16) = move _11;          // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:9: 108:51
        (_0.2: u16) = move _13;          // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:108:9: 108:51
        _8 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:282:18: 282:21
        _7 = emit(move _8) -> bb3;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:282:13: 282:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:282:13: 282:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:284:6: 284:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:109:6: 109:6
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::at_least::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44], _2: version::Version) -> bool {
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:19: 137:26
    debug self => (*(_1.0: &&version::Version)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:135:21: 135:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:28: 137:28
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_trait(_1: &AutoCfg, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:293:24: 293:29
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:293:31: 293:35
    let mut _3: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:28: 137:32
    let mut _4: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:36: 137:44
    let _5: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:36: 137:44
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:293:46: 293:50
    let _6: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:36: 137:44
    let mut _3: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:9: 294:70
    let mut _7: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44

    bb0: {
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:9: 294:70
        _7 = move (_1.0: &&version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:28: 137:32
    let mut _5: std::string::String;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
        _3 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:28: 137:32
    let _6: std::string::String;         // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:36: 137:44
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:36: 137:44
        _4 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:36: 137:44
    let mut _8: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
    let mut _9: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
    let _10: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
        _0 = <&version::Version as PartialOrd>::ge(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:28: 137:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:28: 137:44
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &version::Version, &'s &version::Version) -> bool {<&version::Version as PartialOrd>::ge}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:44: 137:44
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::at_least(_1: &version::Version, _2: &str) -> bool {
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
    let mut _16: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:135:21: 135:26
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:135:28: 135:35
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:135:46: 135:50
    let mut _3: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:9: 137:45
    let mut _4: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:9: 136:32
    let _17: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
    let mut _18: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
    scope 1 {
        debug res => _6;                 // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:24: 136:31
    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44
    let mut _7: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:24: 136:31
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:9: 294:70
        _4 = version::Version::parse(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:9: 136:32
        _18 = const AutoCfg::probe_trait::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:9: 136:23
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::probe_trait, [], Some(promoted[0])) }
        _10 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44
        (_6.0: &&version::Version) = move _7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
        _17 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
        _3 = Option::<version::Version>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:9: 137:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:14: 137:17
                                         // + literal: Const { ty: fn(Option<version::Version>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44]) -> Option<bool> {Option::<version::Version>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:137:18: 137:44]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
        _15 = ArgumentV1::new_display::<&str>(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
                                         // mir::Constant
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:136:9: 138:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:64: 294:68
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:138:14: 138:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    bb3: {
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:139:6: 139:6
    }
}

        _14 = [move _15];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = &_14;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = _13;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::at_most::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44], _2: version::Version) -> bool {
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:19: 162:26
    debug self => (*(_1.0: &&version::Version)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:160:20: 160:25
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:28: 162:28
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _3: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:28: 162:32
        _7 = Arguments::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
    let mut _4: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:36: 162:44
    let _5: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:36: 162:44
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _6: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:36: 162:44
    let mut _7: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44

                                         // + user_ty: UserType(0)
    bb0: {
        _7 = move (_1.0: &&version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:28: 162:32
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _3 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:28: 162:32
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:36: 162:44
        _6 = format(move _7) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:36: 162:44
                                         // mir::Constant
        _4 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:36: 162:44
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
        _0 = <&version::Version as PartialOrd>::le(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:28: 162:44
                                         // mir::Constant
    }

    bb3: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:28: 162:44
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &version::Version, &'s &version::Version) -> bool {<&version::Version as PartialOrd>::le}, val: Value(Scalar(<ZST>)) }
    }

        _5 = move _6;                    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
    bb1: {
        _3 = AutoCfg::probe::<String>(move _4, move _5) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:9: 294:70
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:44: 162:44
                                         // mir::Constant
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::at_most(_1: &version::Version, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:160:20: 160:25
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:14: 294:19
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, String) -> Result<bool, error::Error> {AutoCfg::probe::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:160:27: 160:34
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:160:45: 160:49
    let mut _3: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:9: 162:45
        _0 = Result::<bool, error::Error>::unwrap_or(move _3, const false) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:9: 295:30
    let mut _4: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:9: 161:32
                                         // mir::Constant
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:24: 161:31
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:295:14: 295:23
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44
    bb5: {
    let mut _7: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:296:6: 296:6
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:24: 161:31
    }
        _4 = version::Version::parse(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:9: 161:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:9: 161:23
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_trait: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62

    bb0: {
        _1 = [const "pub trait Probe: ", const " + Sized {}"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44
        (_6.0: &&version::Version) = move _7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
        _3 = Option::<version::Version>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:9: 162:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:14: 162:17
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:294:28: 294:62
    }
}

                                         // + literal: Const { ty: fn(Option<version::Version>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44]) -> Option<bool> {Option::<version::Version>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:162:18: 162:44]>}, val: Value(Scalar(<ZST>)) }
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_has_trait(_1: &AutoCfg, _2: &str) -> () {
    }

    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:302:27: 302:32
    bb2: {
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:302:34: 302:38
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:161:9: 163:30
                                         // mir::Constant
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:302:46: 302:46
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:163:14: 163:23
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:12: 303:34
    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:164:6: 164:6
    }
}

    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:12: 303:34
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::exactly::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44], _2: version::Version) -> bool {
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:29: 303:33
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:19: 186:26
    let _6: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:13: 304:51
    debug self => (*(_1.0: &&version::Version)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:184:20: 184:25
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:28: 186:28
    let mut _3: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:28: 186:32
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
    let mut _9: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
    let mut _4: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:36: 186:44
    let _5: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:36: 186:44
    let mut _6: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44

    bb0: {
    let _10: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
        _6 = move (_1.0: &&version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:28: 186:32
        _3 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:28: 186:32
    let _11: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _12: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
        _5 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:36: 186:44
        _4 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:36: 186:44
    let mut _13: std::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _14: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
        _0 = <&version::Version as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:28: 186:44
    let mut _15: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:28: 186:44
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &version::Version, &'s &version::Version) -> bool {<&version::Version as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    let _16: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
    bb1: {
    let mut _17: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _18: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _19: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _20: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:44: 186:44
    }
    let mut _21: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:7:1: 189:2>::exactly(_1: &version::Version, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:184:20: 184:25
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:184:27: 184:34
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:184:45: 184:49
    let mut _22: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
    let _23: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
    let _24: std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
    let mut _3: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:9: 186:45
    let mut _4: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:9: 185:32
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:24: 185:31
    let mut _25: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:44: 304:48
    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44
    let mut _7: &&version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44

    let mut _26: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
    bb0: {
    scope 1 {
        debug res => _12;                // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:24: 185:31
        _4 = version::Version::parse(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:9: 185:32
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:12: 303:34
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:29: 303:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:9: 185:23
        _3 = AutoCfg::probe_trait(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:12: 303:34
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:17: 303:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_trait}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44
        (_6.0: &&version::Version) = move _7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44
        _3 = Option::<version::Version>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:9: 186:45
                                         // mir::Constant
        switchInt(move _3) -> [false: bb10, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:303:12: 303:34
    }

    bb2: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:14: 186:17
        _26 = const AutoCfg::emit_has_trait::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(AutoCfg::emit_has_trait, [], Some(promoted[0])) }
        _16 = _26;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
                                         // + literal: Const { ty: fn(Option<version::Version>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44]) -> Option<bool> {Option::<version::Version>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:186:18: 186:44]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:185:9: 187:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:187:14: 187:23
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
        _15 = _16;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
        _25 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:44: 304:48
    }

    bb3: {
        _24 = mangle(move _25) -> bb3;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:188:6: 188:6
                                         // mir::Constant
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:43
}

                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {mangle}, val: Value(Scalar(<ZST>)) }
    }
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:191:1: 196:2>::fmt(_1: &version::Version, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:192:12: 192:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:192:19: 192:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:192:46: 192:57

    bb3: {
        _23 = &_24;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
    let _3: u16;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:14: 193:19
    let _4: u16;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:21: 193:26
    let _5: u16;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:28: 193:33
    let mut _6: (u16, u16, u16);         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:37: 193:50
        _21 = ArgumentV1::new_display::<String>(move _22) -> [return: bb4, unwind: bb13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
                                         // mir::Constant
    let mut _7: &version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:37: 193:50
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:37: 304:49
                                         // + user_ty: UserType(1)
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> ArgumentV1<'b> {ArgumentV1::new_display::<String>}, val: Value(Scalar(<ZST>)) }
    let mut _9: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    }

    let mut _10: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    bb4: {
    let mut _11: &[&str; 3];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
        _20 = [move _21];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _12: &[&str; 3];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    let mut _13: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _19 = &_20;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _14: &[std::fmt::ArgumentV1; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _18 = _19;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _17 = move _18 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _15: &[std::fmt::ArgumentV1; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _13 = Arguments::new_v1(move _14, move _17) -> [return: bb5, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _16: [std::fmt::ArgumentV1; 3];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _17: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
    let mut _18: &u16;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
    let _19: &u16;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
    let mut _20: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
    let mut _21: &u16;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
    let _22: &u16;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
    let mut _23: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
    let mut _24: &u16;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
    let _25: &u16;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
    scope 1 {
        _12 = format(move _13) -> [return: bb6, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
        debug major => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:14: 193:19
        debug minor => _4;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:21: 193:26
        debug patch => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:28: 193:33
        let mut _26: &[&str; 3];         // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    }

    }

    bb0: {
    bb6: {
        _7 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:37: 193:50
        drop(_24) -> [return: bb7, unwind: bb12]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
    }

    bb7: {
        _11 = move _12;                  // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _10 = &_11;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
        _6 = version::Version::to_mmp(move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:37: 193:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:42: 193:48
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
                                         // + literal: Const { ty: for<'r> fn(&'r version::Version) -> (u16, u16, u16) {version::Version::to_mmp}, val: Value(Scalar(<ZST>)) }
        _8 = <String as Deref>::deref(move _9) -> [return: bb8, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
                                         // mir::Constant
    }

    bb1: {
        _3 = (_6.0: u16);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:14: 193:19
        _4 = (_6.1: u16);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:21: 193:26
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _7 = _8;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:18: 304:50
        _5 = (_6.2: u16);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:193:28: 193:33
        _8 = &mut (*_2);                 // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
        _26 = const <version::Version as std::fmt::Display>::fmt::promoted[0]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
                                         // mir::Constant
        _6 = emit(move _7) -> [return: bb9, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:13: 304:51
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
                                         // mir::Constant
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(<version::Version as std::fmt::Display>::fmt, [], Some(promoted[0])) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:13: 304:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    }
        _12 = _26;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
        _11 = _12;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29

        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    bb9: {
        _19 = &_3;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
        _18 = _19;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
        drop(_11) -> bb10;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:51: 304:52
    }

    bb10: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:306:6: 306:6
        _17 = ArgumentV1::new_display::<u16>(move _18) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
    }
                                         // mir::Constant

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:31: 194:36
    bb11 (cleanup): {
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u16) -> ArgumentV1<'b> {ArgumentV1::new_display::<u16>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _22 = &_4;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
        _21 = _22;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
        _20 = ArgumentV1::new_display::<u16>(move _21) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:38: 194:43
        drop(_11) -> bb14;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:51: 304:52
    }

                                         // + user_ty: UserType(2)
    bb12 (cleanup): {
                                         // + literal: Const { ty: for<'b> fn(&'b u16) -> ArgumentV1<'b> {ArgumentV1::new_display::<u16>}, val: Value(Scalar(<ZST>)) }
        drop(_12) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:115:5: 115:6
    }

    bb13 (cleanup): {
    }

    bb3: {
        _25 = &_5;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
        drop(_24) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
        _24 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
    }

    bb14 (cleanup): {
        _23 = ArgumentV1::new_display::<u16>(move _24) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:302:5: 306:6
    }
}

                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:45: 194:50
                                         // + user_ty: UserType(3)
promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_has_trait: &[&str; 1] = {
                                         // + literal: Const { ty: for<'b> fn(&'b u16) -> ArgumentV1<'b> {ArgumentV1::new_display::<u16>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _16 = [move _17, move _20, move _23]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _15 = &_16;                      // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35

    bb0: {
        _1 = [const "has_"];             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
        _14 = _15;                       // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _13 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _9 = Arguments::new_v1(move _10, move _13) -> bb5; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + user_ty: UserType(0)
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
        _0 = Formatter::write_fmt(move _8, move _9) -> bb6; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // mir::Constant
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:304:27: 304:35
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:14: 500:23
    }
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), std::fmt::Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
}

        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:195:6: 195:6
    }
}

promoted[0] in version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:191:1: 196:2>::fmt: &[&str; 3] = {
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_trait_cfg(_1: &AutoCfg, _2: &str, _3: &str) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:309:27: 309:32
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:309:34: 309:38
    debug cfg => _3;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:309:46: 309:49
    let mut _0: &[&str; 3];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:309:57: 309:57
    let mut _1: [&str; 3];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29

    bb0: {
        _1 = [const "", const ".", const "."]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:12: 310:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
    let mut _5: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:12: 310:34
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:29: 310:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:194:19: 194:29
    }
}

    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:311:13: 311:22
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:198:1: 203:2>::fmt(_1: &version::Version, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:311:18: 311:21

    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:199:12: 199:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:199:19: 199:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:199:46: 199:57
    bb0: {
    let mut _3: &mut std::fmt::Formatter; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:12: 310:34
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:29: 310:33
    let mut _4: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _4 = AutoCfg::probe_trait(move _5, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:12: 310:34
    let mut _5: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
                                         // mir::Constant
    let mut _6: &[&str; 3];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
    let _7: &[&str; 3];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
    let mut _8: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _9: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:17: 310:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_trait}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    let _10: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let _11: [std::fmt::ArgumentV1; 2];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _12: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
    let mut _13: &u64;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
    let _14: &u64;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
        switchInt(move _4) -> [false: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:310:12: 310:34
    }

    bb2: {
        _8 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:311:18: 311:21
        _7 = emit(move _8) -> bb3;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:311:13: 311:22
    let mut _16: &(u16, u16, u16);       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
    let _17: &(u16, u16, u16);           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
    let _18: (u16, u16, u16);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
                                         // mir::Constant
    let mut _19: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:311:13: 311:17
    let mut _20: &[&str; 3];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40

                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    bb0: {
    }

        _3 = &mut (*_2);                 // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:313:6: 313:6
    }
}

        _20 = const <version::Version as Debug>::fmt::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_type(_1: &AutoCfg, _2: &str) -> bool {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:322:23: 322:28
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(<version::Version as Debug>::fmt, [], Some(promoted[0])) }
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:322:30: 322:34
        _7 = _20;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:322:45: 322:49
    let mut _3: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:9: 323:58
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:9: 323:58
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
        _14 = &((*_1).0: u64);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
        _13 = _14;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
        _12 = ArgumentV1::new_debug::<u64>(move _13) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:42: 201:48
                                         // + user_ty: UserType(1)
    let mut _5: std::string::String;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _6: std::string::String;         // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> ArgumentV1<'b> {ArgumentV1::new_debug::<u64>}, val: Value(Scalar(<ZST>)) }
    }

    let mut _8: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    bb1: {
    let mut _9: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    let _10: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
        _19 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
        _18 = version::Version::to_mmp(move _19) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:55: 201:61
                                         // + literal: Const { ty: for<'r> fn(&'r version::Version) -> (u16, u16, u16) {version::Version::to_mmp}, val: Value(Scalar(<ZST>)) }
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    }

    bb2: {
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _17 = &_18;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
        _15 = ArgumentV1::new_debug::<(u16, u16, u16)>(move _16) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
    let mut _16: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:50: 201:63
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b (u16, u16, u16)) -> ArgumentV1<'b> {ArgumentV1::new_debug::<(u16, u16, u16)>}, val: Value(Scalar(<ZST>)) }
    }

    let _17: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
    let mut _18: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    scope 1 {
        debug res => _6;                 // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb3: {
    bb0: {
        _11 = [move _12, move _15];      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _10 = &_11;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _9 = _10;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _8 = move _9 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _4 = Arguments::new_v1(move _5, move _8) -> bb4; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:9: 323:58
        _18 = const AutoCfg::probe_type::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
                                         // mir::Constant
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50

                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::probe_type, [], Some(promoted[0])) }
    bb4: {
        _10 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
        _0 = Formatter::write_fmt(move _3, move _4) -> bb5; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:14: 500:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), std::fmt::Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:202:6: 202:6
    }
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
}

        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
        _17 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
promoted[0] in version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:198:1: 203:2>::fmt: &[&str; 3] = {
        _15 = ArgumentV1::new_display::<&str>(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
    let mut _0: &[&str; 3];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
                                         // mir::Constant
    let mut _1: [&str; 3];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40

    bb0: {
        _1 = [const "Version(", const ", ", const ")"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:52: 323:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    bb1: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
        _14 = [move _15];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = &_14;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = _13;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:201:19: 201:40
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::read::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:23: 31:45], _2: (Option<String>, Option<String>)) -> Option<String> {
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _7 = Arguments::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:25: 31:32
    scope 1 {
        debug version => _0;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:25: 31:32
    }

    bb0: {
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = format(move _7) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
        _0 = move (_2.0: std::option::Option<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:25: 31:32
                                         // mir::Constant
        drop((_2.1: std::option::Option<std::string::String>)) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:44: 31:45
    }
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    }


    bb3: {
    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:45: 31:45
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::read::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57], _2: String) -> Option<channel::Channel> {
        _5 = move _6;                    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _3 = AutoCfg::probe::<String>(move _4, move _5) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:9: 323:58
                                         // mir::Constant
    debug version => _2;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:24: 32:31
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:14: 323:19
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, String) -> Result<bool, error::Error> {AutoCfg::probe::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
    let mut _0: std::option::Option<channel::Channel>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:33: 32:33
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
    let mut _5: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
        _0 = Result::<bool, error::Error>::unwrap_or(move _3, const false) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:9: 324:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:324:14: 324:23
    let _6: &std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56

    bb0: {
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:325:6: 325:6
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
    }
}

                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_type: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50

    }
    bb0: {

    bb1: {
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:48: 32:56
        _0 = channel::Channel::parse(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:33: 32:57
                                         // mir::Constant
        _1 = [const "pub type Probe = ", const ";"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:33: 32:47
                                         // mir::Constant
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<channel::Channel> {channel::Channel::parse}, val: Value(Scalar(<ZST>)) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    }

    bb2: {
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
        drop(_2) -> bb3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:56: 32:57
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:57: 32:57
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:56: 32:57
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57
    }
}

        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:323:28: 323:50
    }
fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::read() -> Option<channel::Channel> {
}
    let mut _0: std::option::Option<channel::Channel>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:29:22: 29:37

    let mut _1: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:30:9: 31:46
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_has_type(_1: &AutoCfg, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:331:26: 331:31
    let mut _2: std::option::Option<(std::option::Option<std::string::String>, std::option::Option<std::string::String>)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:30:9: 30:33
    let mut _3: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:23: 31:45]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:23: 31:45
    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:331:33: 331:37
    let mut _4: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57

    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:331:45: 331:45
    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:12: 332:33
    bb0: {
        _2 = get_version_and_date() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:30:9: 30:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:30:9: 30:31
                                         // + literal: Const { ty: fn() -> Option<(Option<String>, Option<String>)> {get_version_and_date}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:12: 332:33
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:28: 332:32
    let _6: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:13: 333:51
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
    let mut _9: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
        _1 = Option::<(Option<String>, Option<String>)>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:23: 31:45]>(move _2, move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:30:9: 31:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:14: 31:22
    let _10: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
    let _11: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _12: std::string::String;        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
                                         // + literal: Const { ty: fn(Option<(Option<String>, Option<String>)>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:23: 31:45]) -> Option<String> {Option::<(Option<String>, Option<String>)>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:31:23: 31:45]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = Option::<String>::and_then::<channel::Channel, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57]>(move _1, move _4) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:30:9: 32:58
                                         // mir::Constant
    let mut _13: std::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _14: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
    let mut _15: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:14: 32:22
                                         // + literal: Const { ty: fn(Option<String>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57]) -> Option<channel::Channel> {Option::<String>::and_then::<channel::Channel, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:32:23: 32:57]>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:33:6: 33:6
    let _16: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::parse(_1: &str) -> Option<channel::Channel> {
    let mut _17: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _18: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _19: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _20: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    debug version => _1;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:56:18: 56:25
    let mut _21: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
    let mut _0: std::option::Option<channel::Channel>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:56:36: 56:51
    let _2: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:57:13: 57:20
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:57:23: 57:37
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
    let mut _22: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
    let _23: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
    let _24: std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
    let mut _5: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:36
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:36
    let mut _7: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:40: 58:56
    let mut _8: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:40: 58:47
    let mut _9: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
    let mut _25: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:44: 333:48
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
    let mut _26: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
    scope 1 {
        debug res => _12;                // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
    let mut _11: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:47
    let mut _12: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:47
    let mut _13: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:51: 60:71
    let mut _14: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:51: 60:58
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:12: 332:33
    let mut _15: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:28: 332:32
    let mut _16: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
        _3 = AutoCfg::probe_type(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:12: 332:33
                                         // mir::Constant
    let mut _17: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:44
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:17: 332:27
    let mut _18: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:44
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_type}, val: Value(Scalar(<ZST>)) }
    let mut _19: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:48: 62:65
    }

    bb1: {
    let mut _20: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:48: 62:55
    let mut _21: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    let mut _22: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:19: 64:41
        switchInt(move _3) -> [false: bb10, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:332:12: 332:33
    let mut _23: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:20: 64:41
    }

    let mut _24: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:20: 64:41
    bb2: {
    scope 1 {
        _26 = const AutoCfg::emit_has_type::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
        debug version => _2;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:57:13: 57:20
                                         // mir::Constant
        let mut _25: &&str;              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
        let mut _26: &&str;              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
        let mut _27: &&str;              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(AutoCfg::emit_has_type, [], Some(promoted[0])) }
    }

        _16 = _26;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:57:23: 57:37
        _2 = core::str::<impl str>::trim(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:57:23: 57:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:57:31: 57:35
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    }
        _15 = _16;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
        _25 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:44: 333:48

    bb1: {
        _24 = mangle(move _25) -> bb3;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:43
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {mangle}, val: Value(Scalar(<ZST>)) }
    }
        _6 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:36
        _5 = core::str::<impl str>::contains::<&str>(move _6, const "-dev") -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:20: 58:28
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:29: 58:35

    bb3: {
        _23 = &_24;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
        _21 = ArgumentV1::new_display::<String>(move _22) -> [return: bb4, unwind: bb13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49

                                         // mir::Constant
    bb2: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:37: 333:49
        _4 = const true;                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
                                         // + user_ty: UserType(1)
        goto -> bb4;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
    }

    bb3: {
        _8 = &_2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:40: 58:47
        _27 = const channel::Channel::parse::promoted[2]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
                                         // mir::Constant
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> ArgumentV1<'b> {ArgumentV1::new_display::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _20 = [move _21];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _19 = &_20;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
                                         // + literal: Const { ty: &&str, val: Unevaluated(channel::Channel::parse, [], Some(promoted[2])) }
        _9 = _27;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
        _18 = _19;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _17 = move _18 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _7 = <&str as PartialEq>::eq(move _8, move _9) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:40: 58:56
        _13 = Arguments::new_v1(move _14, move _17) -> [return: bb5, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:40: 58:56
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

                                         // + literal: Const { ty: for<'r, 's> fn(&'r &str, &'s &str) -> bool {<&str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
    bb5: {
        switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
    }

    bb5: {
        switchInt(move _5) -> [false: bb3, otherwise: bb2]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
    }

    bb6: {
        _4 = move _7;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
        goto -> bb4;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:12: 58:56
    }

    bb7: {
        _12 = format(move _13) -> [return: bb6, unwind: bb13]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    }

        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:59:13: 59:37
    bb6: {
        drop(_24) -> [return: bb7, unwind: bb12]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
        ((_0 as Some).0: channel::Channel) = const channel::Channel(Kind::Dev); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:59:13: 59:37
    }

                                         // mir::Constant
    bb7: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:59:13: 59:37
        _11 = move _12;                  // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _10 = &_11;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
                                         // + literal: Const { ty: channel::Channel, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:59:13: 59:37
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
        _8 = <String as Deref>::deref(move _9) -> [return: bb8, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
                                         // mir::Constant
        goto -> bb26;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:9: 68:10
    }

    bb8: {
        _12 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:47
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
        _11 = core::str::<impl str>::contains::<&str>(move _12, const "-nightly") -> bb12; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:47
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:27: 60:35
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    bb8: {
        _7 = _8;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:18: 333:50
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:36: 60:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = emit(move _7) -> [return: bb9, unwind: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:13: 333:51
    }

                                         // mir::Constant
    bb9: {
        _10 = const true;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
        goto -> bb11;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
    }

    bb10: {
        _14 = &_2;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:51: 60:58
        _26 = const channel::Channel::parse::promoted[1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:13: 333:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
    }

                                         // + literal: Const { ty: &&str, val: Unevaluated(channel::Channel::parse, [], Some(promoted[1])) }
        _15 = _26;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
        _13 = <&str as PartialEq>::eq(move _14, move _15) -> bb13; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:51: 60:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:51: 60:71
    bb9: {
        drop(_11) -> bb10;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:51: 333:52
    }

    bb10: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:335:6: 335:6
    }

    bb11 (cleanup): {
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &str, &'s &str) -> bool {<&str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        switchInt(move _10) -> [false: bb15, otherwise: bb14]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
    }

    bb12: {
        drop(_11) -> bb14;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:51: 333:52
        switchInt(move _11) -> [false: bb10, otherwise: bb9]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
    }

    bb13: {
    }

    bb12 (cleanup): {
        drop(_12) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:115:5: 115:6
        _10 = move _13;                  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
    }

        goto -> bb11;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:19: 60:71
    bb13 (cleanup): {
    }

        drop(_24) -> bb14;               // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:80: 113:81
    bb14: {
    }
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:61:13: 61:41

    bb14 (cleanup): {
        ((_0 as Some).0: channel::Channel) = const channel::Channel(Kind::Nightly); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:61:13: 61:41
                                         // mir::Constant
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:331:5: 335:6
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:61:13: 61:41
}

                                         // + literal: Const { ty: channel::Channel, val: Value(Scalar(0x01)) }
promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_has_type: &[&str; 1] = {
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:61:13: 61:41
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
        goto -> bb26;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:16: 68:10
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35

    bb0: {
        _1 = [const "has_"];             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
    }

    bb15: {
        _18 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:44
        _17 = core::str::<impl str>::contains::<&str>(move _18, const "-beta") -> bb19; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:44
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:27: 62:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:333:27: 333:35
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_type_cfg(_1: &AutoCfg, _2: &str, _3: &str) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:338:26: 338:31
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:36: 62:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    debug name => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:338:33: 338:37
    bb16: {
    debug cfg => _3;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:338:45: 338:48
        _16 = const true;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:338:56: 338:56
        goto -> bb18;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
    }

    bb17: {
        _20 = &_2;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:48: 62:55
        _25 = const channel::Channel::parse::promoted[0]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:12: 339:33
    let mut _5: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:12: 339:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:28: 339:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(channel::Channel::parse, [], Some(promoted[0])) }
        _21 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
        _19 = <&str as PartialEq>::eq(move _20, move _21) -> bb20; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:48: 62:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:48: 62:65
    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:340:13: 340:22
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:340:18: 340:21

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:12: 339:33
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &str, &'s &str) -> bool {<&str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        switchInt(move _16) -> [false: bb22, otherwise: bb21]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
    }

    bb19: {
        switchInt(move _17) -> [false: bb17, otherwise: bb16]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:28: 339:32
    }

        _4 = AutoCfg::probe_type(move _5, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:12: 339:33
    bb20: {
                                         // mir::Constant
        _16 = move _19;                  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
        goto -> bb18;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:19: 62:65
    }

    bb21: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:17: 339:27
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_type}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:63:13: 63:38
        ((_0 as Some).0: channel::Channel) = const channel::Channel(Kind::Beta); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:63:13: 63:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:63:13: 63:38
                                         // + literal: Const { ty: channel::Channel, val: Value(Scalar(0x02)) }
        switchInt(move _4) -> [false: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:339:12: 339:33
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:63:13: 63:38
        goto -> bb26;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:16: 68:10
    }
    }


    bb22: {
    bb2: {
        _24 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:20: 64:41
        _8 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:340:18: 340:21
        _7 = emit(move _8) -> bb3;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:340:13: 340:22
        _23 = core::str::<impl str>::contains::<&str>(move _24, const "-") -> bb23; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:20: 64:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:28: 64:36
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:340:13: 340:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:37: 64:40
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:342:6: 342:6
    }

    bb23: {
        _22 = Not(move _23);             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:19: 64:41
        switchInt(move _22) -> [false: bb25, otherwise: bb24]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:19: 64:41
    }

    bb24: {
    }
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:65:13: 65:40
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_expression(_1: &AutoCfg, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:351:29: 351:34
    debug expr => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:351:36: 351:40
        ((_0 as Some).0: channel::Channel) = const channel::Channel(Kind::Stable); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:65:13: 65:40
                                         // mir::Constant
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:351:51: 351:55
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:65:13: 65:40
    let mut _3: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:9: 352:70
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:9: 352:70
                                         // + literal: Const { ty: channel::Channel, val: Value(Scalar(0x03)) }
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:65:13: 65:40
        goto -> bb26;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:16: 68:10
    }

    bb25: {
    let mut _5: std::string::String;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
    let _6: std::string::String;         // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:67:13: 67:17
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:67:13: 67:17
        goto -> bb26;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:64:16: 68:10
    }
    let mut _8: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
    let mut _9: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
    let _10: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62

    bb26: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:69:6: 69:6
    }
}

    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
promoted[0] in channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::parse: &&str = {
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
    let mut _16: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
    let mut _0: &&str;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    let mut _1: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65

    bb0: {
        _1 = const "beta";               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    let _17: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _18: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    scope 1 {
        debug res => _6;                 // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:62:59: 62:65
    }
}

        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:9: 352:70
promoted[1] in channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::parse: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
        _18 = const AutoCfg::probe_expression::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
                                         // mir::Constant
    let mut _1: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
    bb0: {
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::probe_expression, [], Some(promoted[0])) }
        _1 = const "nightly";            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
        _10 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
                                         // mir::Constant
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
        _17 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:60:62: 60:71
    }
}

promoted[2] in channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::parse: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
        _15 = ArgumentV1::new_display::<&str>(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
                                         // mir::Constant
    let mut _1: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:64: 352:68
    bb0: {
                                         // + user_ty: UserType(1)
        _1 = const "dev";                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    }

    bb1: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:58:51: 58:56
    }
}

        _14 = [move _15];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = &_14;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = _13;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::as_str(_1: &channel::Channel) -> &str {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:72:15: 72:20
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:72:25: 72:37
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:74:13: 74:22
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _7 = Arguments::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant

    bb0: {
        _2 = discriminant(((*_1).0: channel::Kind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:73:15: 73:21
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb5, 2_isize: bb4, 3_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:73:9: 73:21
    }

    bb1: {
        _0 = const "stable";             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:77:29: 77:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:77:29: 77:37
        _6 = format(move _7) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:77:29: 77:37
    }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38

                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
    bb2: {
    }

    bb3: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:73:15: 73:21
    }

        _5 = move _6;                    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _3 = AutoCfg::probe::<String>(move _4, move _5) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:9: 352:70
                                         // mir::Constant
    bb3: {
        _0 = const "dev";                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:74:26: 74:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:74:26: 74:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:74:26: 74:31
    }

    bb4: {
        _0 = const "beta";               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:75:27: 75:33
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:14: 352:19
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, String) -> Result<bool, error::Error> {AutoCfg::probe::<String>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:75:27: 75:33
        _0 = Result::<bool, error::Error>::unwrap_or(move _3, const false) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:9: 353:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:75:27: 75:33
                                         // mir::Constant
    }

    bb5: {
        _0 = const "nightly";            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:76:30: 76:39
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:353:14: 353:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:76:30: 76:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:76:30: 76:39
    }

    bb5: {
    }

        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:354:6: 354:6
    bb6: {
    }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:79:6: 79:6
    }
}

}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::supports_features(_1: &channel::Channel) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:101:30: 101:35
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:101:40: 101:44
promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_expression: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62

    bb0: {
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:103:13: 103:22

    bb0: {
        _2 = discriminant(((*_1).0: channel::Kind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:102:15: 102:21
        switchInt(move _2) -> [0_isize: bb2, 1_isize: bb2, 2_isize: bb3, 3_isize: bb3, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:102:9: 102:21
    }

        _1 = [const "pub fn probe() { let _ = ", const "; }"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
    bb1: {
                                         // mir::Constant
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:102:15: 102:21
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
    }

                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    bb2: {
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:103:42: 103:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:103:42: 103:46
    }

    bb3: {
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:104:42: 104:47
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:104:42: 104:47
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:106:6: 106:6
    }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:352:28: 352:62
}
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_expression_cfg(_1: &AutoCfg, _2: &str, _3: &str) -> () {

    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:357:32: 357:37
fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::is_dev(_1: &channel::Channel) -> bool {
    debug expr => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:357:39: 357:43
    debug cfg => _3;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:357:51: 357:54
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:357:62: 357:62
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:121:19: 121:24
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:121:29: 121:33
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:123:13: 123:22

    bb0: {
        _2 = discriminant(((*_1).0: channel::Kind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:122:15: 122:21
        switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:122:9: 122:21
    }

    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:12: 358:39
    bb1: {
    let mut _5: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:12: 358:39
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:34: 358:38
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:124:18: 124:23
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:124:18: 124:23
    }

    bb2: {
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:123:26: 123:30
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:123:26: 123:30
    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:359:13: 359:22
    }

    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:359:18: 359:21

    bb3: {
    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:126:6: 126:6
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:12: 358:39
    }
}

        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:34: 358:38
fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::is_nightly(_1: &channel::Channel) -> bool {
        _4 = AutoCfg::probe_expression(move _5, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:12: 358:39
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:141:23: 141:28
                                         // mir::Constant
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:141:33: 141:37
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:143:13: 143:26

    bb0: {
        _2 = discriminant(((*_1).0: channel::Kind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:142:15: 142:21
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:17: 358:33
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_expression}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        switchInt(move _2) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:142:9: 142:21
    }

    bb1: {
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:144:18: 144:23
        switchInt(move _4) -> [false: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:358:12: 358:39
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:144:18: 144:23
    }

    bb2: {
    }

    bb2: {
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:143:30: 143:34
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:143:30: 143:34
    }

    bb3: {
        _8 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:359:18: 359:21
        _7 = emit(move _8) -> bb3;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:359:13: 359:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:146:6: 146:6
    }
}

                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:359:13: 359:17
fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::is_beta(_1: &channel::Channel) -> bool {
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:161:20: 161:25
    }

    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:161:30: 161:34
    bb3: {
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:163:13: 163:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:361:6: 361:6

    bb0: {
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_constant(_1: &AutoCfg, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:370:27: 370:32
    debug expr => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:370:34: 370:38
        _2 = discriminant(((*_1).0: channel::Kind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:162:15: 162:21
        switchInt(move _2) -> [2_isize: bb2, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:162:9: 162:21
    }

    bb1: {
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:164:18: 164:23
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:164:18: 164:23
    }

    bb2: {
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:370:49: 370:53
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:163:27: 163:31
    let mut _3: std::result::Result<bool, error::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:9: 371:71
    let mut _4: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:9: 371:71
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:163:27: 163:31
    }

    bb3: {
    let mut _5: std::string::String;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:112:23: 115:6
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:166:6: 166:6
    }
}

    let _6: std::string::String;         // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:15:1: 187:2>::is_stable(_1: &channel::Channel) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:181:22: 181:27
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:181:32: 181:36
    let mut _8: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    let mut _9: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:183:13: 183:25

    bb0: {
    let _10: &[&str; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
        _2 = discriminant(((*_1).0: channel::Kind)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:182:15: 182:21
        switchInt(move _2) -> [3_isize: bb2, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:182:9: 182:21
    }

    bb1: {
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:184:18: 184:23
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:184:18: 184:23
    }

    bb2: {
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:183:29: 183:33
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:183:29: 183:33
    }

    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    bb3: {
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:186:6: 186:6
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:189:1: 193:2>::fmt(_1: &channel::Channel, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:190:12: 190:17
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
    let mut _16: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:190:19: 190:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:190:46: 190:57
    let mut _3: &mut std::fmt::Formatter; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
    let _17: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
    let mut _18: &[&str; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    scope 1 {
    let mut _4: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _5: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
    let mut _6: &[&str; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
        debug res => _6;                 // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:13: 113:16
    }

    bb0: {
    let _7: &[&str; 1];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
    let mut _8: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _9: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:9: 371:71
    let _10: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _18 = const AutoCfg::probe_constant::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
                                         // mir::Constant
    let _11: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _12: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(AutoCfg::probe_constant, [], Some(promoted[0])) }
    let mut _13: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
    let _14: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
    let _15: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
    let mut _16: &channel::Channel;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
    let mut _17: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23

        _10 = _18;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
        _17 = &_2;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
        _17 = const <channel::Channel as std::fmt::Display>::fmt::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<channel::Channel as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _7 = _17;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
        _15 = ArgumentV1::new_display::<&str>(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
                                         // mir::Constant
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
        _16 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
        _15 = channel::Channel::as_str(move _16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:65: 371:69
                                         // mir::Constant
                                         // + user_ty: UserType(1)
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:30: 191:36
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // + literal: Const { ty: for<'r> fn(&'r channel::Channel) -> &'static str {channel::Channel::as_str}, val: Value(Scalar(<ZST>)) }
    }
    }

    bb1: {

    bb1: {
        _14 = &_15;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
        _14 = [move _15];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _13 = _14;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
        _13 = &_14;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = _13;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _12 = ArgumentV1::new_display::<&str>(move _13) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:25: 191:38
                                         // + user_ty: UserType(1)
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _7 = Arguments::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:39: 113:79
        _11 = [move _12];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _10 = &_11;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _9 = _10;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + user_ty: UserType(0)
        _8 = move _9 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _4 = Arguments::new_v1(move _5, move _8) -> bb3; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    }

    bb2: {
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
        _6 = format(move _7) -> bb3;     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:80
    }

                                         // mir::Constant
    bb3: {
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:113:19: 113:38
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> String {format}, val: Value(Scalar(<ZST>)) }
        _0 = Formatter::write_fmt(move _3, move _4) -> bb4; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
    }

                                         // mir::Constant
    bb3: {
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:14: 500:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), std::fmt::Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:192:6: 192:6
    }
}

        _5 = move _6;                    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\alloc\src\macros.rs:114:9: 114:12
        _3 = AutoCfg::probe::<String>(move _4, move _5) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:9: 371:71
                                         // mir::Constant
promoted[0] in channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:189:1: 193:2>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:14: 371:19
                                         // + literal: Const { ty: for<'r> fn(&'r AutoCfg, String) -> Result<bool, error::Error> {AutoCfg::probe::<String>}, val: Value(Scalar(<ZST>)) }
    }

    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23

    bb0: {
    bb4: {
        _1 = [const ""];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = Result::<bool, error::Error>::unwrap_or(move _3, const false) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:9: 372:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:372:14: 372:23
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:191:19: 191:23
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::read::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:23: 24:39], _2: (Option<String>, Option<String>)) -> Option<String> {
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:28: 24:32
                                         // + literal: Const { ty: fn(Result<bool, error::Error>, bool) -> bool {Result::<bool, error::Error>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    scope 1 {
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:373:6: 373:6
    }
}

        debug date => _0;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:28: 24:32
    }

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::probe_constant: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    bb0: {
        _0 = move (_2.1: std::option::Option<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:28: 24:32

        drop((_2.0: std::option::Option<std::string::String>)) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:38: 24:39
    bb0: {
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:39: 24:39
    }
}

        _1 = [const "pub const PROBE: () = ((), ", const ").0;"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
                                         // mir::Constant
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::read::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48], _2: String) -> Option<date::Date> {
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:24: 25:28
    let mut _0: std::option::Option<date::Date>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:30: 25:30
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
    let mut _5: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
    let _6: &std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    bb0: {
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
                                         // mir::Constant
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:371:28: 371:63
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:131:1: 381:2>::emit_constant_cfg(_1: &AutoCfg, _2: &str, _3: &str) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:376:30: 376:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:42: 25:47
        _0 = date::Date::parse(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:30: 25:48
                                         // mir::Constant
    debug expr => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:376:37: 376:41
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:30: 25:41
    debug cfg => _3;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:376:49: 376:52
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:376:60: 376:60
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:12: 377:37
        drop(_2) -> bb3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:47: 25:48
    let mut _5: &AutoCfg;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:12: 377:37
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:32: 377:36
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:48: 25:48
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:47: 25:48
    }

    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:378:13: 378:22
    bb5 (cleanup): {
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:378:18: 378:21
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48
    }
}


    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:12: 377:37
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::read() -> Option<date::Date> {
    let mut _0: std::option::Option<date::Date>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:22:22: 22:34
    let mut _1: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:23:9: 24:40
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:32: 377:36
    let mut _2: std::option::Option<(std::option::Option<std::string::String>, std::option::Option<std::string::String>)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:23:9: 23:33
        _4 = AutoCfg::probe_constant(move _5, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:12: 377:37
                                         // mir::Constant
    let mut _3: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:23: 24:39]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:23: 24:39
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:17: 377:31
    let mut _4: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48

    bb0: {
        _2 = get_version_and_date() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:23:9: 23:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:23:9: 23:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r AutoCfg, &'s str) -> bool {AutoCfg::probe_constant}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
                                         // + literal: Const { ty: fn() -> Option<(Option<String>, Option<String>)> {get_version_and_date}, val: Value(Scalar(<ZST>)) }
    }
        switchInt(move _4) -> [false: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:377:12: 377:37
    }

    bb2: {

        _8 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:378:18: 378:21
    bb1: {
        _7 = emit(move _8) -> bb3;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:378:13: 378:22
        _1 = Option::<(Option<String>, Option<String>)>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:23: 24:39]>(move _2, move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:23:9: 24:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:14: 24:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:378:13: 378:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) {emit}, val: Value(Scalar(<ZST>)) }
                                         // + literal: Const { ty: fn(Option<(Option<String>, Option<String>)>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:23: 24:39]) -> Option<String> {Option::<(Option<String>, Option<String>)>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:24:23: 24:39]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = Option::<String>::and_then::<date::Date, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48]>(move _1, move _4) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:23:9: 25:49
                                         // mir::Constant
    }

    bb3: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:14: 25:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:380:6: 380:6
    }
}

fn mangle::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10], _2: char) -> char {
    debug c => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:15: 385:16
                                         // + literal: Const { ty: fn(Option<String>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48]) -> Option<date::Date> {Option::<String>::and_then::<date::Date, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:25:23: 25:48]>}, val: Value(Scalar(<ZST>)) }
    let mut _0: char;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:18: 385:18
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:26:6: 26:6
    }
}

date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::parse::{constant#0}: usize = {
    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:37: 386:46
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:52:30: 52:31

    bb0: {
    let mut _4: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:37: 386:46
    let mut _5: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:25: 386:34
    let mut _6: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:25: 386:34
        _0 = const 3_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:52:30: 52:31
    let mut _7: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:13: 386:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:52:30: 52:31
    }
}

    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:13: 386:22

    bb0: {
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::parse::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67], _2: &str) -> Result<u16, ParseIntError> {
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:48: 53:49
    let mut _0: std::result::Result<u16, std::num::ParseIntError>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:51: 53:51
        _7 = Le(const 'A', _2);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:13: 386:22
        switchInt(move _7) -> [false: bb2, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:13: 386:22
    }

    bb1: {
        _8 = Le(_2, const 'Z');          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:13: 386:22
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:51: 53:67

    bb0: {
        _3 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:51: 53:67
        _0 = core::str::<impl str>::parse::<u16>(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:51: 53:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:53: 53:58
                                         // + user_ty: UserType(0)
        switchInt(move _8) -> [false: bb2, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:13: 386:22
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Result<u16, <u16 as FromStr>::Err> {core::str::<impl str>::parse::<u16>}, val: Value(Scalar(<ZST>)) }
    }

    }

    bb2: {
    bb1: {
        _5 = Le(const 'a', _2);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:25: 386:34
        switchInt(move _5) -> [false: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:25: 386:34
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:67: 53:67
    }

    }
    bb3: {
        _6 = Le(_2, const 'z');          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:25: 386:34
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::parse(_1: &str) -> Option<date::Date> {
    debug date => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:51:18: 51:22
    let mut _0: std::option::Option<date::Date>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:51:33: 51:45
    let mut _2: [u16; 3];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:52:13: 52:20
        switchInt(move _6) -> [false: bb4, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:25: 386:34
    }

    bb4: {
        _3 = Le(const '0', _2);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:37: 386:46
    let mut _3: std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
    let mut _4: std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        switchInt(move _3) -> [false: bb6, otherwise: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:37: 386:46
    let mut _5: std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:68
    }

    bb5: {
        _4 = Le(_2, const '9');          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:37: 386:46
    let mut _6: std::str::Split<char>;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:42
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:42
    let mut _8: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67
    let mut _10: std::option::Option<(usize, std::result::Result<u16, std::num::ParseIntError>)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        switchInt(move _4) -> [false: bb6, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:37: 386:46
    }
    let mut _11: &mut std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
    let mut _12: &mut std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80

    let mut _13: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:9: 58:10
    let mut _16: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:22: 57:14
    bb6: {
        _0 = const '_';                  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:387:18: 387:21
        goto -> bb8;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:387:18: 387:21
    }

    let mut _17: (usize, std::result::Result<u16, std::num::ParseIntError>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:28: 54:38
    bb7: {
    let mut _18: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:29: 54:30
        _0 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:50: 386:51
        goto -> bb8;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:386:50: 386:51
    let mut _19: std::result::Result<u16, std::num::ParseIntError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:32: 54:37
    }

    let mut _20: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:55:30: 55:36
    bb8: {
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:17: 54:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:388:10: 388:10
    }
}

    let mut _23: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:13: 54:19
    let mut _24: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:13: 54:19
    let mut _28: (u16, u16, u16);        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:34: 60:58
fn mangle(_1: &str) -> String {
    let mut _29: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:35: 60:41
    let _30: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:39: 60:40
    let mut _31: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:43: 60:49
    debug s => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:383:11: 383:12
    let mut _0: std::string::String;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:383:23: 383:29
    let _32: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:47: 60:48
    let mut _2: std::iter::Map<std::str::Chars, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 388:11
    let mut _3: std::str::Chars;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 384:14
    let mut _33: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:51: 60:57
    let _34: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:55: 60:56
    let mut _35: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
    let mut _36: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:61
    let mut _37: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:49
    let mut _38: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:35
    let mut _39: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:16
    let mut _40: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:25: 61:35
    let mut _41: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:25: 61:30
    let mut _42: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:39: 61:49
    let mut _43: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:39: 61:44
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 384:14
    let mut _5: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10

    bb0: {
    let mut _44: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:53: 61:61
    let mut _45: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:53: 61:56
    let mut _46: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:65: 61:73
    let mut _47: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:65: 61:68
    let mut _48: date::Date;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:14: 65:58
    let mut _49: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:29: 65:33
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 384:14
        _3 = core::str::<impl str>::chars(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 384:14
                                         // mir::Constant
    let mut _50: u8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:35: 65:46
    let mut _51: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:35: 65:40
    let mut _52: u8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:48: 65:57
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:7: 384:12
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Chars<'r> {core::str::<impl str>::chars}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    let mut _53: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:48: 65:51
    scope 1 {
        debug ymd => _2;                 // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:52:13: 52:20
        _2 = <Chars as Iterator>::map::<char, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]>(move _3, move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 388:11
                                         // mir::Constant
        let mut _9: std::iter::Enumerate<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        let _25: u16;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:14: 60:18
        let _26: u16;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:20: 60:25
        let _27: u16;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:27: 60:30
        scope 2 {
            debug iter => _9;            // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:10: 385:13
            let _14: usize;              // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:14: 53:15
            let _15: std::result::Result<u16, std::num::ParseIntError>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:17: 53:22
            scope 3 {
                debug i => _14;          // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:14: 53:15
                debug split => _15;      // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:17: 53:22
                                         // + literal: Const { ty: fn(Chars, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]) -> Map<Chars, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]> {<Chars as Iterator>::map::<char, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]>}, val: Value(Scalar(<ZST>)) }
                let _21: u16;            // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:56:24: 56:25
    }

                scope 4 {
    bb2: {
        _0 = <Map<Chars, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]> as Iterator>::collect::<String>(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:384:5: 389:19
                    debug v => _21;      // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:56:24: 56:25
                }
            }
                                         // mir::Constant
        }
        scope 5 {
            debug year => _25;           // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:14: 60:18
            debug month => _26;          // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:20: 60:25
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:389:10: 389:17
            debug day => _27;            // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:27: 60:30
        }
    }

    bb0: {
        _2 = [const 0_u16; 3];           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:52:23: 52:32
        _7 = _1;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:42
        _6 = core::str::<impl str>::split::<char>(move _7, const '-') -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:42
                                         // + literal: Const { ty: fn(Map<Chars, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]>) -> String {<Map<Chars, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:385:14: 388:10]> as Iterator>::collect::<String>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:32: 53:37
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {

    bb3: {
        _5 = <std::str::Split<char> as Iterator>::map::<Result<u16, ParseIntError>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>(move _6, move _8) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:43: 53:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:390:2: 390:2
    }
}

fn dir_contains_target::{closure#0}::{closure#0}::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:37: 403:63]) -> PathBuf {
                                         // + literal: Const { ty: fn(std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]) -> Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]> {<std::str::Split<char> as Iterator>::map::<Result<u16, ParseIntError>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _4 = <Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]> as Iterator>::enumerate(move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
                                         // mir::Constant
    let mut _0: std::path::PathBuf;      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:40: 403:40

    bb0: {
        _0 = <PathBuf as From<&str>>::from(const "target") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:40: 403:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:69: 53:78
                                         // + literal: Const { ty: fn(Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>) -> Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> {<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]> as Iterator>::enumerate}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:40: 403:53
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> PathBuf {<PathBuf as From<&str>>::from}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
        _3 = <Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> as IntoIterator>::into_iter(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:54: 403:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:63: 403:63
    }
}

                                         // + literal: Const { ty: fn(Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>) -> <Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> as IntoIterator>::IntoIter {<Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _9 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
fn dir_contains_target::{closure#0}::{closure#0}::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76], _2: &str) -> bool {
        goto -> bb5;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:9: 58:10
    debug cargo_target_dir => _2;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:27: 408:43
    }

    bb5: {
    debug dir => (*(_1.0: &&str));       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:36: 400:39
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:45: 408:45
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:45: 408:76
        _12 = &mut _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        _11 = &mut (*_12);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        _10 = <Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> as Iterator>::next(move _11) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
    let mut _4: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:58: 408:75
    let mut _5: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76

    bb0: {
                                         // + literal: Const { ty: for<'r> fn(&'r mut Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>>) -> Option<<Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> as Iterator>::Item> {<Enumerate<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:47: 53:67]>> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _5 = move (_1.0: &&str);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:45: 408:76
        _13 = discriminant(_10);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        switchInt(move _13) -> [0_isize: bb9, 1_isize: bb7, otherwise: bb8]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
        _6 = move (*_5);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:45: 408:76
        _3 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:45: 408:76
        _4 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:58: 408:75
    }

        _0 = core::str::<impl str>::contains::<&&str>(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:45: 408:76
    bb7: {
                                         // mir::Constant
        _14 = (((_10 as Some).0: (usize, std::result::Result<u16, std::num::ParseIntError>)).0: usize); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:14: 53:15
        _15 = move (((_10 as Some).0: (usize, std::result::Result<u16, std::num::ParseIntError>)).1: std::result::Result<u16, std::num::ParseIntError>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:17: 53:22
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:49: 408:57
        _18 = _14;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:29: 54:30
        _19 = move _15;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:32: 54:37
        Deinit(_17);                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:28: 54:38
                                         // + literal: Const { ty: fn(&str, &&str) -> bool {core::str::<impl str>::contains::<&&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:76: 408:76
    }
}

        (_17.0: usize) = move _18;       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:28: 54:38
        (_17.1: std::result::Result<u16, std::num::ParseIntError>) = move _19; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:28: 54:38
        switchInt((_17.0: usize)) -> [3_usize: bb13, otherwise: bb10]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:22: 54:38
fn dir_contains_target::{closure#0}::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14], _2: &str) -> Option<bool> {
    debug dir => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:36: 400:39
    }

    bb8: {
        unreachable;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:27: 53:80
    }

    bb9: {
        _30 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:39: 60:40
    debug cargo_target_dir => (_1.0: std::option::Option<std::ffi::OsString>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:395:5: 395:21
    debug target => (*(_1.1: &&std::ffi::OsString)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:20: 399:26
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:41: 400:41
        _29 = _2[_30];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:35: 60:41
    let mut _3: std::path::PathBuf;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:21: 401:41
        _32 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:47: 60:48
        _31 = _2[_32];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:43: 60:49
        _34 = const 2_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:55: 60:56
        _33 = _2[_34];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:51: 60:57
        Deinit(_28);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:34: 60:58
    let mut _4: std::option::Option<std::path::PathBuf>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:44: 402:40
    let mut _5: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:44: 401:60
        (_28.0: u16) = move _29;         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:34: 60:58
        (_28.1: u16) = move _31;         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:34: 60:58
        (_28.2: u16) = move _33;         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:34: 60:58
        _25 = (_28.0: u16);              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:14: 60:18
        _26 = (_28.1: u16);              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:20: 60:25
        _27 = (_28.2: u16);              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:60:27: 60:30
    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:37: 403:63]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:37: 403:63
    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:17: 404:46
        _39 = _25;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:16
        switchInt(move _39) -> [0_u16: bb24, otherwise: bb25]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:35
    let mut _8: &mut std::path::PathBuf; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:17: 404:46
    }

    bb10: {
        _20 = discriminant((_17.1: std::result::Result<u16, std::num::ParseIntError>)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:28: 54:38
        switchInt(move _20) -> [0_isize: bb11, 1_isize: bb13, otherwise: bb12]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:22: 54:38
    }

    bb11: {
        _21 = (((_17.1: std::result::Result<u16, std::num::ParseIntError>) as Ok).0: u16); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:56:24: 56:25
    let mut _9: &std::ffi::OsString;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:39: 404:45
    let mut _10: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
        _16 = _21;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:56:31: 56:32
        _22 = _14;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:17: 54:18
        _23 = const 3_usize;             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:13: 54:19
        _24 = Lt(_22, _23);              // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:13: 54:19
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb14; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:13: 54:19
    }

    let mut _11: &std::path::Path;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
    let _12: &std::path::Path;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
    let mut _13: &std::path::PathBuf;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
    bb12: {
        unreachable;                     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:28: 54:38
    }

    bb13: {
    let mut _14: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76
    let mut _15: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:55:48: 55:52
        discriminant(_0) = 0;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:55:48: 55:52
        goto -> bb30;                    // scope 1 at no-location
    }

    bb14: {
        _2[_22] = move _16;              // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:54:13: 57:14
        goto -> bb5;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:53:9: 58:10
    let mut _16: &&std::ffi::OsString;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
    }

    scope 1 {
    bb15: {
        debug cargo_target_dir => _3;    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:21: 401:41
    }

    bb0: {
        _5 = move (_1.0: std::option::Option<std::ffi::OsString>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:44: 401:60
        _4 = Option::<OsString>::map::<PathBuf, fn(OsString) -> PathBuf {<PathBuf as From<OsString>>::from}>(move _5, <PathBuf as From<OsString>>::from) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:44: 402:40
        _35 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
        goto -> bb17;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
    }

    bb16: {
                                         // mir::Constant
        _47 = _27;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:65: 61:68
        _46 = Gt(move _47, const 31_u16); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:65: 61:73
        _35 = move _46;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:402:22: 402:25
        goto -> bb17;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
    }

    bb17: {
                                         // + literal: Const { ty: fn(Option<OsString>, fn(OsString) -> PathBuf {<PathBuf as From<OsString>>::from}) -> Option<PathBuf> {Option::<OsString>::map::<PathBuf, fn(OsString) -> PathBuf {<PathBuf as From<OsString>>::from}>}, val: Value(Scalar(<ZST>)) }
        switchInt(move _35) -> [false: bb28, otherwise: bb27]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
    }

    bb18: {
        _36 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:61
        goto -> bb20;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:61
    }

    bb19: {
                                         // mir::Constant
        _45 = _27;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:53: 61:56
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:402:26: 402:39
        _44 = Eq(move _45, const 0_u16); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:53: 61:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(OsString) -> PathBuf {<PathBuf as From<OsString>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _36 = move _44;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:61
        goto -> bb20;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:61
    }

    bb20: {
        switchInt(move _36) -> [false: bb16, otherwise: bb15]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:73
    }
        _3 = Option::<PathBuf>::unwrap_or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:37: 403:63]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:401:44: 403:64
                                         // mir::Constant

    bb21: {
        _37 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:49
        goto -> bb23;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:49
    }

    bb22: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:22: 403:36
        _43 = _26;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:39: 61:44
        _42 = Gt(move _43, const 12_u16); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:39: 61:49
        _37 = move _42;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:49
        goto -> bb23;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:49
    }
                                         // + literal: Const { ty: fn(Option<PathBuf>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:37: 403:63]) -> PathBuf {Option::<PathBuf>::unwrap_or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:403:37: 403:63]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {

    bb23: {
        switchInt(move _37) -> [false: bb19, otherwise: bb18]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:61
    }

    bb24: {
        _8 = &mut _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:17: 404:46
        _16 = move (_1.1: &&std::ffi::OsString); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:39: 404:45
        _9 = (*_16);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:39: 404:45
        _38 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:35
        goto -> bb26;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:35
    }

    bb25: {
        _41 = _26;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:25: 61:30
        _40 = Eq(move _41, const 0_u16); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:25: 61:35
        _7 = PathBuf::push::<&OsString>(move _8, move _9) -> [return: bb3, unwind: bb8]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:17: 404:46
        _38 = move _40;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:35
        goto -> bb26;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:35
    }

    bb26: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:404:34: 404:38
                                         // + literal: Const { ty: for<'r> fn(&'r mut PathBuf, &OsString) {PathBuf::push::<&OsString>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _13 = &_3;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
        switchInt(move _38) -> [false: bb22, otherwise: bb21]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:61:12: 61:49
    }

    bb27: {
        Deinit(_0);                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:62:20: 62:24
        discriminant(_0) = 0;            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:62:20: 62:24
        goto -> bb30;                    // scope 1 at no-location
    }

        _12 = <PathBuf as Deref>::deref(move _13) -> [return: bb4, unwind: bb8]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
    bb28: {
                                         // mir::Constant
        _49 = _25;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:29: 65:33
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
        _51 = _26;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:35: 65:40
                                         // + literal: Const { ty: for<'r> fn(&'r PathBuf) -> &'r <PathBuf as Deref>::Target {<PathBuf as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

        _50 = move _51 as u8 (Misc);     // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:35: 65:46
    bb4: {
        _53 = _27;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:48: 65:51
        _52 = move _53 as u8 (Misc);     // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:48: 65:57
        _11 = _12;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
        _48 = date::Date::from_ymd(move _49, move _50, move _52) -> bb29; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:14: 65:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:14: 65:28
        _10 = Path::to_str(move _11) -> [return: bb5, unwind: bb8]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 407:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:407:22: 407:28
                                         // + literal: Const { ty: fn(u16, u8, u8) -> date::Date {date::Date::from_ymd}, val: Value(Scalar(<ZST>)) }
    }

    bb29: {
        Deinit(_0);                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:9: 65:59
        ((_0 as Some).0: date::Date) = move _48; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:9: 65:59
        discriminant(_0) = 1;            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:65:9: 65:59
                                         // + literal: Const { ty: for<'r> fn(&'r Path) -> Option<&'r str> {Path::to_str}, val: Value(Scalar(<ZST>)) }
        goto -> bb30;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:66:6: 66:6
    }
    }

    bb30: {

        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:66:6: 66:6
    }
}

    bb5: {
        _15 = &_2;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76
        Deinit(_14);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::from_ymd(_1: u16, _2: u8, _3: u8) -> date::Date {
    debug year => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:86:21: 86:25
        (_14.0: &&str) = move _15;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76
    debug month => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:86:32: 86:37
    debug day => _3;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:86:43: 86:46
        _0 = Option::<&str>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76]>(move _10, move _14) -> [return: bb6, unwind: bb8]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:406:17: 408:77
    let mut _0: date::Date;              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:86:55: 86:59
    let _4: u32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:13: 87:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:22: 408:25
    let mut _5: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:20: 87:33
    let mut _6: u16;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:21: 87:25
    let mut _7: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:20: 87:38
    let mut _9: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:21: 88:43
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:22: 88:36
    let mut _11: u8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:23: 88:28
                                         // + literal: Const { ty: fn(Option<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76]) -> Option<bool> {Option::<&str>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:408:26: 408:76]>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
    let mut _12: (u32, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:21: 88:48
    let mut _14: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:19: 89:31
    let mut _15: u8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:20: 89:23
        drop(_3) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:409:13: 409:14
    let mut _16: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:14: 90:32
    let mut _17: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:14: 90:26
    let mut _18: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:14: 90:18
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:409:14: 409:14
    }

    bb8 (cleanup): {
    let mut _19: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:21: 90:26
    let mut _20: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:29: 90:32
    scope 1 {
        debug year => _4;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:13: 87:17
        let _8: u32;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:13: 88:18
        drop(_3) -> bb9;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:409:13: 409:14
        scope 2 {
            debug month => _8;           // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:13: 88:18
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
    }
}

            let _13: u32;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:13: 89:16
            scope 3 {
                debug day => _13;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:13: 89:16
            }
        }
    }

fn dir_contains_target::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10], _2: &OsString) -> Option<bool> {
    bb0: {
    debug target => _2;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:20: 399:26
        _6 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:21: 87:25
        _5 = move _6 as u32 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:20: 87:33
        _7 = CheckedShl(_5, const 9_i32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:20: 87:38
        assert(!move (_7.1: bool), "attempt to shift left by `{}`, which would overflow", const 9_i32) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:20: 87:38
    }

    debug dir => (*(_1.0: &&std::path::Path)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:394:5: 394:8
    bb1: {
        _4 = move (_7.0: u32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:87:20: 87:38
        _11 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:23: 88:28
        _10 = move _11 as u32 (Misc);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:22: 88:36
        _9 = BitAnd(move _10, const 15_u32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:21: 88:43
    debug cargo_target_dir => (_1.1: std::option::Option<std::ffi::OsString>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:395:5: 395:21
        _12 = CheckedShl(_9, const 5_i32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:21: 88:48
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:28: 399:28
        assert(!move (_12.1: bool), "attempt to shift left by `{}`, which would overflow", const 5_i32) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:21: 88:48
    let mut _3: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
    }

    bb2: {
        _8 = move (_12.0: u32);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:88:21: 88:48
    let mut _4: &std::path::Path;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
        _15 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:20: 89:23
        _14 = move _15 as u32 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:19: 89:31
    let mut _5: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
    let mut _6: &&std::ffi::OsString;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
        _13 = BitAnd(move _14, const 31_u32); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:89:19: 89:38
        _18 = _4;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:14: 90:18
        _19 = _8;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:21: 90:26
        _17 = BitOr(move _18, move _19); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:14: 90:26
        _20 = _13;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:29: 90:32
        _16 = BitOr(move _17, move _20); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:14: 90:32
    let mut _7: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:410:9: 410:10
    let mut _8: &&std::path::Path;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    let mut _9: &std::path::Path;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10

    bb0: {
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:9: 90:33
        (_0.0: u32) = move _16;          // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:90:9: 90:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:91:6: 91:6
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::to_ymd(_1: &date::Date) -> (u16, u8, u8) {
        _7 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
        _7 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
        _8 = move (_1.0: &&std::path::Path); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:94:15: 94:20
    let mut _0: (u16, u8, u8);           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:94:25: 94:38
        _9 = move (*_8);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
        _4 = _9;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
        _3 = Path::to_str(move _4) -> [return: bb1, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 400:25
    let _2: u32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:13: 95:14
    let mut _3: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:17: 95:23
    let mut _4: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:17: 95:28
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:17: 96:30
    let mut _7: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:18: 96:24
    let mut _8: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:17: 96:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:17: 400:23
                                         // + literal: Const { ty: for<'r> fn(&'r Path) -> Option<&'r str> {Path::to_str}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:97:17: 97:23
    let mut _11: u16;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:10: 98:18
    let mut _12: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:10: 98:11
    let mut _13: u8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:20: 98:27
    let mut _14: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:20: 98:21
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
    let mut _15: u8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:29: 98:36
        _7 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
    let mut _16: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:29: 98:30
        (_5.0: std::option::Option<std::ffi::OsString>) = move (_1.1: std::option::Option<std::ffi::OsString>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
    scope 1 {
        (_5.1: &&std::ffi::OsString) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14
        debug y => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:13: 95:14
        let _5: u32;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:13: 96:14
        scope 2 {
            debug m => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:13: 96:14
            let _9: u32;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:97:13: 97:14
            scope 3 {
        _0 = Option::<&str>::and_then::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14]>(move _3, move _5) -> [return: bb2, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:13: 409:15
                                         // mir::Constant
                debug d => _9;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:97:13: 97:14
            }
        }
    }

    bb0: {
        _3 = ((*_1).0: u32);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:17: 95:23
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:26: 400:34
        _4 = CheckedShr(_3, const 9_i32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:17: 95:28
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", const 9_i32) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:17: 95:28
    }

    bb1: {
        _2 = move (_4.0: u32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:95:17: 95:28
                                         // + literal: Const { ty: fn(Option<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14]) -> Option<bool> {Option::<&str>::and_then::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:400:35: 409:14]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _7 = ((*_1).0: u32);             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:18: 96:24
        _8 = CheckedShr(_7, const 5_i32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:17: 96:30
        assert(!move (_8.1: bool), "attempt to shift right by `{}`, which would overflow", const 5_i32) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:17: 96:30
    }

    bb2: {
        _6 = move (_8.0: u32);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:17: 96:30
        _5 = BitAnd(move _6, const 15_u32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:96:17: 96:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:410:10: 410:10
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    }

    bb4 (cleanup): {
        _10 = ((*_1).0: u32);            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:97:17: 97:23
        _9 = BitAnd(move _10, const 31_u32); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:97:17: 97:30
        _12 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:10: 98:11
        _11 = move _12 as u16 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:10: 98:18
        _14 = _5;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:20: 98:21
        _13 = move _14 as u8 (Misc);     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:20: 98:27
        drop((_1.1: std::option::Option<std::ffi::OsString>)) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:410:9: 410:10
    }

    bb5 (cleanup): {
        switchInt(_7) -> [false: bb3, otherwise: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:410:9: 410:10
    }
}

fn dir_contains_target(_1: &Option<OsString>, _2: &Path, _3: Option<OsString>) -> bool {
        _16 = _9;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:29: 98:30
        _15 = move _16 as u8 (Misc);     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:29: 98:36
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:9: 98:37
        (_0.0: u16) = move _11;          // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:9: 98:37
        (_0.1: u8) = move _13;           // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:9: 98:37
        (_0.2: u8) = move _15;           // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:98:9: 98:37
    debug target => _1;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:393:5: 393:11
    debug dir => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:394:5: 394:8
    debug cargo_target_dir => _3;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:395:5: 395:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:99:6: 99:6
    }
}

    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:396:6: 396:10
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::at_least::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38], _2: date::Date) -> bool {
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:19: 122:23
    debug self => (*(_1.0: &&date::Date)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:120:21: 120:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:25: 122:25
    let mut _4: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 410:11
    let mut _5: std::option::Option<&std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 398:18
    let mut _3: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:25: 122:29
    let mut _6: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 398:18
    let mut _7: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    let mut _4: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:33: 122:38
    let _5: &date::Date;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:33: 122:38
    let _6: &date::Date;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:33: 122:38
    let mut _7: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38

    bb0: {
        _7 = move (_1.0: &&date::Date);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:25: 122:29
    let mut _8: &&std::path::Path;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:412:1: 412:2

    bb0: {
        _9 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 410:11
        _3 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:25: 122:29
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:33: 122:38
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:33: 122:38
        _9 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 410:11
        _4 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:33: 122:38
        _6 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 398:18
        _0 = <&date::Date as PartialOrd>::ge(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:25: 122:38
        _5 = Option::<OsString>::as_ref(move _6) -> [return: bb1, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 398:18
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:398:10: 398:16
                                         // + literal: Const { ty: for<'r> fn(&'r Option<OsString>) -> Option<&'r OsString> {Option::<OsString>::as_ref}, val: Value(Scalar(<ZST>)) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:25: 122:38
    }

                                         // + literal: Const { ty: for<'r, 's> fn(&'r &date::Date, &'s &date::Date) -> bool {<&date::Date as PartialOrd>::ge}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:38: 122:38
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::at_least(_1: &date::Date, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:120:21: 120:26
        _8 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
        _9 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
        Deinit(_7);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:120:28: 120:32
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:120:43: 120:47
        (_7.0: &&std::path::Path) = move _8; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    let mut _3: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:9: 122:39
        (_7.1: std::option::Option<std::ffi::OsString>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10
    let mut _4: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:9: 121:26
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:21: 121:25
        _4 = Option::<&OsString>::and_then::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10]>(move _5, move _7) -> [return: bb2, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 410:11
                                         // mir::Constant
    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38
    let mut _7: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:21: 121:25
        _4 = date::Date::parse(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:9: 121:26
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:10: 399:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:9: 121:20
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
                                         // + literal: Const { ty: fn(Option<&OsString>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10]) -> Option<bool> {Option::<&OsString>::and_then::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:399:19: 410:10]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    }

    bb2: {
        _7 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38
        (_6.0: &&date::Date) = move _7;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38
        _3 = Option::<date::Date>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:9: 122:39
        _0 = Option::<bool>::unwrap_or(move _4, const false) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:397:5: 411:26
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:411:10: 411:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:14: 122:17
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
                                         // + literal: Const { ty: fn(Option<date::Date>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38]) -> Option<bool> {Option::<date::Date>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:122:18: 122:38]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:121:9: 123:30
                                         // mir::Constant
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:412:2: 412:2
    }

    bb4 (cleanup): {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:123:14: 123:23
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:392:1: 412:2
    }

    bb5 (cleanup): {
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        drop(_3) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:412:1: 412:2
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:124:6: 124:6
    }
    }

}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::at_most::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38], _2: date::Date) -> bool {
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:19: 147:23
    bb6 (cleanup): {
    debug self => (*(_1.0: &&date::Date)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:145:20: 145:25
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:25: 147:25
    let mut _3: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:25: 147:29
    let mut _4: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:33: 147:38
        switchInt(_9) -> [false: bb4, otherwise: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:412:1: 412:2
    let _5: &date::Date;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:33: 147:38
    }
    let _6: &date::Date;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:33: 147:38
}

fn rustflags::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42], _2: &&str) -> bool {
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:26: 446:27
    let mut _7: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38

    bb0: {
        _7 = move (_1.0: &&date::Date);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:25: 147:29
        _3 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:25: 147:29
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:29: 446:29
    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:30: 446:42
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:30: 446:42
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:33: 147:38
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:33: 147:38
        _4 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:33: 147:38
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:26: 446:27

    bb0: {
        _5 = move (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:30: 446:42
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:30: 446:42
        _0 = <&date::Date as PartialOrd>::le(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:25: 147:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:25: 147:38
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &date::Date, &'s &date::Date) -> bool {<&date::Date as PartialOrd>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:38: 147:38
    }
}

        _3 = core::str::<impl str>::is_empty(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:30: 446:42
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::at_most(_1: &date::Date, _2: &str) -> bool {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:32: 446:40
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:145:20: 145:25
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:145:27: 145:31
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:145:42: 145:46
    let mut _3: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:9: 147:39
    let mut _4: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:9: 146:26
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> bool {core::str::<impl str>::is_empty}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:29: 446:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:42: 446:42
    }
}

    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:21: 146:25
    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38
    let mut _7: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:21: 146:25
fn rustflags(_1: &Option<OsString>, _2: &Path) -> Vec<String> {
        _4 = date::Date::parse(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:9: 146:26
    debug target => _1;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:414:14: 414:20
                                         // mir::Constant
    debug dir => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:414:41: 414:44
    let mut _0: std::vec::Vec<std::string::String>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:414:56: 414:67
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:9: 146:20
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38
        (_6.0: &&date::Date) = move _7;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38
    let mut _3: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:20: 420:55
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:12: 420:17
    let _5: std::string::String;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:15: 420:16
    let mut _6: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:421:19: 421:31
        _3 = Option::<date::Date>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:9: 147:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:14: 147:17
                                         // + literal: Const { ty: fn(Option<date::Date>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38]) -> Option<bool> {Option::<date::Date>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:147:18: 147:38]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
    let mut _7: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:421:19: 421:31
    let mut _8: std::iter::Map<std::str::Split<char>, for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:48
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:146:9: 148:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:148:14: 148:23
    let mut _9: std::str::Split<char>;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:149:6: 149:6
    }
}

    let mut _12: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
    let mut _13: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
    let mut _14: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 437:38
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::exactly::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38], _2: date::Date) -> bool {
    let mut _15: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 437:15
    let mut _16: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:19: 437:38
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:19: 172:23
    debug self => (*(_1.0: &&date::Date)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:170:20: 170:25
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:25: 172:25
    let mut _3: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:25: 172:29
    let _17: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:19: 437:38
    let mut _18: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:12: 438:77
    let mut _4: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:33: 172:38
    let _5: &date::Date;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:33: 172:38
    let mut _6: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38

    bb0: {
        _6 = move (_1.0: &&date::Date);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:25: 172:29
    let mut _19: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:32: 438:38
        _3 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:25: 172:29
    let mut _20: &std::path::Path;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:40: 438:43
        _5 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:33: 172:38
    let mut _21: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:45: 438:76
    let mut _22: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:32: 440:53
        _4 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:33: 172:38
        _0 = <&date::Date as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:25: 172:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:25: 172:38
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &date::Date, &'s &date::Date) -> bool {<&date::Date as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:38: 172:38
    let mut _23: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:16: 440:29
    }
    let _24: std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:19: 440:28
}

    let mut _25: std::iter::Map<std::iter::Filter<std::iter::Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>, for<'r> fn(&'r str) -> std::string::String {<str as std::string::ToString>::to_string}>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 447:37
fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:8:1: 175:2>::exactly(_1: &date::Date, _2: &str) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:170:20: 170:25
    debug date => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:170:27: 170:31
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:170:42: 170:46
    let mut _3: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:9: 172:39
    let mut _4: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:9: 171:26
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:21: 171:25
    let mut _26: std::iter::Filter<std::iter::Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 446:43
    let mut _6: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38
    let mut _7: &&date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:21: 171:25
    let mut _27: std::iter::Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 445:32
        _4 = date::Date::parse(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:9: 171:26
                                         // mir::Constant
    let mut _28: std::str::Split<char>;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:9: 171:20
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38
    let mut _29: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
        (_6.0: &&date::Date) = move _7;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38
    let _30: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
    let mut _31: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
        _3 = Option::<date::Date>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38]>(move _4, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:9: 172:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:14: 172:17
    let mut _32: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42
    let mut _33: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
                                         // + literal: Const { ty: fn(Option<date::Date>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38]) -> Option<bool> {Option::<date::Date>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:172:18: 172:38]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:171:9: 173:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:173:14: 173:23
                                         // + literal: Const { ty: fn(Option<bool>, bool) -> bool {Option::<bool>::unwrap_or}, val: Value(Scalar(<ZST>)) }
    let mut _34: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    let mut _35: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
    bb3: {
    let mut _36: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    scope 1 {
        debug a => _5;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:15: 420:16
    }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:174:6: 174:6
    scope 2 {
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:177:1: 182:2>::fmt(_1: &date::Date, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
        debug rustflags => _24;          // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:19: 440:28
    }

    bb0: {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:178:12: 178:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:178:19: 178:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:178:46: 178:57
        _3 = var::<&str>(const "CARGO_ENCODED_RUSTFLAGS") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:20: 420:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:20: 420:28
    let _3: u16;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:14: 179:15
    let _4: u8;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:17: 179:18
    let _5: u8;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:20: 179:21
    let mut _6: (u16, u8, u8);           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:25: 179:38
    let mut _7: &date::Date;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:25: 179:38
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:29: 420:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
    let mut _9: std::fmt::Arguments;     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _10: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
    let mut _11: &[&str; 3];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
    let _12: &[&str; 3];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
    let mut _13: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _14: &[std::fmt::ArgumentV1; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _4 = discriminant(_3);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:12: 420:17
        switchInt(move _4) -> [0_isize: bb2, otherwise: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:12: 420:17
    }

    bb2: {
    let _15: &[std::fmt::ArgumentV1; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _5 = move ((_3 as Ok).0: std::string::String); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:420:15: 420:16
        _7 = &_5;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:421:19: 421:31
    let _16: [std::fmt::ArgumentV1; 3];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _17: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
    let mut _18: &u16;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
    let _19: &u16;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
    let mut _20: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
        _6 = String::is_empty(move _7) -> [return: bb3, unwind: bb36]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:421:19: 421:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:421:21: 421:29
    let mut _21: &u8;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
    let _22: &u8;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
    let mut _23: std::fmt::ArgumentV1;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
    let mut _24: &u8;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
    let _25: &u8;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
    let mut _26: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> bool {String::is_empty}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        switchInt(move _6) -> [false: bb5, otherwise: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:421:19: 421:31
    }

    let mut _27: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    bb4: {
    let _28: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _29: core::fmt::UnsafeArg;   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    scope 1 {
        debug y => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:14: 179:15
        debug m => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:17: 179:18
        debug d => _5;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:20: 179:21
        _0 = Vec::<String>::new() -> [return: bb44, unwind: bb36]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:422:13: 422:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:422:13: 422:21
                                         // + user_ty: UserType(0)
        let mut _30: &[std::fmt::rt::v1::Argument; 3]; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        let mut _31: &[&str; 3];         // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
        scope 2 {
        }
    }

    bb0: {
                                         // + literal: Const { ty: fn() -> Vec<String> {Vec::<String>::new}, val: Value(Scalar(<ZST>)) }
        _7 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:25: 179:38
        _6 = date::Date::to_ymd(move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:25: 179:38
                                         // mir::Constant
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:30: 179:36

    bb5: {
        _12 = &_5;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb36]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
                                         // + literal: Const { ty: for<'r> fn(&'r date::Date) -> (u16, u8, u8) {date::Date::to_ymd}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    }
        _3 = (_6.0: u16);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:14: 179:15
        _4 = (_6.1: u8);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:17: 179:18
        _5 = (_6.2: u8);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:179:20: 179:21

    bb6: {
        _8 = &mut (*_2);                 // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
        _31 = const <date::Date as std::fmt::Display>::fmt::promoted[1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
        _10 = _11;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
        _9 = core::str::<impl str>::split::<char>(move _10, const '\u{1f}') -> [return: bb7, unwind: bb36]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:28
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(<date::Date as std::fmt::Display>::fmt, [], Some(promoted[1])) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:15: 424:20
        _12 = _31;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
        _11 = _12;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
    }

    bb7: {
        _19 = &_3;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
        _18 = _19;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
        _8 = <std::str::Split<char> as Iterator>::map::<String, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}>(move _9, <str as ToString>::to_string) -> [return: bb8, unwind: bb36]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:48
        _17 = ArgumentV1::new_display::<u16>(move _18) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:37: 180:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u16) -> ArgumentV1<'b> {ArgumentV1::new_display::<u16>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:29: 424:32
        _22 = &_4;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
        _21 = _22;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
                                         // + literal: Const { ty: fn(std::str::Split<char>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}) -> Map<std::str::Split<char>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}> {<std::str::Split<char> as Iterator>::map::<String, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}>}, val: Value(Scalar(<ZST>)) }
        _20 = ArgumentV1::new_display::<u8>(move _21) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:40: 180:41
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> ArgumentV1<'b> {ArgumentV1::new_display::<u8>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:33: 424:47
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _25 = &_5;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
        _24 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
        _23 = ArgumentV1::new_display::<u8>(move _24) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:43: 180:44
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> ArgumentV1<'b> {ArgumentV1::new_display::<u8>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _16 = [move _17, move _20, move _23]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _15 = &_16;                      // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _0 = <Map<std::str::Split<char>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}> as Iterator>::collect::<Vec<String>>(move _8) -> [return: bb45, unwind: bb36]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:58
                                         // mir::Constant
        _14 = _15;                       // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _13 = move _14 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:49: 424:56
        _30 = const <date::Date as std::fmt::Display>::fmt::promoted[0]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + literal: Const { ty: fn(Map<std::str::Split<char>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}>) -> Vec<String> {<Map<std::str::Split<char>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}> as Iterator>::collect::<Vec<String>>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
                                         // + literal: Const { ty: &[Argument; 3], val: Unevaluated(<date::Date as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _28 = _30;                       // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _27 = _28;                       // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _26 = move _27 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _29 = core::fmt::UnsafeArg::new() -> bb5; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        drop(_5) -> [return: bb32, unwind: bb43]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    bb10: {
        drop(_3) -> bb11;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    bb11: {
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = Arguments::new_v1_formatted(move _10, move _13, move _26, move _29) -> bb6; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _15 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 437:15
                                         // + user_ty: UserType(0)
        _17 = var_os::<&str>(const "HOST") -> bb15; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:19: 437:38
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1], &[Argument], core::fmt::UnsafeArg) -> Arguments {Arguments::new_v1_formatted}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:19: 437:30
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
        _0 = Formatter::write_fmt(move _8, move _9) -> bb7; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:31: 437:37
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:14: 500:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), std::fmt::Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:181:6: 181:6
    }
}

                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
promoted[0] in date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:177:1: 182:2>::fmt: &[Argument; 3] = {
        _13 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
        goto -> bb14;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
    }

    bb13: {
    let mut _0: &[std::fmt::rt::v1::Argument; 3]; // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _19 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:32: 438:38
    let mut _1: [std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _20 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:40: 438:43
    let mut _2: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _3: std::fmt::rt::v1::FormatSpec; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _4: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _5: std::fmt::rt::v1::Count; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _21 = var_os::<&str>(const "CARGO_TARGET_DIR") -> [return: bb17, unwind: bb35]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:45: 438:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:45: 438:56
    let mut _6: std::fmt::rt::v1::Count; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _7: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _8: std::fmt::rt::v1::FormatSpec; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _9: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _10: std::fmt::rt::v1::Count; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _11: std::fmt::rt::v1::Count; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:57: 438:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _12: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    }

    bb14: {
    let mut _13: std::fmt::rt::v1::FormatSpec; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _14: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _15: std::fmt::rt::v1::Count; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _16: std::fmt::rt::v1::Count; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54

    bb0: {
        Deinit(_4);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        drop(_17) -> bb19;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:76: 438:77
    }

    bb15: {
        discriminant(_4) = 3;            // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _16 = &_17;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:19: 437:38
        Deinit(_5);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        discriminant(_5) = 2;            // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_6);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        discriminant(_6) = 2;            // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _14 = <Option<OsString> as PartialEq>::ne(move _15, move _16) -> [return: bb16, unwind: bb35]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 437:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 437:38
        (_3.0: char) = const ' ';        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_3.1: std::fmt::rt::v1::Alignment) = move _4; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_3.2: u32) = const 0_u32;       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + literal: Const { ty: for<'r, 's> fn(&'r Option<OsString>, &'s Option<OsString>) -> bool {<Option<OsString> as PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
        (_3.3: std::fmt::rt::v1::Count) = move _5; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    }

        (_3.4: std::fmt::rt::v1::Count) = move _6; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    bb16: {
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        switchInt(move _14) -> [false: bb13, otherwise: bb12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
    }

    bb17: {
        (_2.0: usize) = const 0_usize;   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_2.1: std::fmt::rt::v1::FormatSpec) = move _3; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_9);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        discriminant(_9) = 3;            // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_10);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _18 = dir_contains_target(move _19, move _20, move _21) -> [return: bb18, unwind: bb35]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:12: 438:77
        discriminant(_10) = 2;           // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:12: 438:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r Option<OsString>, &'s Path, Option<OsString>) -> bool {dir_contains_target}, val: Value(Scalar(<ZST>)) }
        Deinit(_11);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        ((_11 as Is).0: usize) = const 2_usize; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        discriminant(_11) = 0;           // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    }

    bb18: {
        _13 = move _18;                  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
        Deinit(_8);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_8.0: char) = const ' ';        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_8.1: std::fmt::rt::v1::Alignment) = move _9; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        goto -> bb14;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
    }

    bb19: {
        switchInt(move _13) -> [false: bb30, otherwise: bb20]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:437:8: 438:77
    }
        (_8.2: u32) = const 8_u32;       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_8.3: std::fmt::rt::v1::Count) = move _10; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_8.4: std::fmt::rt::v1::Count) = move _11; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_7);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_7.0: usize) = const 1_usize;   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_7.1: std::fmt::rt::v1::FormatSpec) = move _8; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54

    bb20: {
        Deinit(_14);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _22 = var::<&str>(const "RUSTFLAGS") -> bb21; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:32: 440:53
        discriminant(_14) = 3;           // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
        Deinit(_15);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:32: 440:40
        discriminant(_15) = 2;           // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_16);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        ((_16 as Is).0: usize) = const 2_usize; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:41: 440:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
        discriminant(_16) = 0;           // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_13);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_13.0: char) = const ' ';       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54

        (_13.1: std::fmt::rt::v1::Alignment) = move _14; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_13.2: u32) = const 8_u32;      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_13.3: std::fmt::rt::v1::Count) = move _15; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    bb21: {
        (_13.4: std::fmt::rt::v1::Count) = move _16; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        Deinit(_12);                     // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _23 = discriminant(_22);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:16: 440:29
        (_12.0: usize) = const 2_usize;  // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        (_12.1: std::fmt::rt::v1::FormatSpec) = move _13; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _1 = [move _2, move _7, move _12]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        switchInt(move _23) -> [0_isize: bb22, otherwise: bb29]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:16: 440:29
    }

    bb22: {
        _24 = move ((_22 as Ok).0: std::string::String); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:440:19: 440:28
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    }
}

promoted[1] in date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:177:1: 182:2>::fmt: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
    let mut _1: [&str; 3];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35

    bb0: {
        _1 = [const "", const "-", const "-"]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
                                         // mir::Constant
        _31 = &_24;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
        _30 = <String as Deref>::deref(move _31) -> [return: bb23, unwind: bb34]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
                                         // mir::Constant
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb23: {
        _29 = _30;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:180:19: 180:35
    }
}

fn version_and_date_from_rustc_version::{closure#0}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54], _2: &&str) -> bool {
    debug c => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:35: 101:36
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:38: 101:38
        _28 = core::str::<impl str>::split::<char>(move _29, const ' ') -> [return: bb24, unwind: bb34]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 444:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:444:18: 444:23
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:38: 101:54
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:35: 101:36

    bb0: {
        _4 = move (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:38: 101:54
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:38: 101:54
    }

        _0 = core::str::<impl str>::ends_with::<char>(move _3, const ')') -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:38: 101:54
                                         // mir::Constant
    bb24: {
        _27 = <std::str::Split<char> as Iterator>::map::<&str, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>(move _28, core::str::<impl str>::trim) -> [return: bb25, unwind: bb34]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 445:32
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:40: 101:49
                                         // + literal: Const { ty: fn(&str, char) -> bool {core::str::<impl str>::ends_with::<char>}, val: Value(Scalar(<ZST>)) }
    }

                                         // mir::Constant
    bb1: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:445:18: 445:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:54: 101:54
    }
}

fn version_and_date_from_rustc_version::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:14: 102:91], _2: &str) -> &str {
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:15: 102:16
                                         // + literal: Const { ty: fn(std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}) -> Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}> {<std::str::Split<char> as Iterator>::map::<&str, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:18
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:91
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:68
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:68
    let _6: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:56
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:445:22: 445:31
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:56
    }

    bb25: {
        _26 = <Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>(move _27, move _32) -> [return: bb26, unwind: bb34]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 446:43
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:32
                                         // mir::Constant
    let mut _9: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:32

    bb0: {
        _9 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:32
        _8 = core::str::<impl str>::trim_right(move _9) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:20: 102:30
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:18: 446:24
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim_right}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = _8;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:56
                                         // + literal: Const { ty: fn(Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]) -> Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]> {<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>}, val: Value(Scalar(<ZST>)) }
        _6 = core::str::<impl str>::trim_right_matches::<&str>(move _7, const ")") -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:33: 102:51
    }

    bb26: {
                                         // + literal: Const { ty: fn(&str, &str) -> &str {core::str::<impl str>::trim_right_matches::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:52: 102:55
        _25 = <Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]> as Iterator>::map::<String, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}>(move _26, <str as ToString>::to_string) -> [return: bb27, unwind: bb34]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 447:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
    }

    bb2: {
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:68
        _4 = core::str::<impl str>::trim_left(move _5) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:447:18: 447:21
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:57: 102:66
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim_left}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:91
                                         // + literal: Const { ty: fn(Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}) -> Map<Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}> {<Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]> as Iterator>::map::<String, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
        _0 = core::str::<impl str>::trim_left_matches::<char>(move _3, const '(') -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:18: 102:91
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:69: 102:86
                                         // + literal: Const { ty: fn(&str, char) -> &str {core::str::<impl str>::trim_left_matches::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:91: 102:91
    }
}

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:447:22: 447:36
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
fn version_and_date_from_rustc_version::{closure#2}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:18: 103:35], _2: &str) -> String {
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:19: 103:20
        _0 = <Map<Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}> as Iterator>::collect::<Vec<String>>(move _25) -> [return: bb28, unwind: bb34]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:443:20: 448:27
                                         // mir::Constant
    let mut _0: std::string::String;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:22: 103:22
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:22: 103:35

    bb0: {
        _3 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:22: 103:35
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:448:18: 448:25
                                         // + literal: Const { ty: fn(Map<Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}>) -> Vec<String> {<Map<Filter<Map<std::str::Split<char>, for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:446:25: 446:42]>, for<'r> fn(&'r str) -> String {<str as ToString>::to_string}> as Iterator>::collect::<Vec<String>>}, val: Value(Scalar(<ZST>)) }
    }

    bb28: {
        _0 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:22: 103:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:24: 103:33
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:35: 103:35
    }
}

        drop(_24) -> [return: bb31, unwind: bb41]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:449:9: 449:10
fn version_and_date_from_rustc_version::{closure#3}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:47: 103:64], _2: &str) -> String {
    }

    bb29: {
        drop(_22) -> bb30;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
    }

    bb30: {
        _0 = Vec::<String>::new() -> bb33; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:452:5: 452:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:452:5: 452:13
                                         // + user_ty: UserType(1)
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:48: 103:49
    let mut _0: std::string::String;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:51: 103:51
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:51: 103:64

    bb0: {
        _3 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:51: 103:64
        _0 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:51: 103:64
                                         // + literal: Const { ty: fn() -> Vec<String> {Vec::<String>::new}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    }

    bb31: {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:53: 103:62
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:64: 103:64
    }
}

        _33 = discriminant(_22);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
        switchInt(move _33) -> [0_isize: bb33, otherwise: bb38]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
    }

    bb32: {
        _34 = discriminant(_3);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
        switchInt(move _34) -> [0_isize: bb33, otherwise: bb39]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

fn version_and_date_from_rustc_version(_1: &str) -> (Option<String>, Option<String>) {
    debug s => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:97:40: 97:41
    bb33: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:453:2: 453:2
    }

    let mut _0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:97:52: 97:84
    bb34 (cleanup): {
    let _2: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:9: 98:18
    let mut _3: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:37
        drop(_24) -> bb41;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:449:9: 449:10
    let mut _4: std::str::Lines;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:30
    }

    bb35 (cleanup): {
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:30
        drop(_17) -> bb37;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:438:76: 438:77
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:48: 98:49
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:53
    }

    bb36 (cleanup): {
        drop(_5) -> bb43;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    bb37 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:414:1: 453:2
    }

    bb38: {
        drop(_22) -> bb33;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
    }

    bb39: {
    let _9: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:42
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:42
    let mut _12: &mut std::str::Split<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:100:19: 100:36
    let mut _14: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:62
    let mut _15: &mut std::iter::Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:62
        drop(_3) -> bb33;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    bb40 (cleanup): {
        drop(_22) -> bb37;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
    }

    bb41 (cleanup): {
        _35 = discriminant(_22);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
        switchInt(move _35) -> [0_isize: bb37, otherwise: bb40]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:450:5: 450:6
    }

    let mut _16: std::iter::Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:55
    bb42 (cleanup): {
    let mut _17: std::str::Split<&str>;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:26
        drop(_3) -> bb37;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    let mut _18: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54
    let mut _19: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:14: 102:91]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:14: 102:91
    bb43 (cleanup): {
    let mut _20: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:6: 103:36
        _36 = discriminant(_3);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    let mut _21: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:6: 103:13
        switchInt(move _36) -> [0_isize: bb37, otherwise: bb42]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:426:5: 426:6
    }

    bb44: {
    let mut _22: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:18: 103:35]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:18: 103:35
    let mut _23: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:38: 103:65
    let mut _24: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:38: 103:42
        goto -> bb9;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:422:13: 422:23
    }

    bb45: {
        goto -> bb9;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:424:13: 424:58
    let mut _25: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:47: 103:64]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:47: 103:64
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15>::fmt(_1: &error::Error, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    scope 1 {
        debug last_line => _2;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:9: 98:18
        let mut _7: std::str::Split<&str>; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:9: 99:23
        scope 2 {
            debug components => _7;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:9: 99:23
            let _11: std::option::Option<&str>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:100:9: 100:16
            scope 3 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    let _3: &error::ErrorKind;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
    let mut _5: std::fmt::DebugStruct;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    let mut _6: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                debug version => _11;    // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:100:9: 100:16
                let _13: std::option::Option<&str>; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:9: 101:13
                scope 4 {
                    debug date => _13;   // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:9: 101:13
                }
            }
        }
    }

    bb0: {
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    let mut _9: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:30
    let mut _10: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
        _4 = core::str::<impl str>::lines(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:30
    let mut _11: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // mir::Constant
    let _12: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:23: 98:28
    let mut _14: &&error::ErrorKind;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::str::Lines<'r> {core::str::<impl str>::lines}, val: Value(Scalar(<ZST>)) }
    let _15: &&error::ErrorKind;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
    }

    let _16: &error::ErrorKind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
    bb1: {
    let mut _17: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    scope 1 {
        _3 = <std::str::Lines as Iterator>::last(move _4) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:37
        debug __self_0_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:31: 98:35
                                         // + literal: Const { ty: fn(std::str::Lines) -> Option<<std::str::Lines as Iterator>::Item> {<std::str::Lines as Iterator>::last}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        let _4: &mut std::fmt::DebugStruct; // in scope 1 at no-location
        scope 2 {
            debug debug_trait_builder => _4; // in scope 2 at no-location
            scope 3 {
            }
        }
    }

        _6 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:48: 98:49
    bb0: {
        _2 = Option::<&str>::unwrap_or(move _3, move _6) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:21: 98:50
        _3 = &((*_1).0: error::ErrorKind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // mir::Constant
        _6 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:98:38: 98:47
        _8 = const "Error";              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + literal: Const { ty: fn(Option<&str>, &str) -> &str {Option::<&str>::unwrap_or}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    }

    bb3: {
        _10 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:42
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = core::str::<impl str>::trim(move _10) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:36: 99:40
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
        _5 = Formatter::debug_struct(move _6, move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugStruct<'b, '_> {Formatter::debug_struct}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &mut _5;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _10 = &mut (*_4);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
        _8 = _9;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:53
        _7 = core::str::<impl str>::split::<&str>(move _8, const " ") -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:26: 99:53
        _12 = const "kind";              // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // mir::Constant
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
        _16 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:43: 99:48
                                         // + literal: Const { ty: fn(&str, &str) -> std::str::Split<&str> {core::str::<impl str>::split::<&str>}, val: Value(Scalar(<ZST>)) }
        _15 = &_16;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // mir::Constant
        _14 = _15;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:99:49: 99:52
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:10:5: 10:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = DebugStruct::field(move _10, move _11, move _13) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
    }

                                         // mir::Constant
    bb5: {
        _12 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:100:19: 100:36
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + user_ty: UserType(1)
        _11 = <std::str::Split<&str> as Iterator>::nth(move _12, const 1_usize) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:100:19: 100:36
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
                                         // mir::Constant
        _17 = &mut (*_4);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
        _0 = DebugStruct::finish(move _17) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:100:30: 100:33
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:10: 8:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::Split<&str>, usize) -> Option<<std::str::Split<&str> as Iterator>::Item> {<std::str::Split<&str> as Iterator>::nth}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugStruct) -> Result<(), std::fmt::Error> {DebugStruct::finish}, val: Value(Scalar(<ZST>)) }
        _17 = move _7;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:26
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:8:15: 8:15
        _16 = <std::str::Split<&str> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]>(move _17, move _18) -> bb7; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:55
    }
                                         // mir::Constant
}

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:27: 101:33
fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15>::fmt(_1: &error::ErrorKind, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: fn(std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]) -> Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]> {<std::str::Split<&str> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _15 = &mut _16;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:62
    let mut _3: (&error::ErrorKind,);    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _4: &error::ErrorKind;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let _6: &std::io::Error;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let mut _8: std::fmt::DebugTuple;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _9: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _14 = <Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]> as Iterator>::next(move _15) -> bb8; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 101:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:56: 101:60
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _12: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _13: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: for<'r> fn(&'r mut Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]>) -> Option<<Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]> as Iterator>::Item> {<Filter<std::str::Split<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:34: 101:54]> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _13 = Option::<&str>::map::<&str, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:14: 102:91]>(move _14, move _19) -> bb9; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:101:16: 102:92
                                         // mir::Constant
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let mut _15: &&std::io::Error;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:10: 102:13
    let _16: &&std::io::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let _17: &std::io::Error;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let mut _18: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: fn(Option<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:14: 102:91]) -> Option<&str> {Option::<&str>::map::<&str, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:102:14: 102:91]>}, val: Value(Scalar(<ZST>)) }
    let _19: &std::num::ParseIntError;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    }

    let mut _21: std::fmt::DebugTuple;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    bb9: {
        _21 = _11;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:6: 103:13
    let mut _22: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _20 = Option::<&str>::map::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:18: 103:35]>(move _21, move _22) -> bb10; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:6: 103:36
    let mut _23: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
    let _24: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:14: 103:17
    let mut _25: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _26: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: fn(Option<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:18: 103:35]) -> Option<String> {Option::<&str>::map::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:18: 103:35]>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
    let mut _27: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    let mut _28: &&std::num::ParseIntError; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    let _29: &&std::num::ParseIntError;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
        _24 = _13;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:38: 103:42
    let _30: &std::num::ParseIntError;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
        _23 = Option::<&str>::map::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:47: 103:64]>(move _24, move _25) -> [return: bb11, unwind: bb12]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:38: 103:65
                                         // mir::Constant
    let mut _31: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:43: 103:46
    let _32: &std::str::Utf8Error;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
    let mut _34: std::fmt::DebugTuple;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _35: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _36: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let _37: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: fn(Option<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:47: 103:64]) -> Option<String> {Option::<&str>::map::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:47: 103:64]>}, val: Value(Scalar(<ZST>)) }
    }

    let mut _38: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _39: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _40: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
    let mut _41: &&std::str::Utf8Error;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
    bb11: {
        Deinit(_0);                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:5: 103:66
        (_0.0: std::option::Option<std::string::String>) = move _20; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:5: 103:66
        (_0.1: std::option::Option<std::string::String>) = move _23; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:5: 103:66
    let _42: &&std::str::Utf8Error;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
    let _43: &std::str::Utf8Error;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
    let mut _44: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let _45: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
    let mut _47: std::fmt::DebugTuple;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _48: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:104:2: 104:2
    }

    bb12 (cleanup): {
        drop(_20) -> bb13;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:103:65: 103:66
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:97:1: 104:2
    }
}

    let mut _49: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let _50: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
fn version_and_date_from_rustc_verbose_version::{closure#0}::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:59: 110:83], _2: &str) -> String {
    let mut _51: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:60: 110:61
    let mut _52: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _53: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
    let mut _54: &&&str;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
    let mut _0: std::string::String;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:63
    let _55: &&&str;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:83
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:71
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:71

    let _56: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
    let mut _57: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _58: &error::ErrorKind;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _59: &error::ErrorKind;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:71
    let mut _60: &error::ErrorKind;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _4 = core::str::<impl str>::trim(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:65: 110:69
    let mut _61: &error::ErrorKind;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    let mut _62: &error::ErrorKind;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    }

    bb1: {
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:83
    scope 1 {
        _0 = <str as ToString>::to_string(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:63: 110:83
        debug __self_0 => _6;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
                                         // mir::Constant
        let _7: &mut std::fmt::DebugTuple; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        scope 2 {
            debug debug_trait_builder => _7; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
            scope 3 {
            }
        }
    }
    scope 4 {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:72: 110:81
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:83: 110:83
    }
}

fn version_and_date_from_rustc_verbose_version::{closure#0}(_1: &[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84], _2: &str) -> Option<String> {
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:22: 110:23
        debug __self_0 => _19;           // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
        let _20: &mut std::fmt::DebugTuple; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        scope 5 {
            debug debug_trait_builder => _20; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
            scope 6 {
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:31
            }
    let mut _3: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:54
        }
    let mut _4: &mut std::str::SplitN<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:54
    let mut _5: std::str::SplitN<&str>;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:47
    }
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:47
    scope 7 {
        debug __self_0 => _32;           // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
        let _33: &mut std::fmt::DebugTuple; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        scope 8 {
            debug debug_trait_builder => _33; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
            scope 9 {
    let mut _7: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:59: 110:83]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:59: 110:83
            }
        }
    }

    scope 10 {
    bb0: {
        debug __self_0 => _45;           // in scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:47
        let _46: &mut std::fmt::DebugTuple; // in scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        scope 11 {
        _5 = core::str::<impl str>::splitn::<&str>(move _6, const 2_usize, const ":") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:47
            debug debug_trait_builder => _46; // in scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
            scope 12 {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:33: 110:39
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: fn(&str, usize, &str) -> std::str::SplitN<&str> {core::str::<impl str>::splitn::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:43: 110:46
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        (_3.0: &error::ErrorKind) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _58 = move (_3.0: &error::ErrorKind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = discriminant((*_58));       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    }

        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb6, 2_isize: bb9, 3_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    bb1: {
    }

    bb1: {
        _4 = &mut _5;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:54
        _3 = <std::str::SplitN<&str> as Iterator>::nth(move _4, const 1_usize) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:54
                                         // mir::Constant
        _59 = move (_3.0: &error::ErrorKind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
        _45 = &(((*_59) as Other).0: &str); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
        _48 = &mut (*_2);                // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _50 = const "Other";             // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:48: 110:51
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::SplitN<&str>, usize) -> Option<<std::str::SplitN<&str> as Iterator>::Item> {<std::str::SplitN<&str> as Iterator>::nth}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = Option::<&str>::map::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:59: 110:83]>(move _3, move _7) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:31: 110:84
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:55: 110:58
        _49 = _50;                       // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _47 = Formatter::debug_tuple(move _48, move _49) -> bb12; // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    }

    bb3: {
                                         // + literal: Const { ty: fn(Option<&str>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:59: 110:83]) -> Option<String> {Option::<&str>::map::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:59: 110:83]>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:84: 110:84
    }
}

fn version_and_date_from_rustc_verbose_version(_1: &str) -> (Option<String>, Option<String>) {
    debug s => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:107:48: 107:49
        _60 = move (_3.0: &error::ErrorKind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
        _6 = &(((*_60) as Io).0: std::io::Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
        _9 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _11 = const "Io";                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:107:60: 107:92
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _2: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:10: 108:21
    let mut _3: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:23: 108:31
    let mut _4: (std::option::Option<std::string::String>, std::option::Option<std::string::String>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
    let mut _5: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:36: 108:40
        _10 = _11;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _8 = Formatter::debug_tuple(move _9, move _10) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _7 = &mut _8;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _6: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:42: 108:46
    let mut _7: std::str::Lines;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    let mut _8: std::str::Lines;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    let mut _9: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    let mut _11: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    let mut _12: &mut std::str::Lines;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
        _13 = &mut (*_7);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _13: &mut std::str::Lines;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
        _17 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let mut _14: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:5: 122:6
        _16 = &_17;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let mut _17: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:44
        _15 = _16;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
    let mut _18: &mut std::str::Split<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:44
    let mut _19: std::str::Split<&str>;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:37
        _14 = move _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:8: 41:17
        _12 = DebugTuple::field(move _13, move _14) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _20: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:37
                                         // mir::Constant
    let _21: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:26
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _22: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:26
    let mut _23: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:112:18: 112:25
    let mut _24: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:18: 117:28
    let mut _25: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:18: 118:32
                                         // + user_ty: UserType(1)
    let mut _26: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:112:13: 112:26
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _18 = &mut (*_7);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _0 = DebugTuple::finish(move _18) -> bb14; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
    let mut _29: (std::option::Option<std::string::String>, std::option::Option<std::string::String>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:30: 113:71
    let mut _30: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:66: 113:70
    let mut _31: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:27: 114:40
    let mut _32: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:27: 114:34
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _33: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:38: 114:39
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), std::fmt::Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _61 = move (_3.0: &error::ErrorKind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
        _19 = &(((*_61) as Num).0: std::num::ParseIntError); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
        _22 = &mut (*_2);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _34: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:24: 115:34
    let mut _35: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:24: 115:28
    let mut _36: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:32: 115:33
    let mut _37: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:54
    let mut _38: &[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:48
        _24 = const "Num";               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = _24;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _21 = Formatter::debug_tuple(move _22, move _23) -> bb7; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _39: (&str,);                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:54
    let mut _40: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:49: 117:53
    let mut _41: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:37: 118:62
    let mut _42: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:37: 118:62
    let mut _43: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:73: 118:77
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _20 = &mut _21;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _44: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:55
        _26 = &mut (*_20);               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
    let mut _45: &[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:49
        _30 = _19;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    let mut _46: (&str,);                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:55
    let mut _47: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:50: 119:54
    let mut _48: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:6: 124:13
        _29 = &_30;                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    let mut _49: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:15: 124:19
    let mut _50: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
        _28 = _29;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    let mut _51: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
    let mut _52: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
        _27 = move _28 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:9: 42:27
    let mut _53: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
    scope 1 {
        _25 = DebugTuple::field(move _26, move _27) -> bb8; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
        debug version => _2;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:10: 108:21
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        debug date => _3;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:23: 108:31
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
        let mut _10: std::str::Lines;    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    }

        scope 2 {
    bb8: {
            debug iter => _10;           // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
            let _15: &str;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:9: 109:13
            scope 3 {
        _31 = &mut (*_20);               // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _0 = DebugTuple::finish(move _31) -> bb14; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                debug line => _15;       // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:9: 109:13
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), std::fmt::Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }
                let _16: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84]; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:13: 110:18

    bb9: {
                scope 4 {
                    debug split => _16;  // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:13: 110:18
        _62 = move (_3.0: &error::ErrorKind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
                    let _27: std::option::Option<std::string::String>; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:22: 113:23
                    let _28: std::option::Option<std::string::String>; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:25: 113:26
        _32 = &(((*_62) as Utf8).0: std::str::Utf8Error); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
        _35 = &mut (*_2);                // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _37 = const "Utf8";              // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                    scope 5 {
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                        debug v => _27;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:22: 113:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                        debug d => _28;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:25: 113:26
        _36 = _37;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                    }
                }
            }
        }
    }

    bb0: {
        _50 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        _53 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        _51 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        _34 = Formatter::debug_tuple(move _35, move _36) -> bb10; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _33 = &mut _34;                  // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _39 = &mut (*_33);               // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _52 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:36: 108:40
        discriminant(_5) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:36: 108:40
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:42: 108:46
        discriminant(_6) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:42: 108:46
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        _43 = _32;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
        _42 = &_43;                      // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
        _41 = _42;                       // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
        _40 = move _41 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:10: 43:24
        _38 = DebugTuple::field(move _39, move _40) -> bb11; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
        (_4.0: std::option::Option<std::string::String>) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        (_4.1: std::option::Option<std::string::String>) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:35: 108:47
        _53 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:10: 108:21
        _2 = move (_4.0: std::option::Option<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:10: 108:21
        _52 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:23: 108:31
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _44 = &mut (*_33);               // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _3 = move (_4.1: std::option::Option<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:108:23: 108:31
        _0 = DebugTuple::finish(move _44) -> bb14; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
        _9 = _1;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _8 = core::str::<impl str>::lines(move _9) -> [return: bb1, unwind: bb41]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:19: 109:24
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> std::str::Lines<'r> {core::str::<impl str>::lines}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), std::fmt::Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _46 = &mut _47;                  // scope 10 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _52 = &mut (*_46);               // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _56 = _45;                       // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
        _7 = <std::str::Lines as IntoIterator>::into_iter(move _8) -> [return: bb2, unwind: bb41]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
        _55 = &_56;                      // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
                                         // + literal: Const { ty: fn(std::str::Lines) -> <std::str::Lines as IntoIterator>::IntoIter {<std::str::Lines as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = move _7;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:5: 122:6
    }

    bb3: {
        _54 = _55;                       // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
        _53 = move _54 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:11: 44:23
        _51 = DebugTuple::field(move _52, move _53) -> bb13; // scope 11 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
        _13 = &mut _10;                  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
        _12 = &mut (*_13);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    }

    bb13: {
        _11 = <std::str::Lines as Iterator>::next(move _12) -> [return: bb4, unwind: bb41]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::Lines) -> Option<<std::str::Lines as Iterator>::Item> {<std::str::Lines as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _57 = &mut (*_46);               // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
        _0 = DebugTuple::finish(move _57) -> bb14; // scope 12 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:10: 39:15
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), std::fmt::Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:39:15: 39:15
        _14 = discriminant(_11);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
        switchInt(move _14) -> [0_isize: bb7, 1_isize: bb5, otherwise: bb6]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    }
    }

}

    bb5: {
        _15 = ((_11 as Some).0: &str);   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:9: 109:13
        _22 = _15;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:26
        _21 = core::str::<impl str>::trim(move _22) -> [return: bb8, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:26
                                         // mir::Constant
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15>::clone(_1: &Version) -> Version {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15
    let mut _0: version::Version;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15
    let _2: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _3: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _4: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:20: 111:24
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        unreachable;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:109:17: 109:26
    }

    bb7: {
        _53 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:6: 124:13
        _48 = move _2;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:6: 124:13
        _52 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:15: 124:19
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _6: &usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _7: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _8: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _9: &usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _10: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _49 = move _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:15: 124:19
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:5: 124:20
        (_0.0: std::option::Option<std::string::String>) = move _48; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:5: 124:20
    let mut _11: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        (_0.1: std::option::Option<std::string::String>) = move _49; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:124:5: 124:20
    let mut _12: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _52 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
    let _13: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        debug __self_0_2 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }
        _53 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:2: 125:2
    }

    bb8: {

        _20 = _21;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:37
    bb0: {
        _19 = core::str::<impl str>::split::<&str>(move _20, const " ") -> [return: bb9, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:27: 111:32
                                         // + literal: Const { ty: fn(&str, &str) -> std::str::Split<&str> {core::str::<impl str>::split::<&str>}, val: Value(Scalar(<ZST>)) }
        _2 = &((*_1).0: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // mir::Constant
        _3 = &((*_1).1: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:33: 111:36
        _4 = &((*_1).2: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _7 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _6 = _7;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _5 = (*_6);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = &mut _19;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:44
        _17 = <std::str::Split<&str> as Iterator>::nth(move _18, const 0_usize) -> [return: bb10, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:44
                                         // mir::Constant
        _10 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _9 = _10;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _8 = (*_9);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _13 = _4;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _12 = _13;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _11 = (*_12);                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:38: 111:41
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::Split<&str>, usize) -> Option<<std::str::Split<&str> as Iterator>::Item> {<std::str::Split<&str> as Iterator>::nth}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _26 = discriminant(_17);         // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:15: 111:44
        switchInt(move _26) -> [1_isize: bb11, otherwise: bb3]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:111:9: 111:44
    }

    bb11: {
        _23 = <str as PartialEq>::eq(((_17 as Some).0: &str), const "rustc") -> [return: bb12, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:112:18: 112:25
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15
        (_0.0: usize) = move _5;         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15
        (_0.1: usize) = move _8;         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15
        (_0.2: usize) = move _11;        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:10: 8:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:15: 8:15
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22>::fmt(_1: &Version, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:112:18: 112:25
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:112:18: 112:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        switchInt(move _23) -> [false: bb13, otherwise: bb17]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:112:18: 112:25
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    }

    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    bb13: {
    let _3: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _4: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _5: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _24 = <str as PartialEq>::eq(((_17 as Some).0: &str), const "release:") -> [return: bb14, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:18: 117:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:18: 117:28
    let mut _7: std::fmt::DebugStruct;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:18: 117:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _8: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    }

    let mut _9: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    bb14: {
    let _10: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    let mut _11: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    let mut _12: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        switchInt(move _24) -> [false: bb15, otherwise: bb21]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:18: 117:28
    }

    bb15: {
    let mut _13: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _25 = <str as PartialEq>::eq(((_17 as Some).0: &str), const "commit-date:") -> [return: bb16, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:18: 118:32
    let _14: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // mir::Constant
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:18: 118:32
    let mut _16: &&usize;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r str, &'s str) -> bool {<str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
    let _17: &&usize;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _18: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:18: 118:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        switchInt(move _25) -> [false: bb3, otherwise: bb23]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:18: 118:32
    }

    bb17: {
        _30 = _15;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:66: 113:70
        _29 = version_and_date_from_rustc_version(move _30) -> [return: bb18, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:30: 113:71
                                         // mir::Constant
    let mut _19: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    let mut _20: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    let mut _21: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _22: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _23: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _24: &&usize;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:30: 113:65
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> (Option<String>, Option<String>) {version_and_date_from_rustc_version}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _51 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:22: 113:23
        _27 = move (_29.0: std::option::Option<std::string::String>); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:22: 113:23
        _50 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:25: 113:26
    let _25: &&usize;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _26: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _27: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _28 = move (_29.1: std::option::Option<std::string::String>); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:113:25: 113:26
    let mut _28: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _53 = const false;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:27: 114:34
        _32 = move _2;                   // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:27: 114:34
        _51 = const false;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:38: 114:39
        _33 = move _27;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:38: 114:39
    let mut _29: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let _30: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _31 = Option::<String>::or(move _32, move _33) -> [return: bb19, unwind: bb38]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:27: 114:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:35: 114:37
    let mut _31: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _32: &&usize;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let _33: &&usize;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let _34: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + literal: Const { ty: fn(Option<String>, Option<String>) -> Option<String> {Option::<String>::or}, val: Value(Scalar(<ZST>)) }
    let mut _35: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb19: {
        _53 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:17: 114:24
        _2 = move _31;                   // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:114:17: 114:24
        debug __self_0_1 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        debug __self_0_2 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        let _6: &mut std::fmt::DebugStruct; // in scope 1 at no-location
        scope 2 {
            debug debug_trait_builder => _6; // in scope 2 at no-location
            scope 3 {
        _52 = const false;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:24: 115:28
        _35 = move _3;                   // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:24: 115:28
        _50 = const false;               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:32: 115:33
                scope 4 {
        _36 = move _28;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:32: 115:33
                    scope 5 {
        _34 = Option::<String>::or(move _35, move _36) -> [return: bb20, unwind: bb38]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:24: 115:34
                    }
                                         // mir::Constant
                }
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _4 = &((*_1).1: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:29: 115:31
                                         // + literal: Const { ty: fn(Option<String>, Option<String>) -> Option<String> {Option::<String>::or}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _52 = const true;                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:17: 115:21
        _3 = move _34;                   // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:115:17: 115:21
        _50 = const false;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
        _51 = const false;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
        _5 = &((*_1).2: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _8 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _10 = const "Version";           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        goto -> bb3;                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
    }

    bb21: {
        _38 = &_16;                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:48
        _40 = _15;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:49: 117:53
        Deinit(_39);                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:54
        (_39.0: &str) = move _40;        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:54
        _7 = Formatter::debug_struct(move _8, move _9) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // + user_ty: UserType(0)
        _37 = <[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84] as Fn<(&str,)>>::call(move _38, move _39) -> [return: bb22, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:54
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugStruct<'b, '_> {Formatter::debug_struct}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:43: 117:48
    }

    bb1: {
        _6 = &mut _7;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _12 = &mut (*_6);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _14 = const "major";             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84], (&str,)) -> <[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84] as FnOnce<(&str,)>>::Output {<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84] as Fn<(&str,)>>::call}, val: Value(Scalar(<ZST>)) }
        _13 = _14;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb22: {
        _18 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        drop(_2) -> [return: bb32, unwind: bb31]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:33: 117:40
        _17 = &_18;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb23: {
        _42 = _15;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:37: 118:62
        _16 = _17;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _11 = DebugStruct::field(move _12, move _13, move _15) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _41 = core::str::<impl str>::ends_with::<&str>(move _42, const "unknown") -> [return: bb24, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:37: 118:62
                                         // + user_ty: UserType(1)
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:42: 118:51
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::ends_with::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:52: 118:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _20 = &mut (*_6);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _22 = const "minor";             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _21 = _22;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        switchInt(move _41) -> [false: bb26, otherwise: bb25]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:37: 118:62
    }

    bb25: {
        Deinit(_43);                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:73: 118:77
        discriminant(_43) = 0;           // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:73: 118:77
        drop(_3) -> [return: bb34, unwind: bb33]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:66: 118:70
    }

    bb26: {
        _45 = &_16;                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:49
        _26 = _4;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _25 = &_26;                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _24 = _25;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _23 = move _24 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _19 = DebugStruct::field(move _20, move _21, move _23) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // mir::Constant
        _47 = _15;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:50: 119:54
        Deinit(_46);                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:55
        (_46.0: &str) = move _47;        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:55
        _44 = <[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84] as Fn<(&str,)>>::call(move _45, move _46) -> [return: bb27, unwind: bb41]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _28 = &mut (*_6);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _30 = const "patch";             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:44: 119:49
                                         // + literal: Const { ty: for<'r> extern "rust-call" fn(&'r [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84], (&str,)) -> <[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84] as FnOnce<(&str,)>>::Output {<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:110:21: 110:84] as Fn<(&str,)>>::call}, val: Value(Scalar(<ZST>)) }
    }

    bb27: {
        drop(_3) -> [return: bb36, unwind: bb35]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:37: 119:41
    }

    bb28 (cleanup): {
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _29 = _30;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _34 = _5;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _33 = &_34;                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _32 = _33;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _31 = move _32 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        switchInt(_51) -> [false: bb41, otherwise: bb39]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
    }

    bb29 (cleanup): {
        switchInt(_53) -> [false: bb30, otherwise: bb42]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
    }

    bb30 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:107:1: 125:2
    }

    bb31 (cleanup): {
        _53 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:33: 117:40
        _2 = move _37;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:33: 117:40
        _27 = DebugStruct::field(move _28, move _29, move _31) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        goto -> bb41;                    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:33: 117:40
    }

    bb32: {
        _53 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:33: 117:40
        _2 = move _37;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:33: 117:40
        goto -> bb3;                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:117:53: 117:54
    }

    bb33 (cleanup): {
                                         // + user_ty: UserType(3)
        _52 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:66: 118:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _35 = &mut (*_6);                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
        _3 = move _43;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:66: 118:70
        goto -> bb41;                    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:66: 118:70
        _0 = DebugStruct::finish(move _35) -> bb5; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:17: 8:22
                                         // + user_ty: UserType(4)
    }

                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugStruct) -> Result<(), std::fmt::Error> {DebugStruct::finish}, val: Value(Scalar(<ZST>)) }
    bb34: {
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:22: 8:22
        _52 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:66: 118:70
    }
        _3 = move _43;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:66: 118:70
        goto -> bb3;                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:118:76: 118:77
    }

    bb35 (cleanup): {
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33>::eq(_1: &Version, _2: &Version) -> bool {
        _52 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:37: 119:41
        _3 = move _44;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:37: 119:41
        goto -> bb41;                    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:37: 119:41
    }

    bb36: {
        _52 = const true;                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:37: 119:41
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33
        _3 = move _44;                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:37: 119:41
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33
        goto -> bb3;                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:119:54: 119:55
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33
    }

    let _3: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _4: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _5: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    bb37 (cleanup): {
        drop(_28) -> bb28;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
    }

    bb38 (cleanup): {
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _11: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _12: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(_50) -> [false: bb28, otherwise: bb37]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
    }

    bb39 (cleanup): {
    let mut _13: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _14: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        drop(_27) -> bb41;               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:116:13: 116:14
    }

    bb40 (cleanup): {
        drop(_3) -> bb29;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
    }

    bb41 (cleanup): {
        switchInt(_52) -> [false: bb29, otherwise: bb40]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
    }

    bb42 (cleanup): {
    let mut _15: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _16: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _17: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _18: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        debug __self_1_1 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        drop(_2) -> bb30;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:125:1: 125:2
    }
}

        debug __self_1_2 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        let _6: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        let _7: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
fn get_version_and_date::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73], _2: VarError) -> String {
        let _8: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        scope 2 {
    let mut _0: std::string::String;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:54
            debug __self_0_0 => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
            debug __self_0_1 => _7;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:73
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:61

    bb0: {
            debug __self_0_2 => _8;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        }
    }

    bb0: {
        _3 = &((*_2).0: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _4 = &((*_2).1: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _4 = const "rustc";              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:61
        _5 = &((*_2).2: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _6 = &((*_1).0: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _7 = &((*_1).1: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:73
        _0 = <str as ToString>::to_string(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:54: 129:73
                                         // mir::Constant
        _8 = &((*_1).2: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _11 = (*_6);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _12 = (*_3);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _10 = Eq(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _10) -> [false: bb4, otherwise: bb5]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:62: 129:71
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> String {<str as ToString>::to_string}, val: Value(Scalar(<ZST>)) }
    bb1: {
        _0 = const false;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:72: 129:73
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:73: 129:73
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:72: 129:73
    }

    bb4 (cleanup): {
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb2: {
        _17 = (*_8);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _18 = (*_5);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _16 = Eq(move _17, move _18);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73
    }
}

fn get_version_and_date::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65], _2: Output) -> Option<String> {
        _0 = move _16;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    debug output => _2;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:20: 131:26
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb3: {
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:28: 131:28
    let mut _3: std::result::Result<std::string::String, std::string::FromUtf8Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:28: 131:60
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:33: 8:33
    }

    bb4: {
        _9 = const false;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _4: std::vec::Vec<u8>;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:46: 131:59

        goto -> bb6;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

    bb5: {
        _14 = (*_7);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _15 = (*_4);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _13 = Eq(move _14, move _15);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    bb0: {
        _4 = move (_2.1: std::vec::Vec<u8>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:46: 131:59
        _3 = String::from_utf8(move _4) -> [return: bb1, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:28: 131:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:28: 131:45
                                         // + literal: Const { ty: fn(Vec<u8>) -> Result<String, FromUtf8Error> {String::from_utf8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = move _13;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        goto -> bb6;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

    bb6: {
        switchInt(move _9) -> [false: bb1, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33>::ne(_1: &Version, _2: &Version) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33
        _0 = Result::<String, FromUtf8Error>::ok(move _3) -> [return: bb2, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:28: 131:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:61: 131:63
                                         // + literal: Const { ty: fn(Result<String, FromUtf8Error>) -> Option<String> {Result::<String, FromUtf8Error>::ok}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        drop((_2.2: std::vec::Vec<u8>)) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:64: 131:65
    }

    bb3 (cleanup): {
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:24: 8:33
    let _3: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _4: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65
    let _5: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    bb4: {
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:65: 131:65
    }

    bb5 (cleanup): {
    let mut _11: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        drop((_2.2: std::vec::Vec<u8>)) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:64: 131:65
    let mut _12: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }
    let mut _13: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
}

    let mut _14: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
fn get_version_and_date::{closure#2}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65], _2: String) -> (Option<String>, Option<String>) {
    let mut _15: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:15: 132:16
    let mut _16: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:18: 132:18
    let mut _17: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _18: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _5: &std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
    let _6: &std::string::String;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64

    bb0: {
        _6 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
        debug __self_1_1 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        debug __self_1_2 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        let _6: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _4 = <String as Deref>::deref(move _5) -> [return: bb1, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }
        let _7: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        let _8: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        scope 2 {

    bb1: {
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:62: 132:64
        _0 = version_and_date_from_rustc_verbose_version(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:18: 132:65
            debug __self_0_0 => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // mir::Constant
            debug __self_0_1 => _7;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:18: 132:61
            debug __self_0_2 => _8;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> (Option<String>, Option<String>) {version_and_date_from_rustc_verbose_version}, val: Value(Scalar(<ZST>)) }
        }
    }

    bb2: {
    }

    bb0: {
        _3 = &((*_2).0: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        drop(_2) -> bb3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:64: 132:65
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:65: 132:65
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:64: 132:65
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65
    }
}

        _4 = &((*_2).1: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _5 = &((*_2).2: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _6 = &((*_1).0: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
fn get_version_and_date() -> Option<(Option<String>, Option<String>)> {
        _7 = &((*_1).1: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _8 = &((*_1).2: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _11 = (*_6);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _0: std::option::Option<(std::option::Option<std::string::String>, std::option::Option<std::string::String>)>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:128:30: 128:70
    let _1: std::string::String;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:9: 129:14
    let mut _2: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:17: 129:34
        _12 = (*_3);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _10 = Ne(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _10) -> [false: bb5, otherwise: bb4]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

    let mut _3: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73
    bb1: {
    let mut _4: std::option::Option<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 131:66
        _0 = const true;                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _5: std::option::Option<std::process::Output>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:72
    let mut _6: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:67
    let mut _7: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:67
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb2: {
        _17 = (*_8);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _8: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:58
    let mut _9: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:58
    let mut _10: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:41
    let mut _11: &mut std::process::Command; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:41
    let mut _12: std::process::Command;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:24
    let mut _13: std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:18: 130:23
        _18 = (*_5);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _16 = Ne(move _17, move _18);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _0 = move _16;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    let mut _14: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65
    bb3: {
    let mut _15: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:33: 8:33
    }

    bb4: {
        _9 = const true;                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    scope 1 {
        debug rustc => _1;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:9: 129:14
    }

    bb0: {
        _2 = var::<&str>(const "RUSTC") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:17: 129:34
                                         // mir::Constant
        goto -> bb6;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

    bb5: {
        _14 = (*_7);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _15 = (*_4);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _13 = Ne(move _14, move _15);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _9 = move _13;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        goto -> bb6;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:17: 129:25
    }

    bb6: {
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:26: 129:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _1 = Result::<String, VarError>::unwrap_or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73]>(move _2, move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:17: 129:74
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:35: 8:37>::assert_receiver_is_total_eq(_1: &Version) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:35: 8:37
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:35: 8:37
    scope 1 {
        scope 2 {
            scope 3 {
            }
                                         // mir::Constant
        }
    }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:35: 129:49

                                         // + literal: Const { ty: fn(Result<String, VarError>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73]) -> String {Result::<String, VarError>::unwrap_or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:129:50: 129:73]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
    bb0: {
        _13 = move _1;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:18: 130:23
        _12 = Command::new::<String>(move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:24
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:37: 8:37
    }
}

                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:17
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49>::partial_cmp(_1: &Version, _2: &Version) -> Option<std::cmp::Ordering> {
                                         // + user_ty: UserType(0)
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
                                         // + literal: Const { ty: fn(String) -> Command {Command::new::<String>}, val: Value(Scalar(<ZST>)) }
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
    }

    bb3: {
        _11 = &mut _12;                  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:41
        _10 = Command::arg::<&str>(move _11, const "--verbose") -> [return: bb4, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:41
                                         // mir::Constant
    let _3: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:25: 130:28
    let _4: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
    let _5: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // mir::Constant
    let mut _9: std::option::Option<std::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:29: 130:40
    let mut _10: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _11: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _12: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb4: {
        _9 = &mut (*_10);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:58
    let _13: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _14: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _15: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _16: std::option::Option<std::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _8 = Command::arg::<&str>(move _9, const "--version") -> [return: bb5, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:58
    let mut _17: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // mir::Constant
    let _18: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:42: 130:45
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command, &str) -> &'r mut Command {Command::arg::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:46: 130:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
    let mut _19: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _20: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _21: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _22: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _23: std::option::Option<std::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _24: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _7 = &mut (*_8);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:67
        _6 = Command::output(move _7) -> [return: bb6, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:59: 130:65
                                         // + literal: Const { ty: for<'r> fn(&'r mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
    let _25: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _26: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let _27: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _28: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _29: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _5 = Result::<Output, std::io::Error>::ok(move _6) -> [return: bb7, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 130:72
        debug __self_1_1 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        debug __self_1_2 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        let _6: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        let _7: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // mir::Constant
        let _8: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:68: 130:70
        scope 2 {
            debug __self_0_0 => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Option<Output> {Result::<Output, std::io::Error>::ok}, val: Value(Scalar(<ZST>)) }
    }

            debug __self_0_1 => _7;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    bb7: {
        _4 = Option::<Output>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65]>(move _5, move _14) -> [return: bb8, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 131:66
            debug __self_0_2 => _8;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // mir::Constant
            let _30: std::option::Option<std::cmp::Ordering>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:10: 131:18
            let _31: std::option::Option<std::cmp::Ordering>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
            let _32: std::option::Option<std::cmp::Ordering>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
            scope 3 {
                                         // + literal: Const { ty: fn(Option<Output>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65]) -> Option<String> {Option::<Output>::and_then::<String, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:131:19: 131:65]>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
                debug cmp => _30;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
            }
        _0 = Option::<String>::map::<(Option<String>, Option<String>), [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65]>(move _4, move _15) -> [return: bb9, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:130:5: 132:66
            scope 4 {
                                         // mir::Constant
                debug cmp => _31;        // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
            }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:10: 132:13
            scope 5 {
                debug cmp => _32;        // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
            }
        }
    }

    bb0: {
        _3 = &((*_2).0: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _4 = &((*_2).1: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: fn(Option<String>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65]) -> Option<(Option<String>, Option<String>)> {Option::<String>::map::<(Option<String>, Option<String>), [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:132:14: 132:65]>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        drop(_12) -> bb10;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:133:1: 133:2
    }

    bb10: {
        _5 = &((*_2).2: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:133:2: 133:2
        _6 = &((*_1).0: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _7 = &((*_1).1: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _8 = &((*_1).2: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb11 (cleanup): {
        drop(_12) -> bb12;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:133:1: 133:2
    }

        _11 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _10 = _11;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    bb12 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:128:1: 133:2
    }
}

        _13 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
fn triple() -> Option<(version::Version, channel::Channel, date::Date)> {
        _12 = _13;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _9 = <usize as PartialOrd>::partial_cmp(move _10, move _12) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _0: std::option::Option<(version::Version, channel::Channel, date::Date)>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:143:20: 143:52
                                         // mir::Constant
    let _1: std::string::String;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:10: 144:21
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _2: std::string::String;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:23: 144:31
                                         // + literal: Const { ty: for<'r, 's> fn(&'r usize, &'s usize) -> Option<std::cmp::Ordering> {<usize as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }
    let mut _3: (std::string::String, std::string::String); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:35: 147:6

    bb1: {
        _15 = discriminant(_9);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _15) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb2: {
        _32 = _9;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _0 = _32;                        // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        goto -> bb13;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:16: 10:17
    }

    let mut _4: std::option::Option<(std::option::Option<std::string::String>, std::option::Option<std::string::String>)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:41: 144:63
    bb3: {
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:30: 145:40
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:15: 145:28
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:9: 145:42
    let _8: std::string::String;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:20: 145:27
        _14 = discriminant(((_9 as Some).0: std::cmp::Ordering)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _14) -> [0_i8: bb4, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb4: {
        _18 = _7;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _9: std::string::String;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:35: 145:39
        _17 = _18;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _10: std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:47: 145:54
        _20 = _4;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _11: std::string::String;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:56: 145:60
        _19 = _20;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _12: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:11: 150:39
    let mut _13: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
    let _14: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
        _16 = <usize as PartialOrd>::partial_cmp(move _17, move _19) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r usize, &'s usize) -> Option<std::cmp::Ordering> {<usize as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
    let mut _15: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
        _22 = discriminant(_16);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _16: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
        switchInt(move _22) -> [1_isize: bb7, otherwise: bb6]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _17: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:9: 151:22
    }

    bb6: {
    let mut _19: std::option::Option<channel::Channel>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:32: 151:60
    let mut _20: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
    let _21: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
        _31 = _16;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _0 = _31;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        goto -> bb13;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:16: 11:17
    }

    let mut _22: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
    bb7: {
    let _23: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
        _21 = discriminant(((_16 as Some).0: std::cmp::Ordering)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _24: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:13: 152:26
        switchInt(move _21) -> [0_i8: bb8, otherwise: bb6]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _26: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:36: 152:58
    }

    bb8: {
    let mut _27: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
    let _28: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
        _25 = _8;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _24 = _25;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _27 = _5;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _26 = _27;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _23 = <usize as PartialOrd>::partial_cmp(move _24, move _26) -> bb9; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _29: &std::string::String;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
                                         // mir::Constant
    let _30: &std::string::String;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
    let mut _31: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:17: 153:27
    let mut _33: (version::Version, channel::Channel, date::Date); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:36: 153:60
    let mut _34: version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:37: 153:44
    let mut _35: channel::Channel;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:46: 153:53
    let mut _36: date::Date;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:55: 153:59
    let mut _37: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:147:6: 147:7
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    scope 1 {
                                         // + literal: Const { ty: for<'r, 's> fn(&'r usize, &'s usize) -> Option<std::cmp::Ordering> {<usize as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
        debug version_str => _1;         // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:10: 144:21
        debug date_str => _2;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:23: 144:31
        let _18: version::Version;       // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:14: 151:21
    }

    bb9: {
        _29 = discriminant(_23);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        switchInt(move _29) -> [1_isize: bb11, otherwise: bb10]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb10: {
        _30 = _23;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        scope 3 {
            debug version => _18;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:14: 151:21
            let _25: channel::Channel;   // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:18: 152:25
            scope 4 {
                debug channel => _25;    // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:18: 152:25
                let _32: date::Date;     // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:22: 153:26
                scope 5 {
        _0 = _30;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                    debug date => _32;   // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:22: 153:26
        goto -> bb13;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:16: 12:17
                }
            }
        }
    }
    scope 2 {
    }

    bb11: {
        _28 = discriminant(((_23 as Some).0: std::cmp::Ordering)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        switchInt(move _28) -> [0_i8: bb12, otherwise: bb10]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb12: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
        debug version => _8;             // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:20: 145:27
        debug date => _9;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:35: 145:39
    }

    bb0: {
        _4 = get_version_and_date() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:41: 144:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:41: 144:61
                                         // + literal: Const { ty: fn() -> Option<(Option<String>, Option<String>)> {get_version_and_date}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        ((_0 as Some).0: std::cmp::Ordering) = const Equal; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:39: 8:49
        goto -> bb13;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:48: 8:49
    }

    bb13: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:49: 8:49
    }
}

        _7 = discriminant(_4);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:41: 144:63
        switchInt(move _7) -> [1_isize: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:35: 144:63
    }

    bb2: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:146:21: 146:25
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:146:21: 146:25
        drop(_4) -> bb20;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:147:6: 147:7
    }
fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54>::cmp(_1: &Version, _2: &Version) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54

    bb3: {
    let _3: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _4: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _6 = discriminant((((_4 as Some).0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>)).0: std::option::Option<std::string::String>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:41: 144:63
        switchInt(move _6) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:35: 144:63
    }

    bb4: {
    let _5: &usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _9: std::cmp::Ordering;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _10: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _11: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _12: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let _13: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _5 = discriminant((((_4 as Some).0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>)).1: std::option::Option<std::string::String>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:41: 144:63
        switchInt(move _5) -> [1_isize: bb5, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:35: 144:63
    }

    bb5: {
    let mut _14: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    let mut _15: std::cmp::Ordering;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _16: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _17: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _18: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let _19: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _8 = move (((((_4 as Some).0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>)).0: std::option::Option<std::string::String>) as Some).0: std::string::String); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:20: 145:27
        _9 = move (((((_4 as Some).0: (std::option::Option<std::string::String>, std::option::Option<std::string::String>)).1: std::option::Option<std::string::String>) as Some).0: std::string::String); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:35: 145:39
        _10 = move _8;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:47: 145:54
        _11 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:56: 145:60
    let mut _20: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    let mut _21: std::cmp::Ordering;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _22: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let _23: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let mut _24: &usize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    let _25: &usize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        Deinit(_3);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:46: 145:61
        (_3.0: std::string::String) = move _10; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:46: 145:61
        (_3.1: std::string::String) = move _11; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:145:46: 145:61
        _1 = move (_3.0: std::string::String); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:10: 144:21
        _2 = move (_3.1: std::string::String); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:144:23: 144:31
        _37 = discriminant(_4);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:147:6: 147:7
    let mut _26: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        debug __self_1_1 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        debug __self_1_2 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        let _6: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _37) -> [1_isize: bb25, otherwise: bb24]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:147:6: 147:7
        let _7: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

    bb6: {
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
        _12 = version::Version::parse(move _13) -> [return: bb7, unwind: bb21]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:11: 150:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:11: 150:25
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
        let _8: &usize;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        scope 2 {
            debug __self_0_0 => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb7: {
            debug __self_0_1 => _7;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
            debug __self_0_2 => _8;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
            let _27: std::cmp::Ordering; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
            let _28: std::cmp::Ordering; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _17 = discriminant(_12);         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:11: 150:39
        switchInt(move _17) -> [1_isize: bb9, otherwise: bb8]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:5: 150:39
    }

    bb8: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:158:14: 158:18
            let _29: std::cmp::Ordering; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:158:14: 158:18
            scope 3 {
        goto -> bb18;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:158:14: 158:18
    }

                debug cmp => _27;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    bb9: {
            }
            scope 4 {
                debug cmp => _28;        // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
            }
            scope 5 {
                debug cmp => _29;        // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
            }
        }
    }

    bb0: {
        _3 = &((*_2).0: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _4 = &((*_2).1: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _18 = ((_12 as Some).0: version::Version); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:14: 151:21
        _5 = &((*_2).2: usize);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _6 = &((*_1).0: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _23 = &_1;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
        _7 = &((*_1).1: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _22 = _23;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
        _8 = &((*_1).2: usize);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _11 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _21 = <String as Deref>::deref(move _22) -> [return: bb10, unwind: bb21]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
        _10 = _11;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }
        _13 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _12 = _13;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17

        _9 = <usize as Ord>::cmp(move _10, move _12) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    bb10: {
                                         // mir::Constant
        _20 = _21;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:47: 151:59
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        _19 = channel::Channel::parse(move _20) -> [return: bb11, unwind: bb21]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:32: 151:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:32: 151:46
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<channel::Channel> {channel::Channel::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
                                         // + literal: Const { ty: for<'r, 's> fn(&'r usize, &'s usize) -> std::cmp::Ordering {<usize as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _14 = discriminant(_9);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _14) -> [0_i8: bb3, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

        _24 = discriminant(_19);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:32: 151:60
    bb2: {
        _29 = _9;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
        switchInt(move _24) -> [1_isize: bb13, otherwise: bb12]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:151:26: 151:60
        _0 = _29;                        // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:5: 10:17
    }

    bb12: {
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:156:18: 156:22
        discriminant(_0) = 0;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:156:18: 156:22
        goto -> bb18;                    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:156:18: 156:22
    }

    bb13: {
        goto -> bb10;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:10:16: 10:17
    }

    bb3: {
        _17 = _7;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _16 = _17;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _19 = _4;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _18 = _19;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _15 = <usize as Ord>::cmp(move _16, move _18) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        _25 = ((_19 as Some).0: channel::Channel); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:18: 152:25
        _30 = &_2;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
        _29 = _30;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
        _28 = <String as Deref>::deref(move _29) -> [return: bb14, unwind: bb21]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r usize, &'s usize) -> std::cmp::Ordering {<usize as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _20 = discriminant(_15);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }
        switchInt(move _20) -> [0_i8: bb6, otherwise: bb5]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
    }

    bb5: {
        _28 = _15;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17

    bb14: {
        _27 = _28;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:48: 152:57
        _26 = date::Date::parse(move _27) -> [return: bb15, unwind: bb21]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:36: 152:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:36: 152:47
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _0 = _28;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:5: 11:17
        goto -> bb10;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:11:16: 11:17
    }

    bb6: {
        _23 = _8;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _22 = _23;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _25 = _5;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        _31 = discriminant(_26);         // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:36: 152:58
        _24 = _25;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        switchInt(move _31) -> [1_isize: bb17, otherwise: bb16]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:152:30: 152:58
    }

    bb16: {
        Deinit(_0);                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:154:22: 154:26
        discriminant(_0) = 0;            // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:154:22: 154:26
        goto -> bb18;                    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:154:22: 154:26
    }

    bb17: {
        _21 = <usize as Ord>::cmp(move _22, move _24) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
                                         // + literal: Const { ty: for<'r, 's> fn(&'r usize, &'s usize) -> std::cmp::Ordering {<usize as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _32 = ((_26 as Some).0: date::Date); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:22: 153:26
        _34 = _18;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:37: 153:44
        _35 = _25;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:46: 153:53
        _36 = _32;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:55: 153:59
        Deinit(_33);                     // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:36: 153:60
        (_33.0: version::Version) = move _34; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:36: 153:60
        _26 = discriminant(_21);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        switchInt(move _26) -> [0_i8: bb9, otherwise: bb8]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
    }

    bb8: {
        (_33.1: channel::Channel) = move _35; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:36: 153:60
        (_33.2: date::Date) = move _36;  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:36: 153:60
        Deinit(_0);                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:31: 153:61
        ((_0 as Some).0: (version::Version, channel::Channel, date::Date)) = move _33; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:31: 153:61
        _27 = _21;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        discriminant(_0) = 1;            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:31: 153:61
        _0 = _27;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:5: 12:17
        goto -> bb10;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:12:16: 12:17
    }

    bb9: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54
        goto -> bb10;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:51: 8:54
    }

        goto -> bb18;                    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:153:60: 153:61
    bb10: {
    }

    bb18: {
        drop(_2) -> [return: bb19, unwind: bb22]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:160:1: 160:2
    }

    bb19: {
        drop(_1) -> bb20;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:160:1: 160:2
    }

    bb20: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:160:2: 160:2
    }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\version.rs:8:54: 8:54
    }
}


    bb21 (cleanup): {
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15>::clone(_1: &AutoCfg) -> AutoCfg {
        drop(_2) -> bb22;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:160:1: 160:2
    }

    bb22 (cleanup): {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
    let mut _0: AutoCfg;                 // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
    let _2: &std::path::PathBuf;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let _3: &std::path::PathBuf;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        drop(_1) -> bb23;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:160:1: 160:2
    let _4: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let _5: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let _6: &bool;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let _7: &std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    let mut _8: std::path::PathBuf;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let mut _9: &std::path::PathBuf;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    }

    bb23 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:143:1: 160:2
    }

    bb24: {
        _16 = &_1;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
        _15 = _16;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
        _14 = <String as Deref>::deref(move _15) -> [return: bb6, unwind: bb21]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
                                         // mir::Constant
    let _10: &std::path::PathBuf;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let mut _11: std::path::PathBuf;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    let mut _12: &std::path::PathBuf;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    let _13: &std::path::PathBuf;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    let mut _14: version::Version;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let mut _15: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:150:26: 150:38
                                         // + literal: Const { ty: for<'r> fn(&'r String) -> &'r <String as Deref>::Target {<String as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb25: {
        goto -> bb24;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:147:6: 147:7
    }
}

fn is_min_date(_1: &str) -> Option<bool> {
    let _16: &version::Version;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    debug min_date => _1;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:171:20: 171:28
    let mut _17: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _18: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:171:39: 171:51
    let _19: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _20: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let mut _21: &bool;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let mut _2: (std::option::Option<date::Date>, std::option::Option<date::Date>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:11: 172:48
    let _22: &bool;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let mut _3: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:12: 172:24
    let mut _23: std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    let mut _4: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:26: 172:47
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:38: 172:46
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:28: 173:42
    let mut _24: &std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    let _25: &std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:10: 173:26
    let _8: date::Date;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:15: 173:25
    let _9: date::Date;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:33: 173:41
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:52: 173:74
        debug __self_0_2 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let mut _11: &date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:52: 173:62
        debug __self_0_3 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _12: &date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:66: 173:74
        debug __self_0_4 => _6;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    scope 1 {
        debug __self_0_5 => _7;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    }

    bb0: {
        _2 = &((*_1).0: std::path::PathBuf); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _3 = &((*_1).1: std::path::PathBuf); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        debug rustc_date => _8;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:15: 173:25
        debug min_date => _9;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:33: 173:41
    }

        _4 = &((*_1).2: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    bb0: {
        _3 = date::Date::read() -> bb1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:12: 172:24
        _5 = &((*_1).3: std::option::Option<std::ffi::OsString>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
                                         // mir::Constant
        _6 = &((*_1).4: bool);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:12: 172:22
                                         // + literal: Const { ty: fn() -> Option<date::Date> {date::Date::read}, val: Value(Scalar(<ZST>)) }
        _7 = &((*_1).5: std::vec::Vec<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    }

    bb1: {
        _10 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _9 = _10;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:38: 172:46
        _4 = date::Date::parse(move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:26: 172:47
                                         // mir::Constant
        _8 = <PathBuf as Clone>::clone(move _9) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:26: 172:37
                                         // mir::Constant
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:11: 172:48
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
                                         // + literal: Const { ty: for<'r> fn(&'r PathBuf) -> PathBuf {<PathBuf as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _13 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        (_2.0: std::option::Option<date::Date>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:11: 172:48
        _12 = _13;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        (_2.1: std::option::Option<date::Date>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:11: 172:48
        _7 = discriminant((_2.0: std::option::Option<date::Date>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:11: 172:48
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:5: 172:48
    }

    bb3: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:174:14: 174:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:174:14: 174:18
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:174:14: 174:18
    }
        _11 = <PathBuf as Clone>::clone(move _12) -> [return: bb2, unwind: bb8]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
                                         // mir::Constant

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    bb4: {
                                         // + literal: Const { ty: for<'r> fn(&'r PathBuf) -> PathBuf {<PathBuf as Clone>::clone}, val: Value(Scalar(<ZST>)) }
        _6 = discriminant((_2.1: std::option::Option<date::Date>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:11: 172:48
    }

        switchInt(move _6) -> [1_isize: bb5, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:172:5: 172:48
    bb2: {
    }
        _16 = _4;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _15 = _16;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27

    bb5: {
        _8 = (((_2.0: std::option::Option<date::Date>) as Some).0: date::Date); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:15: 173:25
        _14 = <Version as Clone>::clone(move _15) -> [return: bb3, unwind: bb7]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
                                         // + literal: Const { ty: for<'r> fn(&'r Version) -> Version {<Version as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

        _9 = (((_2.1: std::option::Option<date::Date>) as Some).0: date::Date); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:33: 173:41
        _11 = &_8;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:52: 173:62
        _12 = &_9;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:66: 173:74
    bb3: {
        _10 = <date::Date as PartialOrd>::ge(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:52: 173:74
                                         // mir::Constant
        _19 = _5;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        _18 = _19;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:52: 173:74
        _17 = <Option<OsString> as Clone>::clone(move _18) -> [return: bb4, unwind: bb7]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
                                         // mir::Constant
                                         // + literal: Const { ty: for<'r, 's> fn(&'r date::Date, &'s date::Date) -> bool {<date::Date as PartialOrd>::ge}, val: Value(Scalar(<ZST>)) }
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    }

    bb6: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:47: 173:75
                                         // + literal: Const { ty: for<'r> fn(&'r Option<OsString>) -> Option<OsString> {<Option<OsString> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _22 = _6;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        _21 = _22;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        ((_0 as Some).0: bool) = move _10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:47: 173:75
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:47: 173:75
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:173:74: 173:75
    }

    bb7: {
        _20 = (*_21);                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        _25 = _7;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        _24 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        _23 = <Vec<String> as Clone>::clone(move _24) -> [return: bb5, unwind: bb6]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:176:2: 176:2
    }
}

fn is_max_date(_1: &str) -> Option<bool> {
    debug max_date => _1;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:187:20: 187:28
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:187:39: 187:51
                                         // + literal: Const { ty: for<'r> fn(&'r Vec<String>) -> Vec<String> {<Vec<String> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    let mut _2: (std::option::Option<date::Date>, std::option::Option<date::Date>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:11: 188:48
    }

    let mut _3: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:12: 188:24
    bb5: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
        (_0.0: std::path::PathBuf) = move _8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
        (_0.1: std::path::PathBuf) = move _11; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
        (_0.2: version::Version) = move _14; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
        (_0.3: std::option::Option<std::ffi::OsString>) = move _17; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
    let mut _4: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:26: 188:47
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:38: 188:46
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:28: 189:42
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:10: 189:26
    let _8: date::Date;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:15: 189:25
    let _9: date::Date;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:33: 189:41
        (_0.4: bool) = move _20;         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
        (_0.5: std::vec::Vec<std::string::String>) = move _23; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:52: 189:74
    let mut _11: &date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:52: 189:62
    let mut _12: &date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:66: 189:74
    scope 1 {
        debug rustc_date => _8;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:15: 189:25
        debug max_date => _9;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:33: 189:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:15: 82:15
    }

    }

    bb0: {
    bb6 (cleanup): {
        drop(_17) -> bb7;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:14: 82:15
    }

    bb7 (cleanup): {
        drop(_11) -> bb8;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:14: 82:15
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:14: 82:15
    }

    bb9 (cleanup): {
        _3 = date::Date::read() -> bb1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:12: 188:24
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:10: 82:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:12: 188:22
    }
                                         // + literal: Const { ty: fn() -> Option<date::Date> {date::Date::read}, val: Value(Scalar(<ZST>)) }
}

    }

    bb1: {
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22>::fmt(_1: &AutoCfg, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:38: 188:46
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _4 = date::Date::parse(move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:26: 188:47
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:26: 188:37
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let _3: &std::path::PathBuf;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    }
    let _4: &std::path::PathBuf;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    let _5: &version::Version;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27

    bb2: {
    let _6: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:11: 188:48
    let _7: &bool;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        (_2.0: std::option::Option<date::Date>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:11: 188:48
        (_2.1: std::option::Option<date::Date>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:11: 188:48
    let _8: &std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    let mut _10: std::fmt::DebugStruct;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _11: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _12: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _7 = discriminant((_2.0: std::option::Option<date::Date>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:11: 188:48
    let _13: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:5: 188:48
    let mut _14: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    }

    bb3: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:190:14: 190:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:190:14: 190:18
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:190:14: 190:18
    }

    bb4: {
    let mut _15: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _16: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let _17: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let mut _19: &&std::path::PathBuf;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let _20: &&std::path::PathBuf;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _6 = discriminant((_2.1: std::option::Option<date::Date>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:11: 188:48
        switchInt(move _6) -> [1_isize: bb5, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:188:5: 188:48
    }

    bb5: {
        _8 = (((_2.0: std::option::Option<date::Date>) as Some).0: date::Date); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:15: 189:25
        _9 = (((_2.1: std::option::Option<date::Date>) as Some).0: date::Date); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:33: 189:41
        _11 = &_8;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:52: 189:62
    let _21: &std::path::PathBuf;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
    let mut _22: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _23: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _12 = &_9;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:66: 189:74
        _10 = <date::Date as PartialOrd>::le(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:52: 189:74
    let mut _24: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:52: 189:74
    let _25: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
                                         // + literal: Const { ty: for<'r, 's> fn(&'r date::Date, &'s date::Date) -> bool {<date::Date as PartialOrd>::le}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
    let mut _26: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:47: 189:75
        ((_0 as Some).0: bool) = move _10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:47: 189:75
    let mut _27: &&std::path::PathBuf;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:47: 189:75
    let _28: &&std::path::PathBuf;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:189:74: 189:75
    let _29: &std::path::PathBuf;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    }
    let mut _30: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _31: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _32: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:192:2: 192:2
    }
}

fn is_exact_date(_1: &str) -> Option<bool> {
    let _33: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let mut _34: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let mut _35: &&version::Version;     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    debug date => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:203:22: 203:26
    let _36: &&version::Version;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let _37: &version::Version;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
    let mut _38: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:203:37: 203:49
    let mut _39: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _40: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let _41: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _2: (std::option::Option<date::Date>, std::option::Option<date::Date>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:11: 204:44
    let mut _42: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _3: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:12: 204:24
    let mut _43: &&std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _4: std::option::Option<date::Date>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:26: 204:43
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:38: 204:42
    let _44: &&std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let _45: &std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _46: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _47: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:28: 205:38
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:10: 205:26
    let _8: date::Date;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:15: 205:25
    let _9: date::Date;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:33: 205:37
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:48: 205:66
    let mut _11: &date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:48: 205:58
    let mut _48: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let _49: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let mut _50: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let mut _12: &date::Date;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:62: 205:66
    scope 1 {
        debug rustc_date => _8;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:15: 205:25
        debug date => _9;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:33: 205:37
    }

    let mut _51: &&bool;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let _52: &&bool;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    let _53: &bool;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
    bb0: {
    let mut _54: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _3 = date::Date::read() -> bb1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:12: 204:24
    let mut _55: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
    let mut _56: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:12: 204:22
    let _57: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    let mut _58: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
                                         // + literal: Const { ty: fn() -> Option<date::Date> {date::Date::read}, val: Value(Scalar(<ZST>)) }
    let mut _59: &&std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    }

    bb1: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:38: 204:42
    let _60: &&std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        _4 = date::Date::parse(move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:26: 204:43
    let _61: &std::vec::Vec<std::string::String>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:26: 204:37
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<date::Date> {date::Date::parse}, val: Value(Scalar(<ZST>)) }
    let mut _62: &mut std::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    }
    scope 1 {

    bb2: {
        debug __self_0_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        debug __self_0_1 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        debug __self_0_2 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:11: 204:44
        debug __self_0_3 => _6;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        (_2.0: std::option::Option<date::Date>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:11: 204:44
        debug __self_0_4 => _7;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        (_2.1: std::option::Option<date::Date>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:11: 204:44
        _7 = discriminant((_2.0: std::option::Option<date::Date>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:11: 204:44
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:5: 204:44
    }

        debug __self_0_5 => _8;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    bb3: {
        let _9: &mut std::fmt::DebugStruct; // in scope 1 at no-location
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:206:14: 206:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:206:14: 206:18
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:206:14: 206:18
    }

    bb4: {
        _6 = discriminant((_2.1: std::option::Option<date::Date>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:11: 204:44
        switchInt(move _6) -> [1_isize: bb5, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:204:5: 204:44
    }

    bb5: {
        scope 2 {
            debug debug_trait_builder => _9; // in scope 2 at no-location
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: std::path::PathBuf); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _4 = &((*_1).1: std::path::PathBuf); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        _5 = &((*_1).2: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _8 = (((_2.0: std::option::Option<date::Date>) as Some).0: date::Date); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:15: 205:25
        _9 = (((_2.1: std::option::Option<date::Date>) as Some).0: date::Date); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:33: 205:37
        _11 = &_8;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:48: 205:58
        _12 = &_9;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:62: 205:66
        _10 = <date::Date as PartialEq>::eq(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:48: 205:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:48: 205:66
                                         // + literal: Const { ty: for<'r, 's> fn(&'r date::Date, &'s date::Date) -> bool {<date::Date as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:43: 205:67
        ((_0 as Some).0: bool) = move _10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:43: 205:67
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:43: 205:67
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:205:66: 205:67
        _6 = &((*_1).3: std::option::Option<std::ffi::OsString>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        _7 = &((*_1).4: bool);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        _8 = &((*_1).5: std::vec::Vec<std::string::String>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        _11 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _13 = const "AutoCfg";           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:208:2: 208:2
    }
}

fn is_min_version(_1: &str) -> Option<bool> {
    debug min_version => _1;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:219:23: 219:34
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:219:45: 219:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _2: (std::option::Option<version::Version>, std::option::Option<version::Version>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:11: 220:57
    let mut _3: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:12: 220:27
        _12 = _13;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _10 = Formatter::debug_struct(move _11, move _12) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + user_ty: UserType(0)
    let mut _4: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:29: 220:56
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:44: 220:55
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:27: 221:40
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:10: 221:25
    let _8: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:15: 221:24
    let _9: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:32: 221:39
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugStruct<'b, '_> {Formatter::debug_struct}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = &mut _10;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _15 = &mut (*_9);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _17 = const "out_dir";           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:50: 221:70
    let mut _11: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:50: 221:59
    let mut _12: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:63: 221:70
    scope 1 {
        debug rustc_ver => _8;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:15: 221:24
        debug min_ver => _9;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:32: 221:39
    }

    bb0: {
        _16 = _17;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _21 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _20 = &_21;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _19 = _20;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        _3 = version::Version::read() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:12: 220:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:12: 220:25
                                         // + literal: Const { ty: fn() -> Option<version::Version> {version::Version::read}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:44: 220:55
        _4 = version::Version::parse(move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:29: 220:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:29: 220:43
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:11: 220:57
        (_2.0: std::option::Option<version::Version>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:11: 220:57
        (_2.1: std::option::Option<version::Version>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:11: 220:57
        _7 = discriminant((_2.0: std::option::Option<version::Version>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:11: 220:57
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:84:5: 84:21
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:5: 220:57
    }

        _14 = DebugStruct::field(move _15, move _16, move _18) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    bb3: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:222:14: 222:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:222:14: 222:18
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:222:14: 222:18
    }

    bb4: {
        _6 = discriminant((_2.1: std::option::Option<version::Version>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:11: 220:57
        switchInt(move _6) -> [1_isize: bb5, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:220:5: 220:57
    }

    bb5: {
                                         // mir::Constant
        _8 = (((_2.0: std::option::Option<version::Version>) as Some).0: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:15: 221:24
        _9 = (((_2.1: std::option::Option<version::Version>) as Some).0: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:32: 221:39
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _11 = &_8;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:50: 221:59
                                         // + user_ty: UserType(1)
        _12 = &_9;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:63: 221:70
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

        _10 = <version::Version as PartialOrd>::ge(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:50: 221:70
    bb2: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:50: 221:70
        _23 = &mut (*_9);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r version::Version, &'s version::Version) -> bool {<version::Version as PartialOrd>::ge}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _25 = const "rustc";             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:45: 221:71
                                         // mir::Constant
        ((_0 as Some).0: bool) = move _10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:45: 221:71
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:45: 221:71
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:221:70: 221:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        _29 = _4;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    }

        _28 = &_29;                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
    bb7: {
        _27 = _28;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:224:2: 224:2
    }
}

fn is_max_version(_1: &str) -> Option<bool> {
    debug max_version => _1;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:235:23: 235:34
        _26 = move _27 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:85:5: 85:19
        _22 = DebugStruct::field(move _23, move _24, move _26) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:235:45: 235:57
    }

    bb3: {
    let mut _2: (std::option::Option<version::Version>, std::option::Option<version::Version>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:11: 236:57
    let mut _3: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:12: 236:27
    let mut _4: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:29: 236:56
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:44: 236:55
        _31 = &mut (*_9);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _33 = const "rustc_version";     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
                                         // mir::Constant
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:27: 237:40
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:10: 237:25
    let _8: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:15: 237:24
    let _9: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:32: 237:39
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:50: 237:70
    let mut _11: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:50: 237:59
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = _33;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _37 = _5;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _36 = &_37;                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _35 = _36;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _34 = move _35 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:86:5: 86:27
        _30 = DebugStruct::field(move _31, move _32, move _34) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _39 = &mut (*_9);                // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _41 = const "target";            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _40 = _41;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    let mut _12: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:63: 237:70
        _45 = _6;                        // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
    scope 1 {
        _44 = &_45;                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        _43 = _44;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        debug rustc_ver => _8;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:15: 237:24
        _42 = move _43 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:87:5: 87:29
        debug max_ver => _9;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:32: 237:39
        _38 = DebugStruct::field(move _39, move _40, move _42) -> bb5; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    }

    bb0: {
                                         // mir::Constant
        _3 = version::Version::read() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:12: 236:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:12: 236:25
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _47 = &mut (*_9);                // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _49 = const "no_std";            // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
                                         // + literal: Const { ty: fn() -> Option<version::Version> {version::Version::read}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:44: 236:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = version::Version::parse(move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:29: 236:56
        _48 = _49;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
                                         // mir::Constant
        _53 = _7;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:29: 236:43
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _52 = &_53;                      // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        _51 = _52;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        _50 = move _51 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:88:5: 88:17
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:11: 236:57
        (_2.0: std::option::Option<version::Version>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:11: 236:57
        (_2.1: std::option::Option<version::Version>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:11: 236:57
        _7 = discriminant((_2.0: std::option::Option<version::Version>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:11: 236:57
        _46 = DebugStruct::field(move _47, move _48, move _50) -> bb6; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:5: 236:57
    }

    bb3: {
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:238:14: 238:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:238:14: 238:18
    }

    bb6: {
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:238:14: 238:18
        _55 = &mut (*_9);                // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    }

    bb4: {
        _6 = discriminant((_2.1: std::option::Option<version::Version>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:11: 236:57
        _57 = const "rustflags";         // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        switchInt(move _6) -> [1_isize: bb5, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:236:5: 236:57
    }

    bb5: {
                                         // mir::Constant
        _8 = (((_2.0: std::option::Option<version::Version>) as Some).0: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:15: 237:24
        _9 = (((_2.1: std::option::Option<version::Version>) as Some).0: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:32: 237:39
        _11 = &_8;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:50: 237:59
        _12 = &_9;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:63: 237:70
        _10 = <version::Version as PartialOrd>::le(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:50: 237:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:50: 237:70
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
                                         // + literal: Const { ty: for<'r, 's> fn(&'r version::Version, &'s version::Version) -> bool {<version::Version as PartialOrd>::le}, val: Value(Scalar(<ZST>)) }
    }
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _56 = _57;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27

        _61 = _8;                        // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        _60 = &_61;                      // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
    bb6: {
        _59 = _60;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:45: 237:71
        ((_0 as Some).0: bool) = move _10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:45: 237:71
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:45: 237:71
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:237:70: 237:71
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:240:2: 240:2
    }
}

fn is_exact_version(_1: &str) -> Option<bool> {
    debug version => _1;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:250:25: 250:32
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:250:43: 250:55
    let mut _2: (std::option::Option<version::Version>, std::option::Option<version::Version>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:11: 251:53
        _58 = move _59 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:89:5: 89:27
        _54 = DebugStruct::field(move _55, move _56, move _58) -> bb7; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    let mut _3: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:12: 251:27
    bb7: {
    let mut _4: std::option::Option<version::Version>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:29: 251:52
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:44: 251:51
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:27: 252:40
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:10: 252:25
        _62 = &mut (*_9);                // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
        _0 = DebugStruct::finish(move _62) -> bb8; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
                                         // mir::Constant
    let _8: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:15: 252:24
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:17: 82:22
    let _9: version::Version;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:32: 252:39
                                         // + user_ty: UserType(7)
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:50: 252:70
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugStruct) -> Result<(), std::fmt::Error> {DebugStruct::finish}, val: Value(Scalar(<ZST>)) }
    let mut _11: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:50: 252:59
    let mut _12: &version::Version;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:63: 252:70
    scope 1 {
    }

        debug rustc_ver => _8;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:15: 252:24
    bb8: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\lib.rs:82:22: 82:22
    }
}

        debug version => _9;             // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:32: 252:39
    }

    bb0: {
        _3 = version::Version::read() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:12: 251:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:12: 251:25
                                         // + literal: Const { ty: fn() -> Option<version::Version> {version::Version::read}, val: Value(Scalar(<ZST>)) }
fn error::ErrorKind::Io(_1: std::io::Error) -> error::ErrorKind {
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
        ((_0 as Io).0: std::io::Error) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
    }

    bb1: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:44: 251:51
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
    }
}

// MIR FOR CTFE
fn error::ErrorKind::Io(_1: std::io::Error) -> error::ErrorKind {
        _4 = version::Version::parse(move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:29: 251:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:29: 251:43
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> Option<version::Version> {version::Version::parse}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:11: 251:53
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18

        (_2.0: std::option::Option<version::Version>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:11: 251:53
    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
        ((_0 as Io).0: std::io::Error) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:41:5: 41:18
    }
}

fn error::ErrorKind::Num(_1: ParseIntError) -> error::ErrorKind {
        (_2.1: std::option::Option<version::Version>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:11: 251:53
        _7 = discriminant((_2.0: std::option::Option<version::Version>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:11: 251:53
        switchInt(move _7) -> [1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:5: 251:53
    }

    bb3: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:253:14: 253:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:253:14: 253:18
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:253:14: 253:18
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
    }

    bb4: {

        _6 = discriminant((_2.1: std::option::Option<version::Version>)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:11: 251:53
    bb0: {
        switchInt(move _6) -> [1_isize: bb5, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:251:5: 251:53
    }

    bb5: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
        _8 = (((_2.0: std::option::Option<version::Version>) as Some).0: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:15: 252:24
        ((_0 as Num).0: std::num::ParseIntError) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
        _9 = (((_2.1: std::option::Option<version::Version>) as Some).0: version::Version); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:32: 252:39
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
    }
}

// MIR FOR CTFE
fn error::ErrorKind::Num(_1: ParseIntError) -> error::ErrorKind {
        _11 = &_8;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:50: 252:59
        _12 = &_9;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:63: 252:70
        _10 = <version::Version as PartialEq>::eq(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:50: 252:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:50: 252:70
                                         // + literal: Const { ty: for<'r, 's> fn(&'r version::Version, &'s version::Version) -> bool {<version::Version as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
    }
        ((_0 as Num).0: std::num::ParseIntError) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28

        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:42:5: 42:28
    }
}

fn error::ErrorKind::Utf8(_1: Utf8Error) -> error::ErrorKind {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:45: 252:71
        ((_0 as Some).0: bool) = move _10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:45: 252:71
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
        ((_0 as Utf8).0: std::str::Utf8Error) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:45: 252:71
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:252:70: 252:71
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:255:2: 255:2
    }
}

        discriminant(_0) = 2;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
    }
}

// MIR FOR CTFE
fn error::ErrorKind::Utf8(_1: Utf8Error) -> error::ErrorKind {
fn is_feature_flaggable::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:25: 270:50], _2: channel::Channel) -> bool {
    debug c => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:26: 270:27
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:29: 270:29
    let mut _3: &channel::Channel;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:29: 270:50

    bb0: {
        _3 = &_2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:29: 270:50
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
        ((_0 as Utf8).0: std::str::Utf8Error) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
        discriminant(_0) = 2;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:43:5: 43:25
    }
}

fn error::ErrorKind::Other(_1: &str) -> error::ErrorKind {
        _0 = channel::Channel::supports_features(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:29: 270:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:31: 270:48
                                         // + literal: Const { ty: for<'r> fn(&'r channel::Channel) -> bool {channel::Channel::supports_features}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:50: 270:50
    }

}

    bb0: {
fn is_feature_flaggable() -> Option<bool> {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:269:34: 269:46
        ((_0 as Other).0: &'static str) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
        discriminant(_0) = 3;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
    }
}

// MIR FOR CTFE
fn error::ErrorKind::Other(_1: &str) -> error::ErrorKind {
    let mut _1: std::option::Option<channel::Channel>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:5: 270:20
    let mut _2: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:25: 270:50]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:25: 270:50

    bb0: {
        _1 = channel::Channel::read() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:5: 270:20
                                         // mir::Constant
    let mut _0: error::ErrorKind;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24

                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:5: 270:18
    bb0: {
                                         // + literal: Const { ty: fn() -> Option<channel::Channel> {channel::Channel::read}, val: Value(Scalar(<ZST>)) }
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
        ((_0 as Other).0: &'static str) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
        discriminant(_0) = 3;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\autocfg-1.1.0\src\error.rs:44:5: 44:24
    }
}
        _0 = Option::<channel::Channel>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:25: 270:50]>(move _1, move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:5: 270:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:21: 270:24
                                         // + literal: Const { ty: fn(Option<channel::Channel>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:25: 270:50]) -> Option<bool> {Option::<channel::Channel>::map::<bool, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:270:25: 270:50]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:271:2: 271:2
    }
}

fn supports_feature::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:14: 297:37], _2: OsString) -> (OsString, char) {
    debug flags => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:15: 297:20
    let mut _0: (std::ffi::OsString, char); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:22: 297:22
    let mut _3: std::ffi::OsString;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:23: 297:28

    bb0: {
        _3 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:23: 297:28
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:22: 297:37
        (_0.0: std::ffi::OsString) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:22: 297:37
        (_0.1: char) = const '\u{1f}';   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:22: 297:37
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:37: 297:37
    }
}

fn supports_feature::{closure#1}::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:50: 298:70], _2: OsString) -> (OsString, char) {
    debug flags => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:51: 298:56
    let mut _0: (std::ffi::OsString, char); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:58: 298:58
    let mut _3: std::ffi::OsString;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:59: 298:64

    bb0: {
        _3 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:59: 298:64
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:58: 298:70
        (_0.0: std::ffi::OsString) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:58: 298:70
        (_0.1: char) = const ' ';        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:58: 298:70
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:70: 298:70
    }
}

fn supports_feature::{closure#1}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:18: 298:71]) -> Option<(OsString, char)> {
    let mut _0: std::option::Option<(std::ffi::OsString, char)>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:21: 298:21
    let mut _2: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:21: 298:45
    let mut _3: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:50: 298:70]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:50: 298:70

    bb0: {
        _2 = var_os::<&str>(const "RUSTFLAGS") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:21: 298:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:21: 298:32
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:33: 298:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _0 = Option::<OsString>::map::<(OsString, char), [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:50: 298:70]>(move _2, move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:21: 298:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:46: 298:49
                                         // + literal: Const { ty: fn(Option<OsString>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:50: 298:70]) -> Option<(OsString, char)> {Option::<OsString>::map::<(OsString, char), [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:50: 298:70]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:71: 298:71
    }
}

fn supports_feature::{closure#2}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60], _2: &str) -> &str {
    debug flag => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:19: 305:23
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:25
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:60
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:53
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:53

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:53
        _4 = core::str::<impl str>::trim_left_matches::<&str>(move _5, const "-Z") -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:30: 305:47
                                         // + literal: Const { ty: fn(&str, &str) -> &str {core::str::<impl str>::trim_left_matches::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:48: 305:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:60
        _0 = core::str::<impl str>::trim(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:25: 305:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:54: 305:58
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:60: 305:60
    }
}

fn supports_feature::{closure#3}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60], _2: &&str) -> bool {
    debug flag => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:22: 306:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:28: 306:28
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:28: 306:60
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:22: 306:26

    bb0: {
        _4 = move (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:28: 306:60
        _3 = _4;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:28: 306:60
        _0 = core::str::<impl str>::starts_with::<&str>(move _3, const ALLOW_FEATURES) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:28: 306:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:33: 306:44
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::starts_with::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:45: 306:59
                                         // + literal: Const { ty: &str, val: Unevaluated(ALLOW_FEATURES, [], None) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:60: 306:60
    }
}

fn supports_feature::{closure#4}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54], _2: &str) -> &str {
    debug flag => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:19: 307:23
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:26: 307:54
    let mut _3: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:26: 307:30
    let mut _4: std::ops::RangeFrom<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:53
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:51
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:51
    let _7: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:45

    bb0: {
        _3 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:26: 307:30
        _7 = const ALLOW_FEATURES;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:45
                                         // + literal: Const { ty: &str, val: Unevaluated(ALLOW_FEATURES, [], None) }
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:51
        _5 = core::str::<impl str>::len(move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:46: 307:49
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> usize {core::str::<impl str>::len}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:53
        (_4.0: usize) = move _5;         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:31: 307:53
        _0 = <str as Index<RangeFrom<usize>>>::index(move _3, move _4) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:26: 307:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:26: 307:54
                                         // + literal: Const { ty: for<'r> fn(&'r str, RangeFrom<usize>) -> &'r <str as Index<RangeFrom<usize>>>::Output {<str as Index<RangeFrom<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:54: 307:54
    }
}

fn supports_feature::{closure#5}(_1: &mut [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78], _2: &str) -> bool {
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:56: 310:57
    debug feature => (*((*_1).0: &&str)); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:289:25: 289:32
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:59
    let mut _3: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:67
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:67
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:67
    let mut _6: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:71: 310:78
    let mut _7: &&str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78

    bb0: {
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:67
        _4 = core::str::<impl str>::trim(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:61: 310:65
                                         // + literal: Const { ty: for<'r> fn(&'r str) -> &'r str {core::str::<impl str>::trim}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:67
        _7 = move ((*_1).0: &&str);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:71: 310:78
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:71: 310:78
        _0 = <&str as PartialEq>::eq(move _3, move _6) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:59: 310:78
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &str, &'s &str) -> bool {<&str as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:78: 310:78
    }
}

fn supports_feature(_1: &str) -> Option<bool> {
    debug feature => _1;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:289:25: 289:32
    let mut _0: std::option::Option<bool>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:289:43: 289:55
    let mut _2: std::option::Option<bool>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:11: 290:33
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:291:9: 291:19
    let _4: std::option::Option<(std::ffi::OsString, char)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:9: 296:18
    let mut _5: std::option::Option<(std::ffi::OsString, char)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:21: 297:38
    let mut _6: std::option::Option<std::ffi::OsString>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:21: 296:59
    let mut _7: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:14: 297:37]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:14: 297:37
    let mut _8: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:18: 298:71]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:18: 298:71
    let mut _9: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:12: 300:32
    let mut _13: &std::ffi::OsStr;       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
    let _14: &std::ffi::OsStr;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
    let mut _15: &std::ffi::OsString;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
    let mut _17: std::iter::Filter<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 306:61
    let mut _18: std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 305:61
    let mut _19: std::str::Split<char>;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
    let mut _20: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
    let _21: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
    let mut _22: &std::borrow::Cow<str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
    let mut _23: char;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:46: 304:51
    let mut _24: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60
    let mut _25: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60
    let mut _26: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54
    let mut _27: std::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:39: 309:60
    let mut _28: std::iter::Map<std::iter::Filter<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:39: 309:53
    let mut _29: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:16: 309:36
    let mut _31: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:79
    let mut _32: &mut std::str::Split<char>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:79
    let mut _33: std::str::Split<char>;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:50
    let mut _34: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:50
    let mut _35: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78
    let mut _36: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78
    let mut _37: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
    let mut _38: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
    scope 1 {
        debug env_flags => _4;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:9: 296:18
        let _10: std::ffi::OsString;     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:18: 300:23
        let _11: char;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:25: 300:30
        let _12: std::borrow::Cow<str>;  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:13: 303:22
        scope 2 {
            debug flags => _10;          // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:18: 300:23
            debug delim => _11;          // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:25: 300:30
        }
        scope 3 {
            debug rustflags => _12;      // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:13: 303:22
            let _16: std::iter::Map<std::iter::Filter<std::iter::Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]>; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:13: 304:27
            scope 4 {
                debug allow_features => _16; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:13: 304:27
                let _30: &str;           // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:21: 309:35
                scope 5 {
                    debug allow_features => _30; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:21: 309:35
                }
            }
        }
    }

    bb0: {
        _37 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:5: 294:6
        _2 = is_feature_flaggable() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:11: 290:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:11: 290:31
                                         // + literal: Const { ty: fn() -> Option<bool> {is_feature_flaggable}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = discriminant(_2);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:11: 290:33
        switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:5: 290:33
    }

    bb2: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:293:24: 293:28
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:293:24: 293:28
        goto -> bb27;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:293:17: 293:28
    }

    bb3: {
        switchInt(((_2 as Some).0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:5: 290:33
    }

    bb4: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:290:11: 290:33
    }

    bb5: {
        _6 = var_os::<&str>(const "CARGO_ENCODED_RUSTFLAGS") -> bb7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:21: 296:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:21: 296:32
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:33: 296:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:292:31: 292:42
        ((_0 as Some).0: bool) = const false; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:292:31: 292:42
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:292:31: 292:42
        goto -> bb27;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:292:24: 292:42
    }

    bb7: {
        _5 = Option::<OsString>::map::<(OsString, char), [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:14: 297:37]>(move _6, move _7) -> bb8; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:21: 297:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:10: 297:13
                                         // + literal: Const { ty: fn(Option<OsString>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:14: 297:37]) -> Option<(OsString, char)> {Option::<OsString>::map::<(OsString, char), [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:297:14: 297:37]>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _4 = Option::<(OsString, char)>::or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:18: 298:71]>(move _5, move _8) -> bb9; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:296:21: 298:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:10: 298:17
                                         // + literal: Const { ty: fn(Option<(OsString, char)>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:18: 298:71]) -> Option<(OsString, char)> {Option::<(OsString, char)>::or_else::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:18: 298:71]>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _37 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:298:71: 298:72
        _9 = discriminant(_4);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:12: 300:32
        switchInt(move _9) -> [1_isize: bb10, otherwise: bb24]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:12: 300:32
    }

    bb10: {
        _37 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:18: 300:23
        _10 = move (((_4 as Some).0: (std::ffi::OsString, char)).0: std::ffi::OsString); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:18: 300:23
        _11 = (((_4 as Some).0: (std::ffi::OsString, char)).1: char); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:300:25: 300:30
        _15 = &_10;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
        _14 = <OsString as Deref>::deref(move _15) -> [return: bb11, unwind: bb29]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
                                         // + literal: Const { ty: for<'r> fn(&'r OsString) -> &'r <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
        _12 = OsStr::to_string_lossy(move _13) -> [return: bb12, unwind: bb29]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:25: 303:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:303:31: 303:46
                                         // + literal: Const { ty: for<'r> fn(&'r OsStr) -> Cow<'r, str> {OsStr::to_string_lossy}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _22 = &_12;                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
        _21 = <Cow<str> as Deref>::deref(move _22) -> [return: bb13, unwind: bb28]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
                                         // + literal: Const { ty: for<'r> fn(&'r Cow<str>) -> &'r <Cow<str> as Deref>::Target {<Cow<str> as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _20 = _21;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
        _23 = _11;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:46: 304:51
        _19 = core::str::<impl str>::split::<char>(move _20, move _23) -> [return: bb14, unwind: bb28]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 304:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:40: 304:45
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _18 = <std::str::Split<char> as Iterator>::map::<&str, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>(move _19, move _24) -> [return: bb15, unwind: bb28]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 305:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:14: 305:17
                                         // + literal: Const { ty: fn(std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]) -> Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]> {<std::str::Split<char> as Iterator>::map::<&str, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _17 = <Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>(move _18, move _25) -> [return: bb16, unwind: bb28]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 306:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:14: 306:20
                                         // + literal: Const { ty: fn(Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]) -> Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]> {<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]> as Iterator>::filter::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _16 = <Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]> as Iterator>::map::<&str, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]>(move _17, move _26) -> [return: bb17, unwind: bb28]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:304:30: 307:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:14: 307:17
                                         // + literal: Const { ty: fn(Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]) -> Map<Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]> {<Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]> as Iterator>::map::<&str, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _28 = move _16;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:39: 309:53
        _27 = <Map<Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]> as Iterator>::last(move _28) -> [return: bb18, unwind: bb28]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:39: 309:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:54: 309:58
                                         // + literal: Const { ty: fn(Map<Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]>) -> Option<<Map<Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]> as Iterator>::Item> {<Map<Filter<Map<std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:305:18: 305:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:306:21: 306:60]>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:307:18: 307:54]> as Iterator>::last}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _29 = discriminant(_27);         // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:16: 309:36
        switchInt(move _29) -> [1_isize: bb19, otherwise: bb22]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:16: 309:36
    }

    bb19: {
        _30 = ((_27 as Some).0: &str);   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:309:21: 309:35
        _34 = _30;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:50
        _33 = core::str::<impl str>::split::<char>(move _34, const ',') -> [return: bb20, unwind: bb28]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:40: 310:45
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<char> {core::str::<impl str>::split::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _32 = &mut _33;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:79
        _36 = &_1;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78
        Deinit(_35);                     // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78
        (_35.0: &&str) = move _36;       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78
        _31 = <std::str::Split<char> as Iterator>::any::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78]>(move _32, move _35) -> [return: bb21, unwind: bb28]; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:25: 310:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:51: 310:54
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::str::Split<char>, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78]) -> bool {<std::str::Split<char> as Iterator>::any::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:55: 310:78]>}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        Deinit(_0);                      // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:20: 310:80
        ((_0 as Some).0: bool) = move _31; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:20: 310:80
        discriminant(_0) = 1;            // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:310:20: 310:80
        drop(_12) -> [return: bb25, unwind: bb29]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:312:5: 312:6
    }

    bb22: {
        drop(_12) -> [return: bb23, unwind: bb29]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:312:5: 312:6
    }

    bb23: {
        drop(_10) -> bb24;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:312:5: 312:6
    }

    bb24: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:316:5: 316:15
        ((_0 as Some).0: bool) = const true; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:316:5: 316:15
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:316:5: 316:15
        _38 = discriminant(_4);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
        switchInt(move _38) -> [1_isize: bb32, otherwise: bb31]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
    }

    bb25: {
        drop(_10) -> bb26;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:312:5: 312:6
    }

    bb26: {
        _37 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
        goto -> bb27;                    // scope 0 at no-location
    }

    bb27: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:2: 317:2
    }

    bb28 (cleanup): {
        drop(_12) -> bb29;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:312:5: 312:6
    }

    bb29 (cleanup): {
        drop(_10) -> bb30;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:312:5: 312:6
    }

    bb30 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:289:1: 317:2
    }

    bb31: {
        _37 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
        goto -> bb27;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:2: 317:2
    }

    bb32: {
        switchInt(_37) -> [false: bb31, otherwise: bb33]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
    }

    bb33: {
        drop((((_4 as Some).0: (std::ffi::OsString, char)).0: std::ffi::OsString)) -> bb31; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:317:1: 317:2
    }
}

const ALLOW_FEATURES: &str = {
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:301:31: 301:43

    bb0: {
        _0 = const "allow-features=";    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:301:46: 301:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:301:46: 301:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\lib.rs:301:9: 301:64
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19>::eq(_1: &version::Version, _2: &version::Version) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19
    let _3: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _5: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _6: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        let _4: &u64;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        }
    }

    bb0: {
        _3 = &((*_2).0: u64);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _4 = &((*_1).0: u64);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _5 = (*_4);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _6 = (*_3);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _0 = Eq(move _5, move _6);       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:19: 4:19
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19>::ne(_1: &version::Version, _2: &version::Version) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:10: 4:19
    let _3: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _5: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _6: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        let _4: &u64;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        }
    }

    bb0: {
        _3 = &((*_2).0: u64);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _4 = &((*_1).0: u64);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _5 = (*_4);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _6 = (*_3);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _0 = Ne(move _5, move _6);       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:19: 4:19
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:21: 4:23>::assert_receiver_is_total_eq(_1: &version::Version) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:21: 4:23
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:21: 4:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:23: 4:23
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:31: 4:36>::clone(_1: &version::Version) -> version::Version {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:31: 4:36
    let mut _0: version::Version;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:31: 4:36
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:31: 4:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:36: 4:36
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48>::partial_cmp(_1: &version::Version, _2: &version::Version) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
    let _3: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _5: std::option::Option<std::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _6: &u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let _7: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _8: &u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let _9: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _10: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        let _4: &u64;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
            let _12: std::option::Option<std::cmp::Ordering>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
            scope 3 {
                debug cmp => _12;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
            }
        }
    }

    bb0: {
        _3 = &((*_2).0: u64);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _4 = &((*_1).0: u64);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _7 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _6 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _9 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _8 = _9;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _5 = <u64 as PartialOrd>::partial_cmp(move _6, move _8) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r u64, &'s u64) -> Option<std::cmp::Ordering> {<u64 as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = discriminant(_5);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        switchInt(move _11) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    }

    bb2: {
        _12 = _5;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _0 = _12;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        goto -> bb5;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:22: 5:23
    }

    bb3: {
        _10 = discriminant(((_5 as Some).0: std::cmp::Ordering)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        switchInt(move _10) -> [0_i8: bb4, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    }

    bb4: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
        ((_0 as Some).0: std::cmp::Ordering) = const Equal; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:38: 4:48
        goto -> bb5;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:47: 4:48
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:48: 4:48
    }
}

fn version::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53>::cmp(_1: &version::Version, _2: &version::Version) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53
    let _3: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _5: std::cmp::Ordering;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _6: &u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let _7: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _8: &u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let _9: &u64;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    let mut _10: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        let _4: &u64;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
            let _11: std::cmp::Ordering; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
            scope 3 {
                debug cmp => _11;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
            }
        }
    }

    bb0: {
        _3 = &((*_2).0: u64);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _4 = &((*_1).0: u64);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _7 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _6 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _9 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _8 = _9;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _5 = <u64 as Ord>::cmp(move _6, move _8) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r u64, &'s u64) -> std::cmp::Ordering {<u64 as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = discriminant(_5);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        switchInt(move _10) -> [0_i8: bb3, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
    }

    bb2: {
        _11 = _5;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        _0 = _11;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:20: 5:23
        goto -> bb4;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:22: 5:23
    }

    bb3: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53
        goto -> bb4;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:50: 4:53
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:4:53: 4:53
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15>::fmt(_1: &Kind, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _3: (&channel::Kind,);       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _4: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _6: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _9: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _12: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _13: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let _14: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _15: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _16: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let _17: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    let mut _18: &channel::Kind;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        (_3.0: &channel::Kind) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _18 = move (_3.0: &channel::Kind); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _5 = discriminant((*_18));       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb4, 2_isize: bb5, 3_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    }

    bb1: {
        _15 = &mut (*_2);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _17 = const "Stable";            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _0 = Formatter::write_str(move _15, move _16) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, &'s str) -> Result<(), std::fmt::Error> {Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
    }

    bb3: {
        _6 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _8 = const "Dev";                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _0 = Formatter::write_str(move _6, move _7) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, &'s str) -> Result<(), std::fmt::Error> {Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _9 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _11 = const "Nightly";           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _0 = Formatter::write_str(move _9, move _10) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, &'s str) -> Result<(), std::fmt::Error> {Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = &mut (*_2);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _14 = const "Beta";              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
        _0 = Formatter::write_str(move _12, move _13) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:10: 3:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, &'s str) -> Result<(), std::fmt::Error> {Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:15: 3:15
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26>::eq(_1: &Kind, _2: &Kind) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let _3: isize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _4: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let _5: &channel::Kind;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _7: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let _8: &channel::Kind;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    let mut _12: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        let _6: isize;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _3 = discriminant((*_4));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _6 = discriminant((*_7));        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _11 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _12 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _10 = Eq(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        _9 = move _10;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    }

    bb1: {
        _0 = const true;                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    }

    bb2: {
        _0 = const false;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
        goto -> bb3;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:17: 3:26
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:26: 3:26
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:28: 3:30>::assert_receiver_is_total_eq(_1: &Kind) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:28: 3:30
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:28: 3:30

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:30: 3:30
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:38: 3:43>::clone(_1: &Kind) -> Kind {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:38: 3:43
    let mut _0: channel::Kind;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:38: 3:43

    bb0: {
        _0 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:38: 3:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:3:43: 3:43
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15>::fmt(_1: &channel::Channel, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let _3: &channel::Kind;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _5: std::fmt::DebugTuple;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let mut _6: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let mut _9: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let mut _10: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _12: &&channel::Kind;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let _13: &&channel::Kind;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let _14: &channel::Kind;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _15: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        let _4: &mut std::fmt::DebugTuple; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
        scope 2 {
            debug debug_trait_builder => _4; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
            scope 3 {
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: channel::Kind);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _6 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
        _8 = const "Channel";            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
        _5 = Formatter::debug_tuple(move _6, move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &mut _5;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
        _10 = &mut (*_4);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
        _14 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _13 = &_14;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _12 = _13;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _9 = DebugTuple::field(move _10, move _11) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = &mut (*_4);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
        _0 = DebugTuple::finish(move _15) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:10: 12:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), std::fmt::Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:15: 12:15
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26>::eq(_1: &channel::Channel, _2: &channel::Channel) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26
    let _3: &channel::Kind;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _5: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _6: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        let _4: &channel::Kind;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        }
    }

    bb0: {
        _3 = &((*_2).0: channel::Kind);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _4 = &((*_1).0: channel::Kind);  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _5 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _6 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _0 = <Kind as PartialEq>::eq(move _5, move _6) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
                                         // + literal: Const { ty: for<'r, 's> fn(&'r Kind, &'s Kind) -> bool {<Kind as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:26: 12:26
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26>::ne(_1: &channel::Channel, _2: &channel::Channel) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:17: 12:26
    let _3: &channel::Kind;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _5: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    let mut _6: &channel::Kind;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        let _4: &channel::Kind;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        }
    }

    bb0: {
        _3 = &((*_2).0: channel::Kind);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _4 = &((*_1).0: channel::Kind);  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _5 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _6 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
        _0 = <Kind as PartialEq>::ne(move _5, move _6) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:20: 13:24
                                         // + literal: Const { ty: for<'r, 's> fn(&'r Kind, &'s Kind) -> bool {<Kind as PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:26: 12:26
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:28: 12:30>::assert_receiver_is_total_eq(_1: &channel::Channel) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:28: 12:30
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:28: 12:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:30: 12:30
    }
}

fn channel::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:38: 12:43>::clone(_1: &channel::Channel) -> channel::Channel {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:38: 12:43
    let mut _0: channel::Channel;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:38: 12:43
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:38: 12:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:12:43: 12:43
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15>::fmt(_1: &date::Date, _2: &mut Formatter) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let _3: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _5: std::fmt::DebugTuple;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let mut _6: &mut std::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let mut _7: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let _8: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let mut _9: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let mut _10: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _12: &&u32;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let _13: &&u32;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let _14: &u32;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _15: &mut std::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
    scope 1 {
        debug __self_0_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        let _4: &mut std::fmt::DebugTuple; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
        scope 2 {
            debug debug_trait_builder => _4; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
            scope 3 {
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: u32);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _6 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
        _8 = const "Date";               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
        _5 = Formatter::debug_tuple(move _6, move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &mut _5;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
        _10 = &mut (*_4);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
        _14 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _13 = &_14;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _12 = _13;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _9 = DebugTuple::field(move _10, move _11) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = &mut (*_4);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
        _0 = DebugTuple::finish(move _15) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:10: 5:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), std::fmt::Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:15: 5:15
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26>::eq(_1: &date::Date, _2: &date::Date) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26
    let _3: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _5: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        let _4: &u32;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        }
    }

    bb0: {
        _3 = &((*_2).0: u32);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _4 = &((*_1).0: u32);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _5 = (*_4);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _6 = (*_3);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _0 = Eq(move _5, move _6);       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:26: 5:26
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26>::ne(_1: &date::Date, _2: &date::Date) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:17: 5:26
    let _3: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _5: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        let _4: &u32;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        }
    }

    bb0: {
        _3 = &((*_2).0: u32);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _4 = &((*_1).0: u32);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _5 = (*_4);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _6 = (*_3);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _0 = Ne(move _5, move _6);       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:26: 5:26
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:28: 5:30>::assert_receiver_is_total_eq(_1: &date::Date) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:28: 5:30
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:28: 5:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:30: 5:30
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:38: 5:43>::clone(_1: &date::Date) -> date::Date {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:38: 5:43
    let mut _0: date::Date;              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:38: 5:43
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:38: 5:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:43: 5:43
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55>::partial_cmp(_1: &date::Date, _2: &date::Date) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
    let _3: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _5: std::option::Option<std::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _6: &u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let _7: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _8: &u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let _9: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _10: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        let _4: &u32;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
            let _12: std::option::Option<std::cmp::Ordering>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
            scope 3 {
                debug cmp => _12;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
            }
        }
    }

    bb0: {
        _3 = &((*_2).0: u32);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _4 = &((*_1).0: u32);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _7 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _6 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _9 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _8 = _9;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _5 = <u32 as PartialOrd>::partial_cmp(move _6, move _8) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
                                         // + literal: Const { ty: for<'r, 's> fn(&'r u32, &'s u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = discriminant(_5);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        switchInt(move _11) -> [1_isize: bb3, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    }

    bb2: {
        _12 = _5;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _0 = _12;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        goto -> bb5;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:19: 6:20
    }

    bb3: {
        _10 = discriminant(((_5 as Some).0: std::cmp::Ordering)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        switchInt(move _10) -> [0_i8: bb4, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    }

    bb4: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
        ((_0 as Some).0: std::cmp::Ordering) = const Equal; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:45: 5:55
        goto -> bb5;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:54: 5:55
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:55: 5:55
    }
}

fn date::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60>::cmp(_1: &date::Date, _2: &date::Date) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60
    let _3: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _5: std::cmp::Ordering;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _6: &u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let _7: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _8: &u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let _9: &u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    let mut _10: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        let _4: &u32;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
            let _11: std::cmp::Ordering; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
            scope 3 {
                debug cmp => _11;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
            }
        }
    }

    bb0: {
        _3 = &((*_2).0: u32);            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _4 = &((*_1).0: u32);            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _7 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _6 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _9 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _8 = _9;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _5 = <u32 as Ord>::cmp(move _6, move _8) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
                                         // + literal: Const { ty: for<'r, 's> fn(&'r u32, &'s u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = discriminant(_5);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        switchInt(move _10) -> [0_i8: bb3, otherwise: bb2]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
    }

    bb2: {
        _11 = _5;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        _0 = _11;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:17: 6:20
        goto -> bb4;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:19: 6:20
    }

    bb3: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60
        goto -> bb4;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:57: 5:60
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:5:60: 5:60
    }
}

fn version::Version(_1: u64) -> version::Version {
    let mut _0: version::Version;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25
        (_0.0: u64) = move _1;           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25
    }
}

// MIR FOR CTFE
fn version::Version(_1: u64) -> version::Version {
    let mut _0: version::Version;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25
        (_0.0: u64) = move _1;           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\version.rs:5:1: 5:25
    }
}

fn channel::Channel(_1: Kind) -> channel::Channel {
    let mut _0: channel::Channel;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26
        (_0.0: channel::Kind) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26
    }
}

// MIR FOR CTFE
fn channel::Channel(_1: Kind) -> channel::Channel {
    let mut _0: channel::Channel;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26
        (_0.0: channel::Kind) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\channel.rs:13:1: 13:26
    }
}

fn date::Date(_1: u32) -> date::Date {
    let mut _0: date::Date;              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22
        (_0.0: u32) = move _1;           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22
    }
}

// MIR FOR CTFE
fn date::Date(_1: u32) -> date::Date {
    let mut _0: date::Date;              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22
        (_0.0: u32) = move _1;           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\version_check-0.9.4\src\date.rs:6:1: 6:22
    }
}
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::is_left(_1: &Either<L, R>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:121:20: 121:25
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:121:30: 121:34
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:123:13: 123:20

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:122:15: 122:20
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:122:9: 122:20
    }

    bb1: {
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:124:25: 124:30
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:124:25: 124:30
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:122:15: 122:20
    }

    bb3: {
        _0 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:123:24: 123:28
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:123:24: 123:28
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:126:6: 126:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::is_right(_1: &Either<L, R>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:137:21: 137:26
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:137:31: 137:35
    let mut _2: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:138:10: 138:24
    let mut _3: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:138:10: 138:24

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:138:10: 138:24
        _2 = Either::<L, R>::is_left(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:138:10: 138:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:138:15: 138:22
                                         // + literal: Const { ty: for<'r> fn(&'r Either<L, R>) -> bool {Either::<L, R>::is_left}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = Not(move _2);               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:138:9: 138:24
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:139:6: 139:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::left(_1: Either<L, R>) -> Option<L> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:152:17: 152:21
    let mut _0: core::option::Option<L>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:152:26: 152:35
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:13: 154:20
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:18: 154:19
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:29: 154:30
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:157:5: 157:6
    scope 1 {
        debug l => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:18: 154:19
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:153:15: 153:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:153:9: 153:19
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:155:25: 155:29
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:155:25: 155:29
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:155:25: 155:29
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:153:15: 153:19
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:18: 154:19
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:29: 154:30
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:24: 154:31
        ((_0 as Some).0: L) = move _4;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:24: 154:31
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:154:24: 154:31
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:157:5: 157:6
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:157:6: 157:6
    }

    bb5: {
        drop(_1) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:157:5: 157:6
    }

    bb6: {
        _5 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:157:5: 157:6
        switchInt(move _5) -> [0_isize: bb4, otherwise: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:157:5: 157:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::right(_1: Either<L, R>) -> Option<R> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:170:18: 170:22
    let mut _0: core::option::Option<R>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:170:27: 170:36
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:172:13: 172:20
    let _3: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:19: 173:20
    let mut _4: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:30: 173:31
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:175:5: 175:6
    scope 1 {
        debug r => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:19: 173:20
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:171:15: 171:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:171:9: 171:19
    }

    bb1: {
        _3 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:19: 173:20
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:30: 173:31
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:25: 173:32
        ((_0 as Some).0: R) = move _4;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:25: 173:32
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:25: 173:32
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:173:31: 173:32
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:171:15: 171:19
    }

    bb3: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:172:24: 172:28
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:172:24: 172:28
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:172:24: 172:28
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:175:6: 175:6
    }

    bb5: {
        drop(_1) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:175:5: 175:6
    }

    bb6: {
        _5 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:175:5: 175:6
        switchInt(move _5) -> [1_isize: bb4, otherwise: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:175:5: 175:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::as_ref(_1: &Either<L, R>) -> Either<&L, &R> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:188:19: 188:24
    let mut _0: Either<&L, &R>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:188:29: 188:43
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:13: 190:28
    let _3: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:18: 190:27
    let mut _4: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:37: 190:42
    let _5: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:19: 191:28
    let mut _6: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:39: 191:44
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:18: 190:27
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:19: 191:28
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:189:15: 189:20
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:189:9: 189:20
    }

    bb1: {
        _5 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:19: 191:28
        _6 = _5;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:39: 191:44
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:33: 191:45
        ((_0 as Right).0: &R) = move _6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:33: 191:45
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:33: 191:45
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:191:44: 191:45
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:189:15: 189:20
    }

    bb3: {
        _3 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:18: 190:27
        _4 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:37: 190:42
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:32: 190:43
        ((_0 as Left).0: &L) = move _4;  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:32: 190:43
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:32: 190:43
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:190:42: 190:43
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:193:6: 193:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::as_mut(_1: &mut Either<L, R>) -> Either<&mut L, &mut R> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:213:19: 213:28
    let mut _0: Either<&mut L, &mut R>;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:213:33: 213:55
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:13: 215:32
    let _3: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:18: 215:31
    let mut _4: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:41: 215:46
    let _5: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:19: 216:32
    let mut _6: &mut R;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:43: 216:48
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:18: 215:31
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:19: 216:32
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:214:15: 214:20
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:214:9: 214:20
    }

    bb1: {
        _5 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:19: 216:32
        _6 = &mut (*_5);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:43: 216:48
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:37: 216:49
        ((_0 as Right).0: &mut R) = move _6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:37: 216:49
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:37: 216:49
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:216:48: 216:49
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:214:15: 214:20
    }

    bb3: {
        _3 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:18: 215:31
        _4 = &mut (*_3);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:41: 215:46
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:36: 215:47
        ((_0 as Left).0: &mut L) = move _4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:36: 215:47
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:36: 215:47
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:215:46: 215:47
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:218:6: 218:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::flip(_1: Either<L, R>) -> Either<R, L> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:231:17: 231:21
    let mut _0: Either<R, L>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:231:26: 231:38
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:13: 233:20
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:18: 233:19
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:30: 233:31
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:19: 234:20
    let mut _6: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:30: 234:31
    scope 1 {
        debug l => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:18: 233:19
    }
    scope 2 {
        debug r => _5;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:19: 234:20
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:232:15: 232:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:232:9: 232:19
    }

    bb1: {
        _5 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:19: 234:20
        _6 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:30: 234:31
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:25: 234:32
        ((_0 as Left).0: R) = move _6;   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:25: 234:32
        discriminant(_0) = 0;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:25: 234:32
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:234:31: 234:32
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:232:15: 232:19
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:18: 233:19
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:30: 233:31
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:24: 233:32
        ((_0 as Right).0: L) = move _4;  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:24: 233:32
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:24: 233:32
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:233:31: 233:32
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:236:6: 236:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::map_left(_1: Either<L, R>, _2: F) -> Either<M, R> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:250:27: 250:31
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:250:33: 250:34
    let mut _0: Either<M, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:250:42: 250:54
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:13: 255:20
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:18: 255:19
    let mut _5: M;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:33
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:30
    let mut _7: (L,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:33
    let mut _8: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:31: 255:32
    let _9: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:19: 256:20
    let mut _10: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:31: 256:32
    let mut _11: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:258:5: 258:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:18: 255:19
    }
    scope 2 {
        debug r => _9;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:19: 256:20
    }

    bb0: {
        _11 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:254:15: 254:19
        _11 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:254:15: 254:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:254:15: 254:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:254:9: 254:19
    }

    bb1: {
        _9 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:19: 256:20
        _10 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:31: 256:32
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:25: 256:33
        ((_0 as Right).0: R) = move _10; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:25: 256:33
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:25: 256:33
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:256:32: 256:33
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:254:15: 254:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:18: 255:19
        _11 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:30
        _6 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:30
        _8 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:31: 255:32
        Deinit(_7);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:33
        (_7.0: L) = move _8;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:33
        _5 = <F as FnOnce<(L,)>>::call_once(move _6, move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:29: 255:30
                                         // + literal: Const { ty: extern "rust-call" fn(F, (L,)) -> <F as FnOnce<(L,)>>::Output {<F as FnOnce<(L,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:24: 255:34
        ((_0 as Left).0: M) = move _5;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:24: 255:34
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:24: 255:34
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:255:33: 255:34
    }

    bb5: {
        switchInt(_11) -> [false: bb6, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:258:5: 258:6
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:258:6: 258:6
    }

    bb7: {
        drop(_2) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:258:5: 258:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::map_right(_1: Either<L, R>, _2: F) -> Either<L, S> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:272:28: 272:32
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:272:34: 272:35
    let mut _0: Either<L, S>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:272:43: 272:55
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:13: 277:20
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:18: 277:19
    let mut _5: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:29: 277:30
    let _6: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:19: 278:20
    let mut _7: S;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:35
    let mut _8: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:32
    let mut _9: (R,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:35
    let mut _10: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:33: 278:34
    let mut _11: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:280:5: 280:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:18: 277:19
    }
    scope 2 {
        debug r => _6;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:19: 278:20
    }

    bb0: {
        _11 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:276:15: 276:19
        _11 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:276:15: 276:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:276:15: 276:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:276:9: 276:19
    }

    bb1: {
        _6 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:19: 278:20
        _11 = const false;               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:32
        _8 = move _2;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:32
        _10 = move _6;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:33: 278:34
        Deinit(_9);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:35
        (_9.0: R) = move _10;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:35
        _7 = <F as FnOnce<(R,)>>::call_once(move _8, move _9) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:31: 278:32
                                         // + literal: Const { ty: extern "rust-call" fn(F, (R,)) -> <F as FnOnce<(R,)>>::Output {<F as FnOnce<(R,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:276:15: 276:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:18: 277:19
        _5 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:29: 277:30
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:24: 277:31
        ((_0 as Left).0: L) = move _5;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:24: 277:31
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:24: 277:31
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:277:30: 277:31
    }

    bb4: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:25: 278:36
        ((_0 as Right).0: S) = move _7;  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:25: 278:36
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:25: 278:36
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:278:35: 278:36
    }

    bb5: {
        switchInt(_11) -> [false: bb6, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:280:5: 280:6
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:280:6: 280:6
    }

    bb7: {
        drop(_2) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:280:5: 280:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::either(_1: Either<L, R>, _2: F, _3: G) -> T {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:298:28: 298:32
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:298:34: 298:35
    debug g => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:298:40: 298:41
    let mut _0: T;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:298:49: 298:50
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:13: 304:20
    let _5: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:18: 304:19
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:25
    let mut _7: (L,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:28
    let mut _8: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:26: 304:27
    let _9: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:19: 305:20
    let mut _10: G;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:26
    let mut _11: (R,);                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:29
    let mut _12: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:27: 305:28
    let mut _13: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    let mut _14: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    scope 1 {
        debug l => _5;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:18: 304:19
    }
    scope 2 {
        debug r => _9;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:19: 305:20
    }

    bb0: {
        _14 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:15: 303:19
        _13 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:15: 303:19
        _14 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:15: 303:19
        _13 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:15: 303:19
        _4 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:15: 303:19
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:9: 303:19
    }

    bb1: {
        _9 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:19: 305:20
        _13 = const false;               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:26
        _10 = move _3;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:26
        _12 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:27: 305:28
        Deinit(_11);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:29
        (_11.0: R) = move _12;           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:29
        _0 = <G as FnOnce<(R,)>>::call_once(move _10, move _11) -> [return: bb14, unwind: bb11]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:26
                                         // + literal: Const { ty: extern "rust-call" fn(G, (R,)) -> <G as FnOnce<(R,)>>::Output {<G as FnOnce<(R,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:303:15: 303:19
    }

    bb3: {
        _5 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:18: 304:19
        _14 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:25
        _6 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:25
        _8 = move _5;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:26: 304:27
        Deinit(_7);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:28
        (_7.0: L) = move _8;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:28
        _0 = <F as FnOnce<(L,)>>::call_once(move _6, move _7) -> [return: bb15, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:25
                                         // + literal: Const { ty: extern "rust-call" fn(F, (L,)) -> <F as FnOnce<(L,)>>::Output {<F as FnOnce<(L,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        switchInt(_13) -> [false: bb5, otherwise: bb8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb5: {
        switchInt(_14) -> [false: bb6, otherwise: bb9]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:6: 307:6
    }

    bb7 (cleanup): {
        switchInt(_14) -> [false: bb13, otherwise: bb12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb8: {
        drop(_3) -> [return: bb5, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb9: {
        drop(_2) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb10 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb11 (cleanup): {
        switchInt(_13) -> [false: bb7, otherwise: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:307:5: 307:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:298:5: 307:6
    }

    bb14: {
        goto -> bb4;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:305:25: 305:29
    }

    bb15: {
        goto -> bb4;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:304:24: 304:28
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::either_with(_1: Either<L, R>, _2: Ctx, _3: F, _4: G) -> T {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:328:38: 328:42
    debug ctx => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:328:44: 328:47
    debug f => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:328:54: 328:55
    debug g => _4;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:328:60: 328:61
    let mut _0: T;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:328:69: 328:70
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:13: 334:20
    let _6: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:18: 334:19
    let mut _7: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:25
    let mut _8: (Ctx, L);                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:33
    let mut _9: Ctx;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:26: 334:29
    let mut _10: L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:31: 334:32
    let _11: R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:19: 335:20
    let mut _12: G;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:26
    let mut _13: (Ctx, R);               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:34
    let mut _14: Ctx;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:27: 335:30
    let mut _15: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:32: 335:33
    let mut _16: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    let mut _17: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    scope 1 {
        debug l => _6;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:18: 334:19
    }
    scope 2 {
        debug r => _11;                  // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:19: 335:20
    }

    bb0: {
        _16 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:15: 333:19
        _17 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:15: 333:19
        _17 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:15: 333:19
        _16 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:15: 333:19
        _5 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:15: 333:19
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:9: 333:19
    }

    bb1: {
        _11 = move ((_1 as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:19: 335:20
        _16 = const false;               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:26
        _12 = move _4;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:26
        _14 = move _2;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:27: 335:30
        _15 = move _11;                  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:32: 335:33
        Deinit(_13);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:34
        (_13.0: Ctx) = move _14;         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:34
        (_13.1: R) = move _15;           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:34
        _0 = <G as FnOnce<(Ctx, R)>>::call_once(move _12, move _13) -> [return: bb14, unwind: bb11]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:26
                                         // + literal: Const { ty: extern "rust-call" fn(G, (Ctx, R)) -> <G as FnOnce<(Ctx, R)>>::Output {<G as FnOnce<(Ctx, R)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:333:15: 333:19
    }

    bb3: {
        _6 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:18: 334:19
        _17 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:25
        _7 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:25
        _9 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:26: 334:29
        _10 = move _6;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:31: 334:32
        Deinit(_8);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:33
        (_8.0: Ctx) = move _9;           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:33
        (_8.1: L) = move _10;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:33
        _0 = <F as FnOnce<(Ctx, L)>>::call_once(move _7, move _8) -> [return: bb15, unwind: bb11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:25
                                         // + literal: Const { ty: extern "rust-call" fn(F, (Ctx, L)) -> <F as FnOnce<(Ctx, L)>>::Output {<F as FnOnce<(Ctx, L)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        switchInt(_16) -> [false: bb5, otherwise: bb8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb5: {
        switchInt(_17) -> [false: bb6, otherwise: bb9]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:6: 337:6
    }

    bb7 (cleanup): {
        switchInt(_17) -> [false: bb13, otherwise: bb12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb8: {
        drop(_4) -> [return: bb5, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb9: {
        drop(_3) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb10 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb11 (cleanup): {
        switchInt(_16) -> [false: bb7, otherwise: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb12 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:337:5: 337:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:328:5: 337:6
    }

    bb14: {
        goto -> bb4;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:335:25: 335:34
    }

    bb15: {
        goto -> bb4;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:334:24: 334:33
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::left_and_then(_1: Either<L, R>, _2: F) -> Either<S, R> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:350:32: 350:36
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:350:38: 350:39
    let mut _0: Either<S, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:350:47: 350:59
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:13: 355:20
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:18: 355:19
    let mut _5: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:25
    let mut _6: (L,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:28
    let mut _7: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:26: 355:27
    let _8: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:19: 356:20
    let mut _9: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:31: 356:32
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:358:5: 358:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:18: 355:19
    }
    scope 2 {
        debug r => _8;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:19: 356:20
    }

    bb0: {
        _10 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:354:15: 354:19
        _10 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:354:15: 354:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:354:15: 354:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:354:9: 354:19
    }

    bb1: {
        _8 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:19: 356:20
        _9 = move _8;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:31: 356:32
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:25: 356:33
        ((_0 as Right).0: R) = move _9;  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:25: 356:33
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:25: 356:33
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:356:32: 356:33
    }

// WARNING: This output format is intended for human consumers only
    bb2: {
// and is subject to change without notice. Knock yourself out.
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:354:15: 354:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:18: 355:19
        _10 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:25
        _5 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:25
        _7 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:26: 355:27
        Deinit(_6);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:28
        (_6.0: L) = move _7;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:28
        _0 = <F as FnOnce<(L,)>>::call_once(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:355:24: 355:25
                                         // + literal: Const { ty: extern "rust-call" fn(F, (L,)) -> <F as FnOnce<(L,)>>::Output {<F as FnOnce<(L,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        switchInt(_10) -> [false: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:358:5: 358:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:358:6: 358:6
    }

    bb6: {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:358:5: 358:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::right_and_then(_1: Either<L, R>, _2: F) -> Either<L, S> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:371:33: 371:37
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:371:39: 371:40
    let mut _0: Either<L, S>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:371:48: 371:60
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:13: 376:20
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:18: 376:19
    let mut _5: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:29: 376:30
    let _6: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:19: 377:20
    let mut _7: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:26
    let mut _8: (R,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:29
    let mut _9: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:27: 377:28
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:379:5: 379:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:18: 376:19
    }
    scope 2 {
        debug r => _6;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:19: 377:20
    }

    bb0: {
        _10 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:375:15: 375:19
        _10 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:375:15: 375:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:375:15: 375:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:375:9: 375:19
    }

    bb1: {
        _6 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:19: 377:20
        _10 = const false;               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:26
        _7 = move _2;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:26
        _9 = move _6;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:27: 377:28
        Deinit(_8);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:29
        (_8.0: R) = move _9;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:29
        _0 = <F as FnOnce<(R,)>>::call_once(move _7, move _8) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:377:25: 377:26
                                         // + literal: Const { ty: extern "rust-call" fn(F, (R,)) -> <F as FnOnce<(R,)>>::Output {<F as FnOnce<(R,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:375:15: 375:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:18: 376:19
        _5 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:29: 376:30
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:24: 376:31
        ((_0 as Left).0: L) = move _5;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:24: 376:31
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:24: 376:31
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:376:30: 376:31
    }

    bb4: {
        switchInt(_10) -> [false: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:379:5: 379:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:379:6: 379:6
    }

    bb6: {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:379:5: 379:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::into_iter(_1: Either<L, R>) -> Either<<L as IntoIterator>::IntoIter, <R as IntoIterator>::IntoIter> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:391:22: 391:26
    let mut _0: Either<<L as core::iter::IntoIterator>::IntoIter, <R as core::iter::IntoIterator>::IntoIter>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:391:31: 391:63
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:13: 397:20
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:18: 397:19
    let mut _4: <L as core::iter::IntoIterator>::IntoIter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:29: 397:42
    let mut _5: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:29: 397:30
    let _6: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:19: 398:20
    let mut _7: <R as core::iter::IntoIterator>::IntoIter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:31: 398:44
    let mut _8: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:31: 398:32
    scope 1 {
        debug l => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:18: 397:19
    }
    scope 2 {
        debug r => _6;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:19: 398:20
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:396:15: 396:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:396:9: 396:19
    }

    bb1: {
        _6 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:19: 398:20
        _8 = move _6;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:31: 398:32
        _7 = <R as IntoIterator>::into_iter(move _8) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:31: 398:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:33: 398:42
                                         // + literal: Const { ty: fn(R) -> <R as IntoIterator>::IntoIter {<R as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:396:15: 396:19
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:18: 397:19
        _5 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:29: 397:30
        _4 = <L as IntoIterator>::into_iter(move _5) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:29: 397:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:31: 397:40
                                         // + literal: Const { ty: fn(L) -> <L as IntoIterator>::IntoIter {<L as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:24: 397:43
        ((_0 as Left).0: <L as core::iter::IntoIterator>::IntoIter) = move _4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:24: 397:43
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:24: 397:43
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:397:42: 397:43
    }

    bb5: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:25: 398:45
        ((_0 as Right).0: <R as core::iter::IntoIterator>::IntoIter) = move _7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:25: 398:45
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:25: 398:45
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:398:44: 398:45
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:400:6: 400:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::left_or(_1: Either<L, R>, _2: L) -> L {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:420:20: 420:24
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:420:26: 420:31
    let mut _0: L;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:420:39: 420:40
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:422:13: 422:28
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:422:26: 422:27
    let mut _5: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:422:26: 422:27
    }

    bb0: {
        _5 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:421:15: 421:19
        _5 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:421:15: 421:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:421:15: 421:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:421:9: 421:19
    }

    bb1: {
        _5 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:423:33: 423:38
        _0 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:423:33: 423:38
        goto -> bb8;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:423:33: 423:38
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:421:15: 421:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:422:26: 422:27
        _0 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:422:32: 422:33
        goto -> bb8;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }

    bb4: {
        _6 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
        switchInt(move _6) -> [0_isize: bb9, otherwise: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }

    bb5 (cleanup): {
        _7 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
        switchInt(move _7) -> [0_isize: bb6, otherwise: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:420:5: 425:6
    }

    bb7: {
        drop(_2) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }

    bb8: {
        switchInt(_5) -> [false: bb4, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }

    bb9: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:6: 425:6
    }

    bb10: {
        drop(_1) -> bb9;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }

    bb11 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:425:5: 425:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::left_or_default(_1: Either<L, R>) -> L {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:439:28: 439:32
    let mut _0: L;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:439:37: 439:38
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:444:13: 444:28
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:444:26: 444:27
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    scope 1 {
        debug l => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:444:26: 444:27
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:443:15: 443:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:443:9: 443:19
    }

    bb1: {
        _0 = <L as Default>::default() -> [return: bb10, unwind: bb9]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:445:33: 445:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:445:33: 445:43
                                         // + literal: Const { ty: fn() -> L {<L as Default>::default}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:443:15: 443:19
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:444:26: 444:27
        _0 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:444:32: 444:33
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:439:5: 447:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:6: 447:6
    }

    bb6: {
        drop(_1) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    }

    bb7: {
        _4 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
        switchInt(move _4) -> [0_isize: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    }

    bb8 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    }

    bb9 (cleanup): {
        _5 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
        switchInt(move _5) -> [0_isize: bb4, otherwise: bb8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:447:5: 447:6
    }

    bb10: {
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:445:33: 445:45
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::left_or_else(_1: Either<L, R>, _2: F) -> L {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:461:28: 461:32
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:461:34: 461:35
    let mut _0: L;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:461:43: 461:44
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:466:13: 466:28
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:466:26: 466:27
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:27: 467:28
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:34
    let mut _7: (R,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:37
    let mut _8: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:35: 467:36
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:469:5: 469:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:466:26: 466:27
    }
    scope 2 {
        debug r => _5;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:27: 467:28
    }

    bb0: {
        _9 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:465:15: 465:19
        _9 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:465:15: 465:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:465:15: 465:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:465:9: 465:19
    }

    bb1: {
        _5 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:27: 467:28
        _9 = const false;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:34
        _6 = move _2;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:34
        _8 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:35: 467:36
        Deinit(_7);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:37
        (_7.0: R) = move _8;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:37
        _0 = <F as FnOnce<(R,)>>::call_once(move _6, move _7) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:467:33: 467:34
                                         // + literal: Const { ty: extern "rust-call" fn(F, (R,)) -> <F as FnOnce<(R,)>>::Output {<F as FnOnce<(R,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:465:15: 465:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:466:26: 466:27
        _0 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:466:32: 466:33
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:466:32: 466:33
    }

    bb4: {
        switchInt(_9) -> [false: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:469:5: 469:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:469:6: 469:6
    }

    bb6: {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:469:5: 469:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::right_or(_1: Either<L, R>, _2: R) -> R {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:489:21: 489:25
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:489:27: 489:32
    let mut _0: R;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:489:40: 489:41
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:491:13: 491:28
    let _4: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:492:27: 492:28
    let mut _5: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    let mut _6: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    let mut _7: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    scope 1 {
        debug r => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:492:27: 492:28
    }

    bb0: {
        _5 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:490:15: 490:19
        _5 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:490:15: 490:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:490:15: 490:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:490:9: 490:19
    }

    bb1: {
        _4 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:492:27: 492:28
        _0 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:492:33: 492:34
        goto -> bb8;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:492:33: 492:34
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:490:15: 490:19
    }

    bb3: {
        _5 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:491:32: 491:37
        _0 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:491:32: 491:37
        goto -> bb8;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:491:32: 491:37
    }

    bb4: {
        _6 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
        switchInt(move _6) -> [1_isize: bb9, otherwise: bb10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    }

    bb5 (cleanup): {
        _7 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
        switchInt(move _7) -> [1_isize: bb6, otherwise: bb11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:489:5: 494:6
    }

    bb7: {
        drop(_2) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    }

    bb8: {
        switchInt(_5) -> [false: bb4, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    }

    bb9: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:6: 494:6
    }

    bb10: {
        drop(_1) -> bb9;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    }

    bb11 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:494:5: 494:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::right_or_default(_1: Either<L, R>) -> R {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:508:29: 508:33
    let mut _0: R;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:508:38: 508:39
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:513:13: 513:28
    let _3: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:514:27: 514:28
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
    scope 1 {
        debug r => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:514:27: 514:28
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:512:15: 512:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:512:9: 512:19
    }

    bb1: {
        _3 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:514:27: 514:28
        _0 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:514:33: 514:34
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:514:33: 514:34
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:512:15: 512:19
    }

    bb3: {
        _0 = <R as Default>::default() -> [return: bb10, unwind: bb9]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:513:32: 513:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:513:32: 513:42
                                         // + literal: Const { ty: fn() -> R {<R as Default>::default}, val: Value(Scalar(<ZST>)) }
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:508:5: 516:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:6: 516:6
    }

    bb6: {
        drop(_1) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
    }

    bb7: {
        _4 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
        switchInt(move _4) -> [1_isize: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
    }

    bb8 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
    }

    bb9 (cleanup): {
        _5 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
        switchInt(move _5) -> [1_isize: bb4, otherwise: bb8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:516:5: 516:6
    }

    bb10: {
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:513:32: 513:44
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::right_or_else(_1: Either<L, R>, _2: F) -> R {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:530:29: 530:33
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:530:35: 530:36
    let mut _0: R;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:530:44: 530:45
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:13: 535:28
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:26: 535:27
    let mut _5: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:33
    let mut _6: (L,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:36
    let mut _7: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:34: 535:35
    let _8: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:536:27: 536:28
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:538:5: 538:6
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:26: 535:27
    }
    scope 2 {
        debug r => _8;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:536:27: 536:28
    }

    bb0: {
        _9 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:534:15: 534:19
        _9 = const true;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:534:15: 534:19
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:534:15: 534:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:534:9: 534:19
    }

    bb1: {
        _8 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:536:27: 536:28
        _0 = move _8;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:536:33: 536:34
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:536:33: 536:34
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:534:15: 534:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:26: 535:27
        _9 = const false;                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:33
        _5 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:33
        _7 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:34: 535:35
        Deinit(_6);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:36
        (_6.0: L) = move _7;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:36
        _0 = <F as FnOnce<(L,)>>::call_once(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:535:32: 535:33
                                         // + literal: Const { ty: extern "rust-call" fn(F, (L,)) -> <F as FnOnce<(L,)>>::Output {<F as FnOnce<(L,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        switchInt(_9) -> [false: bb5, otherwise: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:538:5: 538:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:538:6: 538:6
    }

    bb6: {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:538:5: 538:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::unwrap_left(_1: Either<L, R>) -> L {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:559:24: 559:28
    let mut _0: L;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:564:26: 564:27
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:564:13: 564:28
    let _3: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:565:27: 565:28
    let mut _4: core::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _5: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
    let mut _6: &[&str; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
    let _7: &[&str; 1];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
    let mut _8: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _9: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _10: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _11: [core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _12: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
    let mut _13: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
    let _14: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
    scope 1 {
        debug l => _0;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:564:26: 564:27
    }
    scope 2 {
        debug r => _3;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:565:27: 565:28
        let mut _15: &[&str; 1];         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:563:15: 563:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:563:9: 563:19
    }

    bb1: {
        _3 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:565:27: 565:28
        _15 = const Either::<L, R>::unwrap_left::promoted[0]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Either::<L, R>::unwrap_left, [L, R], Some(promoted[0])) }
        _7 = _15;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
        _6 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
        _14 = &_3;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
        _13 = _14;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
        _12 = ArgumentV1::new_debug::<R>(move _13) -> [return: bb4, unwind: bb6]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:83: 566:84
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b R) -> ArgumentV1<'b> {ArgumentV1::new_debug::<R>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:563:15: 563:19
    }

    bb3: {
        _0 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:564:26: 564:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:569:6: 569:6
    }

    bb4: {
        _11 = [move _12];                // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _10 = &_11;                      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _9 = _10;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _8 = move _9 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _4 = Arguments::new_v1(move _5, move _8) -> [return: bb5, unwind: bb6]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        panic_fmt(move _4) -> bb6;       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:81
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:37
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> ! {panic_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:567:13: 567:14
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:559:5: 569:6
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::unwrap_left: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81

    bb0: {
        _1 = [const "called `Either::unwrap_left()` on a `Right` value: "]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:566:24: 566:81
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::unwrap_right(_1: Either<L, R>) -> R {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:590:25: 590:29
    let mut _0: R;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:595:27: 595:28
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:595:13: 595:29
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:26: 596:27
    let mut _4: core::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _5: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
    let mut _6: &[&str; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
    let _7: &[&str; 1];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
    let mut _8: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _9: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _10: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _11: [core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _12: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
    let mut _13: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
    let _14: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
    scope 1 {
        debug r => _0;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:595:27: 595:28
    }
    scope 2 {
        debug l => _3;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:26: 596:27
        let mut _15: &[&str; 1];         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:594:15: 594:19
        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:594:9: 594:19
    }

    bb1: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:26: 596:27
        _15 = const Either::<L, R>::unwrap_right::promoted[0]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Either::<L, R>::unwrap_right, [L, R], Some(promoted[0])) }
        _7 = _15;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
        _6 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
        _14 = &_3;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
        _13 = _14;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
        _12 = ArgumentV1::new_debug::<L>(move _13) -> [return: bb4, unwind: bb6]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:98: 596:99
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b L) -> ArgumentV1<'b> {ArgumentV1::new_debug::<L>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:594:15: 594:19
    }

    bb3: {
        _0 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:595:27: 595:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:598:6: 598:6
    }

    bb4: {
        _11 = [move _12];                // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _10 = &_11;                      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _9 = _10;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _8 = move _9 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _4 = Arguments::new_v1(move _5, move _8) -> [return: bb5, unwind: bb6]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        panic_fmt(move _4) -> bb6;       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:81
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:37
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> ! {panic_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:99: 596:100
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:590:5: 598:6
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::unwrap_right: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96

    bb0: {
        _1 = [const "called `Either::unwrap_right()` on a `Left` value: "]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:596:39: 596:96
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::expect_left(_1: Either<L, R>, _2: &str) -> L {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:619:24: 619:28
    debug msg => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:619:30: 619:33
    let mut _0: L;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:624:26: 624:27
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:624:13: 624:28
    let _4: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:27: 625:28
    let mut _5: core::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _6: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
    let mut _7: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
    let _8: &[&str; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
    let mut _9: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _10: &[core::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _11: &[core::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _12: [core::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _13: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
    let mut _14: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
    let _15: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
    let mut _16: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
    let mut _17: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
    let _18: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
    scope 1 {
        debug l => _0;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:624:26: 624:27
    }
    scope 2 {
        debug r => _4;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:27: 625:28
        let mut _19: &[&str; 2];         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:623:15: 623:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:623:9: 623:19
    }

    bb1: {
        _4 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:27: 625:28
        _19 = const Either::<L, R>::expect_left::promoted[0]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Either::<L, R>::expect_left, [L, R], Some(promoted[0])) }
        _8 = _19;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
        _7 = _8;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
        _15 = &_2;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
        _14 = _15;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
        _13 = ArgumentV1::new_display::<&str>(move _14) -> [return: bb4, unwind: bb7]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:52: 625:55
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:623:15: 623:19
    }

    bb3: {
        _0 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:624:26: 624:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:627:6: 627:6
    }

    bb4: {
        _18 = &_4;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
        _17 = _18;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
        _16 = ArgumentV1::new_debug::<R>(move _17) -> [return: bb5, unwind: bb7]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:57: 625:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b R) -> ArgumentV1<'b> {ArgumentV1::new_debug::<R>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = [move _13, move _16];      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _11 = &_12;                      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _10 = _11;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _9 = move _10 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _5 = Arguments::new_v1(move _6, move _9) -> [return: bb6, unwind: bb7]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        panic_fmt(move _5) -> bb7;       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:81
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:37
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> ! {panic_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:58: 625:59
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:619:5: 627:6
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::expect_left: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50

    bb0: {
        _1 = [const "", const ": "];     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:625:40: 625:50
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::expect_right(_1: Either<L, R>, _2: &str) -> R {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:648:25: 648:29
    debug msg => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:648:31: 648:34
    let mut _0: R;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:653:27: 653:28
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:653:13: 653:29
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:26: 654:27
    let mut _5: core::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _6: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
    let mut _7: &[&str; 2];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
    let _8: &[&str; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
    let mut _9: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _10: &[core::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _11: &[core::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let _12: [core::fmt::ArgumentV1; 2]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
    let mut _13: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
    let mut _14: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
    let _15: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
    let mut _16: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
    let mut _17: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
    let _18: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
    scope 1 {
        debug r => _0;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:653:27: 653:28
    }
    scope 2 {
        debug l => _4;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:26: 654:27
        let mut _19: &[&str; 2];         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:652:15: 652:19
        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:652:9: 652:19
    }

    bb1: {
        _4 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:26: 654:27
        _19 = const Either::<L, R>::expect_right::promoted[0]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Either::<L, R>::expect_right, [L, R], Some(promoted[0])) }
        _8 = _19;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
        _7 = _8;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
        _15 = &_2;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
        _14 = _15;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
        _13 = ArgumentV1::new_display::<&str>(move _14) -> [return: bb4, unwind: bb7]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:51: 654:54
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::new_display::<&str>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:652:15: 652:19
    }

    bb3: {
        _0 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:653:27: 653:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:656:6: 656:6
    }

    bb4: {
        _18 = &_4;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
        _17 = _18;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
        _16 = ArgumentV1::new_debug::<L>(move _17) -> [return: bb5, unwind: bb7]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:56: 654:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b L) -> ArgumentV1<'b> {ArgumentV1::new_debug::<L>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _12 = [move _13, move _16];      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _11 = &_12;                      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _10 = _11;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _9 = move _10 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
        _5 = Arguments::new_v1(move _6, move _9) -> [return: bb6, unwind: bb7]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:38: 39:80
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        panic_fmt(move _5) -> bb7;       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:81
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:39:9: 39:37
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> ! {panic_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:57: 654:58
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:648:5: 656:6
    }
}

promoted[0] in <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:111:1: 657:2>::expect_right: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
    let mut _1: [&str; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49

    bb0: {
        _1 = [const "", const ": "];     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:654:39: 654:49
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:659:1: 678:2>::factor_first(_1: Either<(T, L), (T, R)>) -> (T, Either<L, R>) {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:672:25: 672:29
    let mut _0: (T, Either<L, R>);       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:672:34: 672:51
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:13: 674:25
    let _3: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:19: 674:20
    let _4: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:22: 674:23
    let mut _5: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:30: 674:31
    let mut _6: Either<L, R>;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:33: 674:40
    let mut _7: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:38: 674:39
    let _8: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:20: 675:21
    let _9: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:23: 675:24
    let mut _10: T;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:31: 675:32
    let mut _11: Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:34: 675:42
    let mut _12: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:40: 675:41
    let mut _13: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:677:5: 677:6
    scope 1 {
        debug t => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:19: 674:20
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:22: 674:23
    }
    scope 2 {
        debug t => _8;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:20: 675:21
        debug r => _9;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:23: 675:24
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:673:15: 673:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:673:9: 673:19
    }

    bb1: {
        _8 = move (((_1 as Right).0: (T, R)).0: T); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:20: 675:21
        _9 = move (((_1 as Right).0: (T, R)).1: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:23: 675:24
        _10 = move _8;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:31: 675:32
        _12 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:40: 675:41
        Deinit(_11);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:34: 675:42
        ((_11 as Right).0: R) = move _12; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:34: 675:42
        discriminant(_11) = 1;           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:34: 675:42
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:30: 675:43
        (_0.0: T) = move _10;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:30: 675:43
        (_0.1: Either<L, R>) = move _11; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:30: 675:43
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:675:42: 675:43
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:673:15: 673:19
    }

    bb3: {
        _3 = move (((_1 as Left).0: (T, L)).0: T); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:19: 674:20
        _4 = move (((_1 as Left).0: (T, L)).1: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:22: 674:23
        _5 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:30: 674:31
        _7 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:38: 674:39
        Deinit(_6);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:33: 674:40
        ((_6 as Left).0: L) = move _7;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:33: 674:40
        discriminant(_6) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:33: 674:40
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:29: 674:41
        (_0.0: T) = move _5;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:29: 674:41
        (_0.1: Either<L, R>) = move _6;  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:29: 674:41
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:674:40: 674:41
    }

    bb4: {
        _13 = discriminant(_1);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:677:5: 677:6
        switchInt(move _13) -> [0_isize: bb6, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:677:5: 677:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:677:6: 677:6
    }

    bb6: {
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:677:5: 677:6
    }

    bb7: {
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:677:5: 677:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:680:1: 699:2>::factor_second(_1: Either<(L, T), (R, T)>) -> (Either<L, R>, T) {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:693:26: 693:30
    let mut _0: (Either<L, R>, T);       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:693:35: 693:52
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:13: 695:25
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:19: 695:20
    let _4: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:22: 695:23
    let mut _5: Either<L, R>;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:30: 695:37
    let mut _6: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:35: 695:36
    let mut _7: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:39: 695:40
    let _8: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:20: 696:21
    let _9: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:23: 696:24
    let mut _10: Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:31: 696:39
    let mut _11: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:37: 696:38
    let mut _12: T;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:41: 696:42
    let mut _13: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:698:5: 698:6
    scope 1 {
        debug l => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:19: 695:20
        debug t => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:22: 695:23
    }
    scope 2 {
        debug r => _8;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:20: 696:21
        debug t => _9;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:23: 696:24
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:694:15: 694:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:694:9: 694:19
    }

    bb1: {
        _8 = move (((_1 as Right).0: (R, T)).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:20: 696:21
        _9 = move (((_1 as Right).0: (R, T)).1: T); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:23: 696:24
        _11 = move _8;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:37: 696:38
        Deinit(_10);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:31: 696:39
        ((_10 as Right).0: R) = move _11; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:31: 696:39
        discriminant(_10) = 1;           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:31: 696:39
        _12 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:41: 696:42
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:30: 696:43
        (_0.0: Either<L, R>) = move _10; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:30: 696:43
        (_0.1: T) = move _12;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:30: 696:43
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:696:42: 696:43
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:694:15: 694:19
    }

    bb3: {
        _3 = move (((_1 as Left).0: (L, T)).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:19: 695:20
        _4 = move (((_1 as Left).0: (L, T)).1: T); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:22: 695:23
        _6 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:35: 695:36
        Deinit(_5);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:30: 695:37
        ((_5 as Left).0: L) = move _6;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:30: 695:37
        discriminant(_5) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:30: 695:37
        _7 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:39: 695:40
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:29: 695:41
        (_0.0: Either<L, R>) = move _5;  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:29: 695:41
        (_0.1: T) = move _7;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:29: 695:41
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:695:40: 695:41
    }

    bb4: {
        _13 = discriminant(_1);          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:698:5: 698:6
        switchInt(move _13) -> [0_isize: bb6, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:698:5: 698:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:698:6: 698:6
    }

    bb6: {
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:698:5: 698:6
    }

    bb7: {
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:698:5: 698:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:701:1: 737:2>::into_inner(_1: Either<T, T>) -> T {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:713:23: 713:27
    let mut _0: T;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:713:32: 713:33
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:23: 714:28
    let _4: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:23: 714:28
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:23: 714:28
    }
    scope 2 {
        debug inner => _4;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:23: 714:28
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:17: 714:21
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _4 = move ((_1 as Right).0: T);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:23: 714:28
        _0 = move _4;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:32: 714:37
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:17: 714:21
    }

    bb3: {
        _3 = move ((_1 as Left).0: T);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:23: 714:28
        _0 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:714:32: 714:37
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:715:6: 715:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:701:1: 737:2>::map(_1: Either<T, T>, _2: F) -> Either<M, M> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:728:22: 728:26
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:728:28: 728:29
    let mut _0: Either<M, M>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:728:37: 728:49
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:13: 733:20
    let _4: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:18: 733:19
    let mut _5: M;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:33
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:30
    let mut _7: (T,);                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:33
    let mut _8: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:31: 733:32
    let _9: T;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:19: 734:20
    let mut _10: M;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:35
    let mut _11: F;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:32
    let mut _12: (T,);                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:35
    let mut _13: T;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:33: 734:34
    scope 1 {
        debug l => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:18: 733:19
    }
    scope 2 {
        debug r => _9;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:19: 734:20
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:732:15: 732:19
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:732:9: 732:19
    }

    bb1: {
        _9 = move ((_1 as Right).0: T);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:19: 734:20
        _11 = move _2;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:32
        _13 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:33: 734:34
        Deinit(_12);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:35
        (_12.0: T) = move _13;           // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:35
        _10 = <F as FnOnce<(T,)>>::call_once(move _11, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:31: 734:32
                                         // + literal: Const { ty: extern "rust-call" fn(F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnOnce<(T,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:732:15: 732:19
    }

    bb3: {
        _4 = move ((_1 as Left).0: T);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:18: 733:19
        _6 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:30
        _8 = move _4;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:31: 733:32
        Deinit(_7);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:33
        (_7.0: T) = move _8;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:33
        _5 = <F as FnOnce<(T,)>>::call_once(move _6, move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:29: 733:30
                                         // + literal: Const { ty: extern "rust-call" fn(F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnOnce<(T,)>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:24: 733:34
        ((_0 as Left).0: M) = move _5;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:24: 733:34
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:24: 733:34
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:733:33: 733:34
    }

    bb5: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:25: 734:36
        ((_0 as Right).0: M) = move _10; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:25: 734:36
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:25: 734:36
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:734:35: 734:36
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:736:6: 736:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:740:1: 747:2>::from(_1: Result<R, L>) -> Either<L, R> {
    debug r => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:741:13: 741:14
    let mut _0: Either<L, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:741:33: 741:37
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:13: 743:19
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:17: 743:18
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:28: 743:29
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:16: 744:17
    let mut _6: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:28: 744:29
    scope 1 {
        debug e => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:17: 743:18
    }
    scope 2 {
        debug o => _5;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:16: 744:17
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:742:15: 742:16
        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:742:9: 742:16
    }

    bb1: {
        _5 = move ((_1 as Ok).0: R);     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:16: 744:17
        _6 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:28: 744:29
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:22: 744:30
        ((_0 as Right).0: R) = move _6;  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:22: 744:30
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:22: 744:30
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:744:29: 744:30
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:742:15: 742:16
    }

    bb3: {
        _3 = move ((_1 as Err).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:17: 743:18
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:28: 743:29
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:23: 743:30
        ((_0 as Left).0: L) = move _4;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:23: 743:30
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:23: 743:30
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:743:29: 743:30
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:746:6: 746:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:750:1: 757:2>::into(_1: Either<L, R>) -> Result<R, L> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:751:13: 751:17
    let mut _0: core::result::Result<R, L>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:751:22: 751:34
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:13: 753:20
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:18: 753:19
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:28: 753:29
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:19: 754:20
    let mut _6: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:28: 754:29
    scope 1 {
        debug l => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:18: 753:19
    }
    scope 2 {
        debug r => _5;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:19: 754:20
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:752:15: 752:19
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:752:9: 752:19
    }

    bb1: {
        _5 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:19: 754:20
        _6 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:28: 754:29
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:25: 754:30
        ((_0 as Ok).0: R) = move _6;     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:25: 754:30
        discriminant(_0) = 0;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:25: 754:30
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:754:29: 754:30
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:752:15: 752:19
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:18: 753:19
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:28: 753:29
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:24: 753:30
        ((_0 as Err).0: L) = move _4;    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:24: 753:30
        discriminant(_0) = 1;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:24: 753:30
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:753:29: 753:30
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:756:6: 756:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:759:1: 770:2>::extend(_1: &mut Either<L, R>, _2: T) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:764:18: 764:27
    debug iter => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:764:29: 764:33
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:765:5: 765:5
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _4: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:24: 768:37
    let mut _5: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:41: 768:59
    let mut _6: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:54: 768:58
    let _7: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:24: 768:37
    let mut _8: &mut R;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:41: 768:59
    let mut _9: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:54: 768:58
    scope 1 {
        debug inner => _4;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:24: 768:37
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:24: 768:37
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:17: 768:22
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _7 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:24: 768:37
        _8 = &mut (*_7);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:41: 768:59
        _9 = move _2;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:54: 768:58
        _0 = <R as Extend<A>>::extend::<T>(move _8, move _9) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:41: 768:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:47: 768:53
                                         // + literal: Const { ty: for<'r> fn(&'r mut R, T) {<R as Extend<A>>::extend::<T>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:17: 768:22
    }

    bb3: {
        _4 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:24: 768:37
        _5 = &mut (*_4);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:41: 768:59
        _6 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:54: 768:58
        _0 = <L as Extend<A>>::extend::<T>(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:41: 768:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:768:47: 768:53
                                         // + literal: Const { ty: for<'r> fn(&'r mut L, T) {<L as Extend<A>>::extend::<T>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:769:6: 769:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::next(_1: &mut Either<L, R>) -> Option<<L as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:780:13: 780:22
    let mut _0: core::option::Option<<L as core::iter::Iterator>::Item>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:780:27: 780:45
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:24: 781:37
    let mut _4: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:41: 781:53
    let _5: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:24: 781:37
    let mut _6: &mut R;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:41: 781:53
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:24: 781:37
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:24: 781:37
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:17: 781:22
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _5 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:24: 781:37
        _6 = &mut (*_5);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:41: 781:53
        _0 = <R as Iterator>::next(move _6) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:41: 781:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:47: 781:51
                                         // + literal: Const { ty: for<'r> fn(&'r mut R) -> Option<<R as Iterator>::Item> {<R as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:17: 781:22
    }

    bb3: {
        _3 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:24: 781:37
        _4 = &mut (*_3);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:41: 781:53
        _0 = <L as Iterator>::next(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:41: 781:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:781:47: 781:51
                                         // + literal: Const { ty: for<'r> fn(&'r mut L) -> Option<<L as Iterator>::Item> {<L as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:782:6: 782:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::size_hint(_1: &Either<L, R>) -> (usize, Option<usize>) {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:784:18: 784:23
    let mut _0: (usize, core::option::Option<usize>); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:784:28: 784:50
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:24: 785:33
    let mut _4: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:37: 785:54
    let _5: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:24: 785:33
    let mut _6: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:37: 785:54
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:24: 785:33
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:24: 785:33
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:17: 785:22
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _5 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:24: 785:33
        _6 = _5;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:37: 785:54
        _0 = <R as Iterator>::size_hint(move _6) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:37: 785:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:43: 785:52
                                         // + literal: Const { ty: for<'r> fn(&'r R) -> (usize, Option<usize>) {<R as Iterator>::size_hint}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:17: 785:22
    }

    bb3: {
        _3 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:24: 785:33
        _4 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:37: 785:54
        _0 = <L as Iterator>::size_hint(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:37: 785:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:785:43: 785:52
                                         // + literal: Const { ty: for<'r> fn(&'r L) -> (usize, Option<usize>) {<L as Iterator>::size_hint}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:786:6: 786:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::fold(_1: Either<L, R>, _2: Acc, _3: G) -> Acc {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:788:21: 788:25
    debug init => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:788:27: 788:31
    debug f => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:788:38: 788:39
    let mut _0: Acc;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:788:47: 788:50
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _5: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:23: 792:28
    let mut _6: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:32: 792:37
    let mut _7: Acc;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:43: 792:47
    let mut _8: G;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:49: 792:50
    let _9: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:23: 792:28
    let mut _10: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:32: 792:37
    let mut _11: Acc;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:43: 792:47
    let mut _12: G;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:49: 792:50
    scope 1 {
        debug inner => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:23: 792:28
    }
    scope 2 {
        debug inner => _9;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:23: 792:28
    }

    bb0: {
        _4 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:17: 792:21
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _9 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:23: 792:28
        _10 = move _9;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:32: 792:37
        _11 = move _2;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:43: 792:47
        _12 = move _3;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:49: 792:50
        _0 = <R as Iterator>::fold::<Acc, G>(move _10, move _11, move _12) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:32: 792:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:38: 792:42
                                         // + literal: Const { ty: fn(R, Acc, G) -> Acc {<R as Iterator>::fold::<Acc, G>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:17: 792:21
    }

    bb3: {
        _5 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:23: 792:28
        _6 = move _5;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:32: 792:37
        _7 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:43: 792:47
        _8 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:49: 792:50
        _0 = <L as Iterator>::fold::<Acc, G>(move _6, move _7, move _8) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:32: 792:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:792:38: 792:42
                                         // + literal: Const { ty: fn(L, Acc, G) -> Acc {<L as Iterator>::fold::<Acc, G>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:793:6: 793:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::count(_1: Either<L, R>) -> usize {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:795:14: 795:18
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:795:23: 795:28
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:23: 796:28
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:32: 796:37
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:23: 796:28
    let mut _6: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:32: 796:37
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:23: 796:28
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:23: 796:28
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:17: 796:21
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _5 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:23: 796:28
        _6 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:32: 796:37
        _0 = <R as Iterator>::count(move _6) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:32: 796:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:38: 796:43
                                         // + literal: Const { ty: fn(R) -> usize {<R as Iterator>::count}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:17: 796:21
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:23: 796:28
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:32: 796:37
        _0 = <L as Iterator>::count(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:32: 796:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:796:38: 796:43
                                         // + literal: Const { ty: fn(L) -> usize {<L as Iterator>::count}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:797:6: 797:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::last(_1: Either<L, R>) -> Option<<L as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:799:13: 799:17
    let mut _0: core::option::Option<<L as core::iter::Iterator>::Item>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:799:22: 799:40
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:23: 800:28
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:32: 800:37
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:23: 800:28
    let mut _6: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:32: 800:37
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:23: 800:28
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:23: 800:28
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:17: 800:21
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _5 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:23: 800:28
        _6 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:32: 800:37
        _0 = <R as Iterator>::last(move _6) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:32: 800:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:38: 800:42
                                         // + literal: Const { ty: fn(R) -> Option<<R as Iterator>::Item> {<R as Iterator>::last}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:17: 800:21
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:23: 800:28
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:32: 800:37
        _0 = <L as Iterator>::last(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:32: 800:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:800:38: 800:42
                                         // + literal: Const { ty: fn(L) -> Option<<L as Iterator>::Item> {<L as Iterator>::last}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:801:6: 801:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::nth(_1: &mut Either<L, R>, _2: usize) -> Option<<L as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:803:12: 803:21
    debug n => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:803:23: 803:24
    let mut _0: core::option::Option<<L as core::iter::Iterator>::Item>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:803:36: 803:54
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _4: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:24: 804:37
    let mut _5: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:41: 804:53
    let mut _6: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:51: 804:52
    let _7: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:24: 804:37
    let mut _8: &mut R;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:41: 804:53
    let mut _9: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:51: 804:52
    scope 1 {
        debug inner => _4;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:24: 804:37
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:24: 804:37
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:17: 804:22
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _7 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:24: 804:37
        _8 = &mut (*_7);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:41: 804:53
        _9 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:51: 804:52
        _0 = <R as Iterator>::nth(move _8, move _9) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:41: 804:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:47: 804:50
                                         // + literal: Const { ty: for<'r> fn(&'r mut R, usize) -> Option<<R as Iterator>::Item> {<R as Iterator>::nth}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:17: 804:22
    }

    bb3: {
        _4 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:24: 804:37
        _5 = &mut (*_4);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:41: 804:53
        _6 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:51: 804:52
        _0 = <L as Iterator>::nth(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:41: 804:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:804:47: 804:50
                                         // + literal: Const { ty: for<'r> fn(&'r mut L, usize) -> Option<<L as Iterator>::Item> {<L as Iterator>::nth}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:805:6: 805:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::collect(_1: Either<L, R>) -> B {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:807:19: 807:23
    let mut _0: B;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:807:28: 807:29
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: L;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:23: 811:28
    let mut _4: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:32: 811:37
    let _5: R;                           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:23: 811:28
    let mut _6: R;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:32: 811:37
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:23: 811:28
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:23: 811:28
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:17: 811:21
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _5 = move ((_1 as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:23: 811:28
        _6 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:32: 811:37
        _0 = <R as Iterator>::collect::<B>(move _6) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:32: 811:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:38: 811:45
                                         // + literal: Const { ty: fn(R) -> B {<R as Iterator>::collect::<B>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:17: 811:21
    }

    bb3: {
        _3 = move ((_1 as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:23: 811:28
        _4 = move _3;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:32: 811:37
        _0 = <L as Iterator>::collect::<B>(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:32: 811:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:811:38: 811:45
                                         // + literal: Const { ty: fn(L) -> B {<L as Iterator>::collect::<B>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:812:6: 812:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:773:1: 820:2>::all(_1: &mut Either<L, R>, _2: F) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:814:15: 814:24
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:814:26: 814:27
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:814:35: 814:39
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _4: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:24: 818:37
    let mut _5: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:41: 818:53
    let mut _6: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:51: 818:52
    let _7: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:24: 818:37
    let mut _8: &mut R;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:41: 818:53
    let mut _9: F;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:51: 818:52
    scope 1 {
        debug inner => _4;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:24: 818:37
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:24: 818:37
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:17: 818:22
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _7 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:24: 818:37
        _8 = &mut (*_7);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:41: 818:53
        _9 = move _2;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:51: 818:52
        _0 = <R as Iterator>::all::<F>(move _8, move _9) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:41: 818:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:47: 818:50
                                         // + literal: Const { ty: for<'r> fn(&'r mut R, F) -> bool {<R as Iterator>::all::<F>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:17: 818:22
    }

    bb3: {
        _4 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:24: 818:37
        _5 = &mut (*_4);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:41: 818:53
        _6 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:51: 818:52
        _0 = <L as Iterator>::all::<F>(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:41: 818:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:818:47: 818:50
                                         // + literal: Const { ty: for<'r> fn(&'r mut L, F) -> bool {<L as Iterator>::all::<F>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:819:6: 819:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:822:1: 830:2>::next_back(_1: &mut Either<L, R>) -> Option<<L as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:827:18: 827:27
    let mut _0: core::option::Option<<L as core::iter::Iterator>::Item>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:827:32: 827:50
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:24: 828:37
    let mut _4: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:41: 828:58
    let _5: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:24: 828:37
    let mut _6: &mut R;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:41: 828:58
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:24: 828:37
    }
    scope 2 {
        debug inner => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:24: 828:37
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:17: 828:22
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _5 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:24: 828:37
        _6 = &mut (*_5);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:41: 828:58
        _0 = <R as DoubleEndedIterator>::next_back(move _6) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:41: 828:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:47: 828:56
                                         // + literal: Const { ty: for<'r> fn(&'r mut R) -> Option<<R as Iterator>::Item> {<R as DoubleEndedIterator>::next_back}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:17: 828:22
    }

    bb3: {
        _3 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:24: 828:37
        _4 = &mut (*_3);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:41: 828:58
        _0 = <L as DoubleEndedIterator>::next_back(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:41: 828:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:828:47: 828:56
                                         // + literal: Const { ty: for<'r> fn(&'r mut L) -> Option<<L as Iterator>::Item> {<L as DoubleEndedIterator>::next_back}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:829:6: 829:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:891:1: 899:2>::as_ref(_1: &Either<L, R>) -> &Target {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:896:15: 896:20
    let mut _0: &Target;                 // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:24: 897:33
    let _4: &Target;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
    let mut _5: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
    let _6: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:24: 897:33
    let _7: &Target;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
    let mut _8: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:24: 897:33
    }
    scope 2 {
        debug inner => _6;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:24: 897:33
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:17: 897:22
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _6 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:24: 897:33
        _8 = _6;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
        _7 = <R as AsRef<Target>>::as_ref(move _8) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:43: 897:49
                                         // + literal: Const { ty: for<'r> fn(&'r R) -> &'r Target {<R as AsRef<Target>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:17: 897:22
    }

    bb3: {
        _3 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:24: 897:33
        _5 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
        _4 = <L as AsRef<Target>>::as_ref(move _5) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:43: 897:49
                                         // + literal: Const { ty: for<'r> fn(&'r L) -> &'r Target {<L as AsRef<Target>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _0 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:897:37: 897:51
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:898:6: 898:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:940:1: 948:2>::as_ref(_1: &Either<L, R>) -> &[Target] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:945:15: 945:20
    let mut _0: &[Target];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:24: 946:33
    let _4: &[Target];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
    let mut _5: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
    let _6: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:24: 946:33
    let _7: &[Target];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
    let mut _8: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:24: 946:33
    }
    scope 2 {
        debug inner => _6;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:24: 946:33
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:17: 946:22
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _6 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:24: 946:33
        _8 = _6;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
        _7 = <R as AsRef<[Target]>>::as_ref(move _8) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:43: 946:49
                                         // + literal: Const { ty: for<'r> fn(&'r R) -> &'r [Target] {<R as AsRef<[Target]>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:17: 946:22
    }

    bb3: {
        _3 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:24: 946:33
        _5 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
        _4 = <L as AsRef<[Target]>>::as_ref(move _5) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:43: 946:49
                                         // + literal: Const { ty: for<'r> fn(&'r L) -> &'r [Target] {<L as AsRef<[Target]>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _0 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:946:37: 946:51
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:947:6: 947:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:950:1: 958:2>::as_mut(_1: &mut Either<L, R>) -> &mut Target {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:955:15: 955:24
    let mut _0: &mut Target;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:955:29: 955:40
    let mut _2: &mut Target;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _3: &mut Target;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _5: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:24: 956:37
    let mut _6: &mut Target;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
    let mut _7: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
    let _8: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:24: 956:37
    let mut _9: &mut Target;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
    let mut _10: &mut R;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
    scope 1 {
        debug inner => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:24: 956:37
    }
    scope 2 {
        debug inner => _8;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:24: 956:37
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:17: 956:22
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _8 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:24: 956:37
        _10 = &mut (*_8);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
        _9 = <R as AsMut<Target>>::as_mut(move _10) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:47: 956:53
                                         // + literal: Const { ty: for<'r> fn(&'r mut R) -> &'r mut Target {<R as AsMut<Target>>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:17: 956:22
    }

    bb3: {
        _5 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:24: 956:37
        _7 = &mut (*_5);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
        _6 = <L as AsMut<Target>>::as_mut(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:47: 956:53
                                         // + literal: Const { ty: for<'r> fn(&'r mut L) -> &'r mut Target {<L as AsMut<Target>>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = &mut (*_6);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _3 = &mut (*_9);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:956:41: 956:55
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        _2 = &mut (*_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        _0 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:957:6: 957:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:960:1: 968:2>::as_mut(_1: &mut Either<L, R>) -> &mut [Target] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:965:15: 965:24
    let mut _0: &mut [Target];           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:965:29: 965:42
    let mut _2: &mut [Target];           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _3: &mut [Target];           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _5: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:24: 966:37
    let mut _6: &mut [Target];           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
    let mut _7: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
    let _8: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:24: 966:37
    let mut _9: &mut [Target];           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
    let mut _10: &mut R;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
    scope 1 {
        debug inner => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:24: 966:37
    }
    scope 2 {
        debug inner => _8;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:24: 966:37
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:17: 966:22
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _8 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:24: 966:37
        _10 = &mut (*_8);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
        _9 = <R as AsMut<[Target]>>::as_mut(move _10) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:47: 966:53
                                         // + literal: Const { ty: for<'r> fn(&'r mut R) -> &'r mut [Target] {<R as AsMut<[Target]>>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:17: 966:22
    }

    bb3: {
        _5 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:24: 966:37
        _7 = &mut (*_5);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
        _6 = <L as AsMut<[Target]>>::as_mut(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:47: 966:53
                                         // + literal: Const { ty: for<'r> fn(&'r mut L) -> &'r mut [Target] {<L as AsMut<[Target]>>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = &mut (*_6);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _3 = &mut (*_9);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:966:41: 966:55
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        _2 = &mut (*_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        _0 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:967:6: 967:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:970:1: 980:2>::deref(_1: &Either<L, R>) -> &<L as Deref>::Target {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:977:14: 977:19
    let mut _0: &<L as core::ops::Deref>::Target; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:24: 978:33
    let _4: &<L as core::ops::Deref>::Target; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
    let mut _5: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
    let _6: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
    let _7: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:24: 978:33
    let _8: &<L as core::ops::Deref>::Target; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _9: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
    let _10: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:24: 978:33
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:24: 978:33
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:17: 978:22
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _7 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:24: 978:33
        _10 = _7;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
        _9 = _10;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
        _8 = <R as Deref>::deref(move _9) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
                                         // + literal: Const { ty: for<'r> fn(&'r R) -> &'r <R as Deref>::Target {<R as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:17: 978:22
    }

    bb3: {
        _3 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:24: 978:33
        _6 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
        _5 = _6;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
        _4 = <L as Deref>::deref(move _5) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
                                         // + literal: Const { ty: for<'r> fn(&'r L) -> &'r <L as Deref>::Target {<L as Deref>::deref}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _0 = _8;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:978:37: 978:44
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:979:6: 979:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:982:1: 990:2>::deref_mut(_1: &mut Either<L, R>) -> &mut <L as Deref>::Target {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:987:18: 987:27
    let mut _0: &mut <L as core::ops::Deref>::Target; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:987:32: 987:49
    let mut _2: &mut <L as core::ops::Deref>::Target; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _3: &mut <L as core::ops::Deref>::Target; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _5: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:24: 988:37
    let mut _6: &mut <L as core::ops::Deref>::Target; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
    let mut _7: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
    let mut _8: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
    let _9: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:24: 988:37
    let mut _10: &mut <L as core::ops::Deref>::Target; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _11: &mut R;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
    let mut _12: &mut R;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
    scope 1 {
        debug inner => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:24: 988:37
    }
    scope 2 {
        debug inner => _9;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:24: 988:37
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:17: 988:22
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _9 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:24: 988:37
        _12 = &mut (*_9);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
        _11 = &mut (*_12);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
        _10 = <R as DerefMut>::deref_mut(move _11) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
                                         // + literal: Const { ty: for<'r> fn(&'r mut R) -> &'r mut <R as Deref>::Target {<R as DerefMut>::deref_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:17: 988:22
    }

    bb3: {
        _5 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:24: 988:37
        _8 = &mut (*_5);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
        _7 = &mut (*_8);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
        _6 = <L as DerefMut>::deref_mut(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
                                         // + literal: Const { ty: for<'r> fn(&'r mut L) -> &'r mut <L as Deref>::Target {<L as DerefMut>::deref_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = &mut (*_6);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _3 = &mut (*_10);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:988:41: 988:52
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        _2 = &mut (*_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        _0 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:989:6: 989:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1011:1: 1019:2>::fmt(_1: &Either<L, R>, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1016:12: 1016:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1016:19: 1016:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1016:46: 1016:57
    let mut _3: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _4: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:24: 1017:33
    let mut _5: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:37: 1017:49
    let mut _6: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:47: 1017:48
    let _7: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:24: 1017:33
    let mut _8: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:37: 1017:49
    let mut _9: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:47: 1017:48
    scope 1 {
        debug inner => _4;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:24: 1017:33
    }
    scope 2 {
        debug inner => _7;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:24: 1017:33
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:17: 1017:22
        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 60:9
    }

    bb1: {
        _7 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:24: 1017:33
        _8 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:37: 1017:49
        _9 = &mut (*_2);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:47: 1017:48
        _0 = <R as Display>::fmt(move _8, move _9) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:37: 1017:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:43: 1017:46
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r R, &'s mut Formatter<'t0>) -> Result<(), Error> {<R as Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:17: 1017:22
    }

    bb3: {
        _4 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:24: 1017:33
        _5 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:37: 1017:49
        _6 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:47: 1017:48
        _0 = <L as Display>::fmt(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:37: 1017:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1017:43: 1017:46
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r L, &'s mut Formatter<'t0>) -> Result<(), Error> {<L as Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1018:6: 1018:6
    }
}

fn _unsized_ref_propagation() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1125:31: 1125:31

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1138:2: 1138:2
    }
}

fn check_array_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1128:50: 1128:50

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1128:52: 1128:52
    }
}

fn check_array_mut() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1129:50: 1129:50

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1129:52: 1129:52
    }
}

fn propagate_array_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1131:74: 1131:74

    bb0: {
        _0 = check_array_ref::<Either<T1, T2>, Item>() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1132:9: 1132:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1132:9: 1132:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {check_array_ref::<Either<T1, T2>, Item>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1133:6: 1133:6
    }
}

fn propagate_array_mut() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1135:74: 1135:74

    bb0: {
        _0 = check_array_mut::<Either<T1, T2>, Item>() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1136:9: 1136:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1136:9: 1136:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {check_array_mut::<Either<T1, T2>, Item>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1137:6: 1137:6
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21>::clone(_1: &Either<L, R>) -> Either<L, R> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let mut _0: Either<L, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let mut _2: (&Either<L, R>,);        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let mut _3: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let _5: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _6: L;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _7: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _8: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _9: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _10: R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _11: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _12: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _13: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let mut _14: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    let mut _15: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    scope 1 {
        debug __self_0 => _5;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }
    scope 2 {
        debug __self_0 => _9;            // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        (_2.0: &Either<L, R>) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        _13 = move (_2.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        _4 = discriminant((*_13));       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    }

    bb1: {
        _14 = move (_2.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _9 = &(((*_14) as Right).0: R);  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _12 = _9;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _11 = _12;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _10 = <R as Clone>::clone(move _11) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // + literal: Const { ty: for<'r> fn(&'r R) -> R {<R as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
    }

    bb3: {
        _15 = move (_2.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _5 = &(((*_15) as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _8 = _5;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _6 = <L as Clone>::clone(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // + literal: Const { ty: for<'r> fn(&'r L) -> L {<L as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        ((_0 as Left).0: L) = move _6;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        discriminant(_0) = 0;            // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:20: 50:21
    }

    bb5: {
        Deinit(_0);                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        ((_0 as Right).0: R) = move _10; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        discriminant(_0) = 1;            // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:16: 50:21
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:20: 50:21
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:21: 50:21
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32>::eq(_1: &Either<L, R>, _2: &Either<L, R>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let _3: isize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _4: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let _5: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _7: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let _8: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _12: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _13: (&Either<L, R>, &Either<L, R>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _14: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _15: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _16: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _17: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _18: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _21: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _22: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _25: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _26: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _27: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _28: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _29: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _30: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _31: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _32: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _33: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        let _6: isize;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
            let _19: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _20: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _23: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            let _24: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                debug __arg_1_0 => _20;  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                debug __arg_1_0 => _24;  // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _3 = discriminant((*_4));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _6 = discriminant((*_7));        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _11 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _12 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _10 = Eq(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _9 = move _10;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _9) -> [false: bb7, otherwise: bb1]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb1: {
        _14 = _1;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _15 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        Deinit(_13);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        (_13.0: &Either<L, R>) = move _14; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        (_13.1: &Either<L, R>) = move _15; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _27 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _18 = discriminant((*_27));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _18) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb2: {
        _28 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _16 = discriminant((*_28));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _16) -> [0_isize: bb5, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb3: {
        unreachable;                     // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb4: {
        _29 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _17 = discriminant((*_29));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _17) -> [1_isize: bb6, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb5: {
        _30 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _19 = &(((*_30) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _31 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _20 = &(((*_31) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _21 = _19;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _22 = _20;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _0 = <L as PartialEq>::eq(move _21, move _22) -> bb8; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // + literal: Const { ty: for<'r, 's> fn(&'r L, &'s L) -> bool {<L as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _32 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _23 = &(((*_32) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _33 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _24 = &(((*_33) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _25 = _23;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _26 = _24;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _0 = <R as PartialEq>::eq(move _25, move _26) -> bb8; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r R, &'s R) -> bool {<R as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _0 = const false;                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        goto -> bb8;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb8: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:32: 50:32
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32>::ne(_1: &Either<L, R>, _2: &Either<L, R>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let _3: isize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _4: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let _5: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _7: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let _8: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _12: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _13: (&Either<L, R>, &Either<L, R>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _14: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _15: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _16: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _17: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _18: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _21: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _22: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _25: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _26: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _27: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _28: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _29: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _30: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _31: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _32: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    let mut _33: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        let _6: isize;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
            let _19: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _20: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _23: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            let _24: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                debug __arg_1_0 => _20;  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                debug __arg_1_0 => _24;  // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _3 = discriminant((*_4));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _6 = discriminant((*_7));        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _11 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _12 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _10 = Eq(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _9 = move _10;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _9) -> [false: bb7, otherwise: bb1]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb1: {
        _14 = _1;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _15 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        Deinit(_13);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        (_13.0: &Either<L, R>) = move _14; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        (_13.1: &Either<L, R>) = move _15; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _27 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _18 = discriminant((*_27));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _18) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb2: {
        _28 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _16 = discriminant((*_28));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _16) -> [0_isize: bb5, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb3: {
        unreachable;                     // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb4: {
        _29 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        _17 = discriminant((*_29));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        switchInt(move _17) -> [1_isize: bb6, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb5: {
        _30 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _19 = &(((*_30) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _31 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _20 = &(((*_31) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _21 = _19;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _22 = _20;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _0 = <L as PartialEq>::ne(move _21, move _22) -> bb8; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // + literal: Const { ty: for<'r, 's> fn(&'r L, &'s L) -> bool {<L as PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _32 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _23 = &(((*_32) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _33 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _24 = &(((*_33) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _25 = _23;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _26 = _24;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _0 = <R as PartialEq>::ne(move _25, move _26) -> bb8; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r R, &'s R) -> bool {<R as PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _0 = const true;                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
        goto -> bb8;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:23: 50:32
    }

    bb8: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:32: 50:32
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:34: 50:36>::assert_receiver_is_total_eq(_1: &Either<L, R>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:34: 50:36
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:34: 50:36
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:36: 50:36
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48>::partial_cmp(_1: &Either<L, R>, _2: &Either<L, R>) -> Option<core::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _0: core::option::Option<core::cmp::Ordering>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let _3: isize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _4: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let _5: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _7: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let _8: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _12: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _13: (&Either<L, R>, &Either<L, R>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _14: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _15: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _16: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _17: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _18: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _21: core::option::Option<core::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _22: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _23: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _24: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _25: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _26: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _27: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _31: core::option::Option<core::cmp::Ordering>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _32: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _33: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _34: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _35: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _36: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _37: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _39: &isize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let _40: &isize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _41: &isize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let _42: &isize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _43: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _44: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _45: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _46: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _47: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _48: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    let mut _49: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        let _6: isize;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
            let _19: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _20: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _29: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            let _30: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                debug __arg_1_0 => _20;  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                let _28: core::option::Option<core::cmp::Ordering>; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                scope 4 {
                    debug cmp => _28;    // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                }
            }
            scope 5 {
                debug __self_0 => _29;   // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                debug __arg_1_0 => _30;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                let _38: core::option::Option<core::cmp::Ordering>; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                scope 6 {
                    debug cmp => _38;    // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                }
            }
            scope 7 {
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _3 = discriminant((*_4));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _6 = discriminant((*_7));        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _11 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _12 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _10 = Eq(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _9 = move _10;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        switchInt(move _9) -> [false: bb15, otherwise: bb1]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    }

    bb1: {
        _14 = _1;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _15 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        Deinit(_13);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        (_13.0: &Either<L, R>) = move _14; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        (_13.1: &Either<L, R>) = move _15; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _43 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _18 = discriminant((*_43));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        switchInt(move _18) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    }

    bb2: {
        _44 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _16 = discriminant((*_44));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        switchInt(move _16) -> [0_isize: bb5, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    }

    bb3: {
        unreachable;                     // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    }

    bb4: {
        _45 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _17 = discriminant((*_45));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        switchInt(move _17) -> [1_isize: bb10, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
    }

    bb5: {
        _46 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _19 = &(((*_46) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _47 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _20 = &(((*_47) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _23 = _19;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _22 = _23;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _25 = _20;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _24 = _25;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _21 = <L as PartialOrd>::partial_cmp(move _22, move _24) -> bb6; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // + literal: Const { ty: for<'r, 's> fn(&'r L, &'s L) -> Option<core::cmp::Ordering> {<L as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _27 = discriminant(_21);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        switchInt(move _27) -> [1_isize: bb8, otherwise: bb7]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }

    bb7: {
        _28 = _21;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _0 = _28;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        goto -> bb16;                    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }

    bb8: {
        _26 = discriminant(((_21 as Some).0: core::cmp::Ordering)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        switchInt(move _26) -> [0_i8: bb9, otherwise: bb7]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }

    bb9: {
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        ((_0 as Some).0: core::cmp::Ordering) = const Equal; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
                                         // + literal: Const { ty: core::cmp::Ordering, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        goto -> bb16;                    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:47: 50:48
    }

    bb10: {
        _48 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _29 = &(((*_48) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _49 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _30 = &(((*_49) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _33 = _29;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _32 = _33;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _35 = _30;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _34 = _35;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _31 = <R as PartialOrd>::partial_cmp(move _32, move _34) -> bb11; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r R, &'s R) -> Option<core::cmp::Ordering> {<R as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _37 = discriminant(_31);         // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        switchInt(move _37) -> [1_isize: bb13, otherwise: bb12]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb12: {
        _38 = _31;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _0 = _38;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        goto -> bb16;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb13: {
        _36 = discriminant(((_31 as Some).0: core::cmp::Ordering)); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        switchInt(move _36) -> [0_i8: bb14, otherwise: bb12]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb14: {
        Deinit(_0);                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        ((_0 as Some).0: core::cmp::Ordering) = const Equal; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
                                         // + literal: Const { ty: core::cmp::Ordering, val: Value(Scalar(0x00)) }
        discriminant(_0) = 1;            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        goto -> bb16;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:47: 50:48
    }

    bb15: {
        _40 = &_3;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _39 = _40;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _42 = &_6;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _41 = _42;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
        _0 = <isize as PartialOrd>::partial_cmp(move _39, move _41) -> bb16; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:38: 50:48
                                         // + literal: Const { ty: for<'r, 's> fn(&'r isize, &'s isize) -> Option<core::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:48: 50:48
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53>::cmp(_1: &Either<L, R>, _2: &Either<L, R>) -> core::cmp::Ordering {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _0: core::cmp::Ordering;     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let _3: isize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _4: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let _5: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _7: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let _8: &Either<L, R>;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _9: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _10: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _12: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _13: (&Either<L, R>, &Either<L, R>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _14: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _15: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _16: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _17: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _18: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _21: core::cmp::Ordering;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _22: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _23: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _24: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _25: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _26: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _30: core::cmp::Ordering;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _31: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _32: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _33: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _34: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _35: i8;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _37: &isize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let _38: &isize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _39: &isize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let _40: &isize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _41: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _42: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _43: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _44: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _45: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _46: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    let mut _47: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        let _6: isize;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        scope 2 {
            debug __arg_1_vi => _6;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
            let _19: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _20: &L;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
            let _28: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            let _29: &R;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                debug __arg_1_0 => _20;  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                let _27: core::cmp::Ordering; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                scope 4 {
                    debug cmp => _27;    // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                }
            }
            scope 5 {
                debug __self_0 => _28;   // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                debug __arg_1_0 => _29;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                let _36: core::cmp::Ordering; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                scope 6 {
                    debug cmp => _36;    // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                }
            }
            scope 7 {
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _3 = discriminant((*_4));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _6 = discriminant((*_7));        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _11 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _12 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _10 = Eq(move _11, move _12);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _9 = move _10;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        switchInt(move _9) -> [false: bb13, otherwise: bb1]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb1: {
        _14 = _1;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _15 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        Deinit(_13);                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        (_13.0: &Either<L, R>) = move _14; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        (_13.1: &Either<L, R>) = move _15; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _41 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _18 = discriminant((*_41));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        switchInt(move _18) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb2: {
        _42 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _16 = discriminant((*_42));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        switchInt(move _16) -> [0_isize: bb5, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb3: {
        unreachable;                     // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb4: {
        _43 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _17 = discriminant((*_43));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        switchInt(move _17) -> [1_isize: bb9, otherwise: bb3]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb5: {
        _44 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _19 = &(((*_44) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _45 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _20 = &(((*_45) as Left).0: L);  // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _23 = _19;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _22 = _23;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _25 = _20;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _24 = _25;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _21 = <L as Ord>::cmp(move _22, move _24) -> bb6; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // + literal: Const { ty: for<'r, 's> fn(&'r L, &'s L) -> core::cmp::Ordering {<L as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _26 = discriminant(_21);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        switchInt(move _26) -> [0_i8: bb8, otherwise: bb7]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }

    bb7: {
        _27 = _21;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _0 = _27;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        goto -> bb14;                    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }

    bb8: {
        Deinit(_0);                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        discriminant(_0) = 1;            // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        goto -> bb14;                    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb9: {
        _46 = move (_13.0: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _28 = &(((*_46) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _47 = move (_13.1: &Either<L, R>); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _29 = &(((*_47) as Right).0: R); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _32 = _28;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _31 = _32;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _34 = _29;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _33 = _34;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _30 = <R as Ord>::cmp(move _31, move _33) -> bb10; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r R, &'s R) -> core::cmp::Ordering {<R as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _35 = discriminant(_30);         // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        switchInt(move _35) -> [0_i8: bb12, otherwise: bb11]; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb11: {
        _36 = _30;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _0 = _36;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        goto -> bb14;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb12: {
        Deinit(_0);                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        discriminant(_0) = 1;            // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        goto -> bb14;                    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
    }

    bb13: {
        _38 = &_3;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _37 = _38;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _40 = &_6;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _39 = _40;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
        _0 = <isize as Ord>::cmp(move _37, move _39) -> bb14; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:50: 50:53
                                         // + literal: Const { ty: for<'r, 's> fn(&'r isize, &'s isize) -> core::cmp::Ordering {<isize as Ord>::cmp}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:53: 50:53
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59>::hash(_1: &Either<L, R>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    debug state => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _3: (&Either<L, R>,);        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _4: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let _6: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _7: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _8: &isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let _9: &isize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let _10: isize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _11: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _12: &mut __H;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _13: &L;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _14: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _15: &mut __H;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let _16: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _17: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _18: &isize;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let _19: &isize;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let _20: isize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _21: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _22: &mut __H;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _23: &R;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _24: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _25: &mut __H;               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _26: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _27: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    let mut _28: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    }
    scope 2 {
        debug __self_0 => _16;           // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        (_3.0: &Either<L, R>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _26 = move (_3.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _5 = discriminant((*_26));       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    }

    bb1: {
        _27 = move (_3.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _16 = &(((*_27) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _21 = _1;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _20 = discriminant((*_21));      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _19 = &_20;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _18 = _19;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _22 = &mut (*_2);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _17 = <isize as Hash>::hash::<__H>(move _18, move _22) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
                                         // + literal: Const { ty: for<'r, 's> fn(&'r isize, &'s mut __H) {<isize as Hash>::hash::<__H>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
    }

    bb3: {
        _28 = move (_3.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _6 = &(((*_28) as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _11 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _10 = discriminant((*_11));      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _9 = &_10;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _8 = _9;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _12 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _7 = <isize as Hash>::hash::<__H>(move _8, move _12) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
                                         // + literal: Const { ty: for<'r, 's> fn(&'r isize, &'s mut __H) {<isize as Hash>::hash::<__H>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _14 = _6;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _15 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _0 = <L as Hash>::hash::<__H>(move _13, move _15) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
                                         // + literal: Const { ty: for<'r, 's> fn(&'r L, &'s mut __H) {<L as Hash>::hash::<__H>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _24 = _16;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _23 = _24;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _25 = &mut (*_2);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:55: 50:59
        _0 = <R as Hash>::hash::<__H>(move _23, move _25) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
                                         // + literal: Const { ty: for<'r, 's> fn(&'r R, &'s mut __H) {<R as Hash>::hash::<__H>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:59: 50:59
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66>::fmt(_1: &Either<L, R>, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _3: (&Either<L, R>,);        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _4: &Either<L, R>;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let _6: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _8: core::fmt::DebugTuple;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _9: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _12: &mut core::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _13: &mut core::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _14: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _15: &&L;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _16: &&L;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let _17: &L;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
    let mut _18: &mut core::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let _19: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _21: core::fmt::DebugTuple;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _22: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _23: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let _24: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _25: &mut core::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _26: &mut core::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _27: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _28: &&R;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _29: &&R;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let _30: &R;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
    let mut _31: &mut core::fmt::DebugTuple; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _32: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _33: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    let mut _34: &Either<L, R>;          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        let _7: &mut core::fmt::DebugTuple; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        scope 2 {
            debug debug_trait_builder => _7; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
            scope 3 {
            }
        }
    }
    scope 4 {
        debug __self_0 => _19;           // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        let _20: &mut core::fmt::DebugTuple; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        scope 5 {
            debug debug_trait_builder => _20; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        (_3.0: &Either<L, R>) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _32 = move (_3.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _5 = discriminant((*_32));       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        switchInt(move _5) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    }

    bb1: {
        _33 = move (_3.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _19 = &(((*_33) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _22 = &mut (*_2);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _24 = const "Right";             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = _24;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _21 = Formatter::debug_tuple(move _22, move _23) -> bb6; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
    }

    bb3: {
        _34 = move (_3.0: &Either<L, R>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _6 = &(((*_34) as Left).0: L);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _9 = &mut (*_2);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _11 = const "Left";              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _8 = Formatter::debug_tuple(move _9, move _10) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugTuple<'b, '_> {Formatter::debug_tuple}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _7 = &mut _8;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _13 = &mut (*_7);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _17 = _6;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _16 = &_17;                      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _15 = _16;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _14 = move _15 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:10: 53:11
        _12 = DebugTuple::field(move _13, move _14) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _18 = &mut (*_7);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _0 = DebugTuple::finish(move _18) -> bb8; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _20 = &mut _21;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _26 = &mut (*_20);               // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _30 = _19;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _29 = &_30;                      // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _28 = _29;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _27 = move _28 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:11: 55:12
        _25 = DebugTuple::field(move _26, move _27) -> bb7; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut DebugTuple, &'s (dyn Debug + 's)) -> &'r mut DebugTuple {DebugTuple::field}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _31 = &mut (*_20);               // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
        _0 = DebugTuple::finish(move _31) -> bb8; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:61: 50:66
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugTuple) -> Result<(), Error> {DebugTuple::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:50:66: 50:66
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:904:9: 910:10>::as_ref(_1: &Either<L, R>) -> &str {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:907:23: 907:28
    let mut _0: &str;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _2: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _3: &L;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:32: 908:41
    let _4: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
    let mut _5: &L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
    let _6: &R;                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:32: 908:41
    let _7: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
    let mut _8: &R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
    scope 1 {
        debug inner => _3;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:32: 908:41
    }
    scope 2 {
        debug inner => _6;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:32: 908:41
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:25: 908:30
        switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 908:30
    }

    bb1: {
        _6 = &(((*_1) as Right).0: R);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:32: 908:41
        _8 = _6;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
        _7 = <R as AsRef<str>>::as_ref(move _8) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:51: 908:57
                                         // + literal: Const { ty: for<'r> fn(&'r R) -> &'r str {<R as AsRef<str>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:25: 908:30
    }

    bb3: {
        _3 = &(((*_1) as Left).0: L);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:32: 908:41
        _5 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
        _4 = <L as AsRef<str>>::as_ref(move _5) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:51: 908:57
                                         // + literal: Const { ty: for<'r> fn(&'r L) -> &'r str {<L as AsRef<str>>::as_ref}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = _4;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _0 = _7;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:908:45: 908:59
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:909:14: 909:14
    }
}

fn <impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:913:9: 919:10>::as_mut(_1: &mut Either<L, R>) -> &mut str {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:916:23: 916:32
    let mut _0: &mut str;                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:916:37: 916:44
    let mut _2: &mut str;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _3: &mut str;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:13: 61:35
    let _5: &mut L;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:32: 917:45
    let mut _6: &mut str;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
    let mut _7: &mut L;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
    let _8: &mut R;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:32: 917:45
    let mut _9: &mut str;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
    let mut _10: &mut R;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
    scope 1 {
        debug inner => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:32: 917:45
    }
    scope 2 {
        debug inner => _8;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:32: 917:45
    }

    bb0: {
        _4 = discriminant((*_1));        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:25: 917:30
        switchInt(move _4) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 917:30
    }

    bb1: {
        _8 = &mut (((*_1) as Right).0: R); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:32: 917:45
        _10 = &mut (*_8);                // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
        _9 = <R as AsMut<str>>::as_mut(move _10) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:55: 917:61
                                         // + literal: Const { ty: for<'r> fn(&'r mut R) -> &'r mut str {<R as AsMut<str>>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:25: 917:30
    }

    bb3: {
        _5 = &mut (((*_1) as Left).0: L); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:32: 917:45
        _7 = &mut (*_5);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
        _6 = <L as AsMut<str>>::as_mut(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:55: 917:61
                                         // + literal: Const { ty: for<'r> fn(&'r mut L) -> &'r mut str {<L as AsMut<str>>::as_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = &mut (*_6);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:61:45: 61:46
    }

    bb5: {
        _3 = &mut (*_9);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:917:49: 917:63
        goto -> bb6;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:62:46: 62:47
    }

    bb6: {
        _2 = &mut (*_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        _0 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:60:9: 63:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:918:14: 918:14
    }
}

fn check_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1113:38: 1113:38

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1113:40: 1113:40
    }
}

fn propagate_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1114:58: 1114:58

    bb0: {
        _0 = check_ref::<Either<T1, T2>>() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1115:13: 1115:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1115:13: 1115:40
                                         // + literal: Const { ty: fn() {check_ref::<Either<T1, T2>>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1116:10: 1116:10
    }
}

fn check_mut() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1117:38: 1117:38

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1117:40: 1117:40
    }
}

fn propagate_mut() -> () {
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1118:58: 1118:58

    bb0: {
        _0 = check_mut::<Either<T1, T2>>() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1119:13: 1119:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1119:13: 1119:40
                                         // + literal: Const { ty: fn() {check_mut::<Either<T1, T2>>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:1120:10: 1120:10
    }
}

fn Either::Left(_1: L) -> Either<L, R> {
    let mut _0: Either<L, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
        ((_0 as Left).0: L) = move _1;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
    }
}

// MIR FOR CTFE
fn Either::Left(_1: L) -> Either<L, R> {
    let mut _0: Either<L, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
        ((_0 as Left).0: L) = move _1;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:53:5: 53:12
    }
}

fn Either::Right(_1: R) -> Either<L, R> {
    let mut _0: Either<L, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
        ((_0 as Right).0: R) = move _1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
    }
}

// MIR FOR CTFE
fn Either::Right(_1: R) -> Either<L, R> {
    let mut _0: Either<L, R>;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
        ((_0 as Right).0: R) = move _1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\either-1.6.1\src\lib.rs:55:5: 55:13
    }
}
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn internal_error(_1: u16) -> error::Error {
    debug n => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:27:25: 27:26
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:27:36: 27:41
    let _2: u32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:9: 29:13
    let mut _3: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:40: 29:50
    let mut _4: u16;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:41: 29:42
    let mut _5: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
    let mut _6: core::num::NonZeroU32;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:11: 30:53
    let mut _7: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:46: 30:50
    scope 1 {
        debug code => _2;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:9: 29:13
        scope 2 {
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:41: 29:42
        _3 = move _4 as u32 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:40: 29:50
        _5 = CheckedAdd(const error::Error::INTERNAL_START, _3); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", const error::Error::INTERNAL_START, move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
    }

    bb1: {
        _2 = move (_5.0: u32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
        _7 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:46: 30:50
        _6 = NonZeroU32::new_unchecked(move _7) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:20: 30:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:20: 30:45
                                         // + literal: Const { ty: unsafe fn(u32) -> NonZeroU32 {NonZeroU32::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:5: 30:54
        (_0.0: core::num::NonZeroU32) = move _6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:5: 30:54
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:31:2: 31:2
    }
}

// MIR FOR CTFE
fn internal_error(_1: u16) -> error::Error {
    debug n => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:27:25: 27:26
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:27:36: 27:41
    let _2: u32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:9: 29:13
    let mut _3: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:40: 29:50
    let mut _4: u16;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:41: 29:42
    let mut _5: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
    let mut _6: core::num::NonZeroU32;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:11: 30:53
    let mut _7: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:46: 30:50
    scope 1 {
        debug code => _2;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:9: 29:13
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:9: 29:13
        StorageLive(_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:40: 29:50
        StorageLive(_4);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:41: 29:42
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:41: 29:42
        _3 = move _4 as u32 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:40: 29:50
        StorageDead(_4);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:49: 29:50
        _5 = CheckedAdd(const error::Error::INTERNAL_START, _3); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", const error::Error::INTERNAL_START, move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
    }

    bb1: {
        _2 = move (_5.0: u32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:16: 29:50
        StorageDead(_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:29:49: 29:50
        StorageLive(_6);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:11: 30:53
        StorageLive(_7);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:46: 30:50
        _7 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:46: 30:50
        _6 = NonZeroU32::new_unchecked(move _7) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:20: 30:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:20: 30:45
                                         // + literal: Const { ty: unsafe fn(u32) -> NonZeroU32 {NonZeroU32::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:50: 30:51
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:5: 30:54
        (_0.0: core::num::NonZeroU32) = move _6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:5: 30:54
        StorageDead(_6);                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:30:53: 30:54
        StorageDead(_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:31:1: 31:2
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:31:2: 31:2
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::UNSUPPORTED: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:35:28: 35:33

    bb0: {
        _0 = internal_error(const 0_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:35:36: 35:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:35:36: 35:50
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:35:5: 35:54
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::ERRNO_NOT_POSITIVE: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:37:35: 37:40

    bb0: {
        _0 = internal_error(const 1_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:37:43: 37:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:37:43: 37:57
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:37:5: 37:61
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::IOS_SEC_RANDOM: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:39:31: 39:36

    bb0: {
        _0 = internal_error(const 3_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:39:39: 39:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:39:39: 39:53
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:39:5: 39:57
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::WINDOWS_RTL_GEN_RANDOM: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:41:39: 41:44

    bb0: {
        _0 = internal_error(const 4_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:41:47: 41:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:41:47: 41:61
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:41:5: 41:65
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::FAILED_RDRAND: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:43:30: 43:35

    bb0: {
        _0 = internal_error(const 5_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:43:38: 43:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:43:38: 43:52
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:43:5: 43:56
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::NO_RDRAND: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:45:26: 45:31

    bb0: {
        _0 = internal_error(const 6_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:45:34: 45:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:45:34: 45:48
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:45:5: 45:52
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::WEB_CRYPTO: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:47:27: 47:32

    bb0: {
        _0 = internal_error(const 7_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:47:35: 47:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:47:35: 47:49
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:47:5: 47:53
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::WEB_GET_RANDOM_VALUES: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:49:38: 49:43

    bb0: {
        _0 = internal_error(const 8_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:49:46: 49:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:49:46: 49:60
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:49:5: 49:64
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::VXWORKS_RAND_SECURE: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:51:36: 51:41

    bb0: {
        _0 = internal_error(const 11_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:51:44: 51:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:51:44: 51:58
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:51:5: 51:63
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::NODE_CRYPTO: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:53:28: 53:33

    bb0: {
        _0 = internal_error(const 12_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:53:36: 53:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:53:36: 53:50
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:53:5: 53:55
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::NODE_RANDOM_FILL_SYNC: error::Error = {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:55:38: 55:43

    bb0: {
        _0 = internal_error(const 13_u16) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:55:46: 55:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:55:46: 55:60
                                         // + literal: Const { ty: fn(u16) -> error::Error {internal_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:55:5: 55:65
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::INTERNAL_START: u32 = {
    let mut _0: u32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:60:31: 60:34
    let mut _1: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:60:37: 60:44

    bb0: {
        _1 = const (2147483648_u32, false); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:60:37: 60:44
        assert(!const false, "attempt to shift left by `{}`, which would overflow", const 31_i32) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:60:37: 60:44
    }

    bb1: {
        _0 = const 2147483648_u32;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:60:37: 60:44
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:60:5: 60:45
    }
}

const error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::CUSTOM_START: u32 = {
    let mut _0: u32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:29: 64:32
    let mut _1: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:44
    let mut _2: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:44
    let mut _3: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:47: 64:56
    let mut _4: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:47: 64:56
    let mut _5: (u32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:56

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:44
        _2 = const (2147483648_u32, false); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:44
        assert(!const false, "attempt to shift left by `{}`, which would overflow", const 31_i32) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:44
    }

    bb1: {
        _1 = const 2147483648_u32;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:44
        StorageLive(_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:47: 64:56
        _4 = const (1073741824_u32, false); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:47: 64:56
        assert(!const false, "attempt to shift left by `{}`, which would overflow", const 30_i32) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:47: 64:56
    }

    bb2: {
        _3 = const 1073741824_u32;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:47: 64:56
        _5 = const (3221225472_u32, false); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:56
        assert(!const false, "attempt to compute `{} + {}`, which would overflow", move _1, move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:56
    }

    bb3: {
        _0 = const 3221225472_u32;       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:35: 64:56
        StorageDead(_3);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:55: 64:56
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:55: 64:56
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:64:5: 64:57
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::raw_os_error(_1: error::Error) -> Option<i32> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:74:25: 74:29
    let mut _0: core::option::Option<i32>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:74:34: 74:45
    let mut _2: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:47
    let mut _3: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:24
    let mut _4: core::num::NonZeroU32;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:18
    let mut _5: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:28: 82:47
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:28: 82:40
    let mut _7: core::num::NonZeroU32;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:28: 82:34

    bb0: {
        _4 = (_1.0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:18
        _3 = NonZeroU32::get(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:19: 75:22
                                         // + literal: Const { ty: fn(NonZeroU32) -> u32 {NonZeroU32::get}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = Lt(move _3, const error::Error::INTERNAL_START); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:47
        switchInt(move _2) -> [false: bb4, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:12: 75:47
    }

    bb2: {
        _7 = (_1.0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:28: 82:34
        _6 = NonZeroU32::get(move _7) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:28: 82:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:35: 82:38
                                         // + literal: Const { ty: fn(NonZeroU32) -> u32 {NonZeroU32::get}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _5 = move _6 as i32 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:28: 82:47
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:23: 82:48
        ((_0 as Some).0: i32) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:23: 82:48
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:82:23: 82:48
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:9: 86:10
    }

    bb4: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:85:13: 85:17
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:85:13: 85:17
        goto -> bb5;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:75:9: 86:10
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:87:6: 87:6
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::code(_1: error::Error) -> NonZeroU32 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:94:23: 94:27
    let mut _0: core::num::NonZeroU32;   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:94:32: 94:42

    bb0: {
        _0 = (_1.0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:95:9: 95:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:96:6: 96:6
    }
}

// MIR FOR CTFE
fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:33:1: 97:2>::code(_1: error::Error) -> NonZeroU32 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:94:23: 94:27
    let mut _0: core::num::NonZeroU32;   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:94:32: 94:42

    bb0: {
        _0 = (_1.0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:95:9: 95:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:96:6: 96:6
    }
}

error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:123:1: 140:2>::fmt::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:128:33: 128:36

    bb0: {
        _0 = const 128_usize;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:128:33: 128:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:128:33: 128:36
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:123:1: 140:2>::fmt(_1: &error::Error, _2: &mut Formatter) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:124:12: 124:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:124:19: 124:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:124:50: 124:61
    let mut _3: core::fmt::DebugStruct;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:13: 125:20
    let mut _4: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:23: 125:46
    let mut _5: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:38: 125:45
    let _6: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:38: 125:45
    let mut _7: core::option::Option<i32>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:30: 126:49
    let mut _8: error::Error;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:30: 126:49
    let mut _9: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:16: 126:27
    let _11: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:13: 127:42
    let mut _12: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:13: 127:42
    let mut _13: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:23: 127:33
    let _14: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:23: 127:33
    let mut _15: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:35: 127:41
    let mut _16: &i32;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:35: 127:41
    let _17: &i32;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:35: 127:41
    let mut _19: core::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:32: 129:55
    let mut _20: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:39: 129:44
    let mut _21: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:46: 129:54
    let mut _22: &mut [u8; 128];         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:46: 129:54
    let mut _23: &mut [u8; 128];         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:46: 129:54
    let mut _24: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:20: 129:29
    let _26: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:17: 130:47
    let mut _27: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:17: 130:47
    let mut _28: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:27: 130:40
    let _29: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:27: 130:40
    let mut _30: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:42: 130:46
    let mut _31: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:42: 130:46
    let _32: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:42: 130:46
    let mut _33: core::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:36: 132:56
    let mut _34: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:50: 132:55
    let mut _35: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:23: 132:33
    let _37: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:13: 133:54
    let mut _38: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:13: 133:54
    let mut _39: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:23: 133:38
    let _40: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:23: 133:38
    let mut _41: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:40: 133:53
    let mut _42: &u32;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:40: 133:53
    let _43: &u32;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:40: 133:53
    let _44: u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:41: 133:53
    let mut _45: core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:41: 133:47
    let _46: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:13: 134:44
    let mut _47: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:13: 134:44
    let mut _48: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:23: 134:36
    let _49: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:23: 134:36
    let mut _50: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:38: 134:43
    let mut _51: &&str;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:38: 134:43
    let _52: &&str;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:38: 134:43
    let _53: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:13: 136:53
    let mut _54: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:13: 136:53
    let mut _55: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:23: 136:37
    let _56: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:23: 136:37
    let mut _57: &dyn core::fmt::Debug;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:39: 136:52
    let mut _58: &u32;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:39: 136:52
    let _59: &u32;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:39: 136:52
    let _60: u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:40: 136:52
    let mut _61: core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:40: 136:46
    let mut _62: &mut core::fmt::DebugStruct; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:138:9: 138:21
    scope 1 {
        debug dbg => _3;                 // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:13: 125:20
        let _10: i32;                    // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:21: 126:26
        let mut _18: [u8; 128];          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:128:17: 128:24
        let _36: &str;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:28: 132:32
        scope 2 {
            debug errno => _10;          // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:21: 126:26
        }
        scope 3 {
            debug buf => _18;            // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:128:17: 128:24
            let _25: &str;               // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:25: 129:28
            scope 4 {
                debug err => _25;        // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:25: 129:28
            }
        }
        scope 5 {
            debug desc => _36;           // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:28: 132:32
        }
    }

    bb0: {
        _4 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:23: 125:46
        _6 = const "Error";              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:38: 125:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:38: 125:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:38: 125:45
        _3 = Formatter::debug_struct(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:23: 125:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:125:25: 125:37
                                         // + literal: Const { ty: for<'b, 'r> fn(&'b mut Formatter, &'r str) -> DebugStruct<'b, '_> {Formatter::debug_struct}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:30: 126:49
        _7 = error::Error::raw_os_error(move _8) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:30: 126:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:35: 126:47
                                         // + literal: Const { ty: fn(error::Error) -> Option<i32> {error::Error::raw_os_error}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _9 = discriminant(_7);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:16: 126:27
        switchInt(move _9) -> [1_isize: bb3, otherwise: bb7]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:16: 126:27
    }

    bb3: {
        _10 = ((_7 as Some).0: i32);     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:126:21: 126:26
        _12 = &mut _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:13: 127:42
        _14 = const "os_error";          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:23: 127:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:23: 127:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:23: 127:33
        _17 = &_10;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:35: 127:41
        _16 = _17;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:35: 127:41
        _15 = move _16 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:35: 127:41
        _11 = DebugStruct::field(move _12, move _13, move _15) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:13: 127:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:127:17: 127:22
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _18 = [const 0_u8; 128];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:128:27: 128:37
        _20 = _10;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:39: 129:44
        _23 = &mut _18;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:46: 129:54
        _22 = &mut (*_23);               // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:46: 129:54
        _21 = move _22 as &mut [u8] (Pointer(Unsize)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:46: 129:54
        _19 = os_err(move _20, move _21) -> bb5; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:32: 129:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:32: 129:38
                                         // + literal: Const { ty: for<'r> fn(i32, &'r mut [u8]) -> Option<&'r str> {os_err}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _24 = discriminant(_19);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:20: 129:29
        switchInt(move _24) -> [1_isize: bb6, otherwise: bb14]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:20: 129:29
    }

    bb6: {
        _25 = ((_19 as Some).0: &str);   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:129:25: 129:28
        _27 = &mut _3;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:17: 130:47
        _29 = const "description";       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:27: 130:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:27: 130:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _28 = _29;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:27: 130:40
        _32 = &_25;                      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:42: 130:46
        _31 = _32;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:42: 130:46
        _30 = move _31 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:42: 130:46
        _26 = DebugStruct::field(move _27, move _28, move _30) -> bb14; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:17: 130:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:130:21: 130:26
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _34 = (*_1);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:50: 132:55
        _33 = internal_desc(move _34) -> bb8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:36: 132:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:36: 132:49
                                         // + literal: Const { ty: fn(error::Error) -> Option<&'static str> {internal_desc}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _35 = discriminant(_33);         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:23: 132:33
        switchInt(move _35) -> [1_isize: bb9, otherwise: bb12]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:23: 132:33
    }

    bb9: {
        _36 = ((_33 as Some).0: &str);   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:132:28: 132:32
        _38 = &mut _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:13: 133:54
        _40 = const "internal_code";     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:23: 133:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:23: 133:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _39 = _40;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:23: 133:38
        _45 = ((*_1).0: core::num::NonZeroU32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:41: 133:47
        _44 = NonZeroU32::get(move _45) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:41: 133:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:48: 133:51
                                         // + literal: Const { ty: fn(NonZeroU32) -> u32 {NonZeroU32::get}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _43 = &_44;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:40: 133:53
        _42 = _43;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:40: 133:53
        _41 = move _42 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:40: 133:53
        _37 = DebugStruct::field(move _38, move _39, move _41) -> bb11; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:13: 133:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:133:17: 133:22
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _47 = &mut _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:13: 134:44
        _49 = const "description";       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:23: 134:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:23: 134:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _48 = _49;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:23: 134:36
        _52 = &_36;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:38: 134:43
        _51 = _52;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:38: 134:43
        _50 = move _51 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:38: 134:43
        _46 = DebugStruct::field(move _47, move _48, move _50) -> bb14; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:13: 134:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:134:17: 134:22
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _54 = &mut _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:13: 136:53
        _56 = const "unknown_code";      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:23: 136:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:23: 136:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _55 = _56;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:23: 136:37
        _61 = ((*_1).0: core::num::NonZeroU32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:40: 136:46
        _60 = NonZeroU32::get(move _61) -> bb13; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:40: 136:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:47: 136:50
                                         // + literal: Const { ty: fn(NonZeroU32) -> u32 {NonZeroU32::get}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _59 = &_60;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:39: 136:52
        _58 = _59;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:39: 136:52
        _57 = move _58 as &dyn core::fmt::Debug (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:39: 136:52
        _53 = DebugStruct::field(move _54, move _55, move _57) -> bb14; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:13: 136:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:136:17: 136:22
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut DebugStruct, &'s str, &'t0 (dyn Debug + 't0)) -> &'r mut DebugStruct {DebugStruct::field}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _62 = &mut _3;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:138:9: 138:21
        _0 = DebugStruct::finish(move _62) -> bb15; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:138:9: 138:21
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:138:13: 138:19
                                         // + literal: Const { ty: for<'r> fn(&'r mut DebugStruct) -> Result<(), core::fmt::Error> {DebugStruct::finish}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:139:6: 139:6
    }
}

error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:142:1: 156:2>::fmt::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:145:33: 145:36

    bb0: {
        _0 = const 128_usize;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:145:33: 145:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:145:33: 145:36
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:142:1: 156:2>::fmt(_1: &error::Error, _2: &mut Formatter) -> Result<(), core::fmt::Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:143:12: 143:17
    debug f => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:143:19: 143:20
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:143:50: 143:61
    let mut _3: core::option::Option<i32>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:30: 144:49
    let mut _4: error::Error;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:30: 144:49
    let mut _5: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:16: 144:27
    let _6: i32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:21: 144:26
    let mut _7: [u8; 128];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:145:17: 145:24
    let mut _8: core::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:19: 146:42
    let mut _9: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:26: 146:31
    let mut _10: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:33: 146:41
    let mut _11: &mut [u8; 128];         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:33: 146:41
    let mut _12: &mut [u8; 128];         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:33: 146:41
    let mut _13: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:17: 147:26
    let mut _15: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:30: 147:40
    let mut _16: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:38: 147:39
    let mut _17: &mut core::fmt::Formatter; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
    let mut _18: core::fmt::Arguments;   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _19: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
    let mut _20: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
    let _21: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
    let mut _22: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _23: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let _24: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let _25: [core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _26: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
    let mut _27: &i32;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
    let _28: &i32;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
    let mut _29: core::option::Option<&str>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:36: 150:56
    let mut _30: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:50: 150:55
    let mut _31: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:23: 150:33
    let _32: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:28: 150:32
    let mut _33: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:151:13: 151:30
    let mut _34: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:151:25: 151:29
    let mut _35: &mut core::fmt::Formatter; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
    let mut _36: core::fmt::Arguments;   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _37: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
    let mut _38: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
    let _39: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
    let mut _40: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _41: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let _42: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let _43: [core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
    let mut _44: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
    let mut _45: &u32;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
    let _46: &u32;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
    let _47: u32;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
    let mut _48: core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:50
    let mut _50: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
    scope 1 {
        debug errno => _6;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:21: 144:26
    }
    scope 2 {
        debug buf => _7;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:145:17: 145:24
        let _14: &str;                   // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:22: 147:25
        let mut _49: &[&str; 1];         // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
        scope 3 {
            debug err => _14;            // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:22: 147:25
        }
    }
    scope 4 {
        debug desc => _32;               // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:28: 150:32
    }

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:30: 144:49
        _3 = error::Error::raw_os_error(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:30: 144:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:35: 144:47
                                         // + literal: Const { ty: fn(error::Error) -> Option<i32> {error::Error::raw_os_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:16: 144:27
        switchInt(move _5) -> [1_isize: bb2, otherwise: bb9]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:16: 144:27
    }

    bb2: {
        _6 = ((_3 as Some).0: i32);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:144:21: 144:26
        _7 = [const 0_u8; 128];          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:145:27: 145:37
        _9 = _6;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:26: 146:31
        _12 = &mut _7;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:33: 146:41
        _11 = &mut (*_12);               // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:33: 146:41
        _10 = move _11 as &mut [u8] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:33: 146:41
        _8 = os_err(move _9, move _10) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:19: 146:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:19: 146:25
                                         // + literal: Const { ty: for<'r> fn(i32, &'r mut [u8]) -> Option<&'r str> {os_err}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _13 = discriminant(_8);          // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:19: 146:42
        switchInt(move _13) -> [0_isize: bb4, 1_isize: bb6, otherwise: bb5]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:13: 146:42
    }

    bb4: {
        _17 = &mut (*_2);                // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
        _49 = const <error::Error as core::fmt::Display>::fmt::promoted[0]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<error::Error as core::fmt::Display>::fmt, [], Some(promoted[0])) }
        _21 = _49;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
        _20 = _21;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
        _19 = move _20 as &[&str] (Pointer(Unsize)); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
        _28 = &_6;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
        _27 = _28;                       // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
        _26 = ArgumentV1::new_display::<i32>(move _27) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:51: 148:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> ArgumentV1<'b> {ArgumentV1::new_display::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        unreachable;                     // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:146:19: 146:42
    }

    bb6: {
        _14 = ((_8 as Some).0: &str);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:22: 147:25
        _15 = _14;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:30: 147:40
        _16 = &mut (*_2);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:38: 147:39
        _0 = <str as core::fmt::Display>::fmt(move _15, move _16) -> bb16; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:30: 147:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:147:34: 147:37
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r str, &'s mut Formatter<'t0>) -> Result<(), core::fmt::Error> {<str as core::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _25 = [move _26];                // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _24 = &_25;                      // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _23 = _24;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _22 = move _23 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _18 = Arguments::new_v1(move _19, move _22) -> bb8; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _0 = Formatter::write_fmt(move _17, move _18) -> bb16; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:14: 500:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), core::fmt::Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _30 = (*_1);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:50: 150:55
        _29 = internal_desc(move _30) -> bb10; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:36: 150:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:36: 150:49
                                         // + literal: Const { ty: fn(error::Error) -> Option<&'static str> {internal_desc}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _31 = discriminant(_29);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:23: 150:33
        switchInt(move _31) -> [1_isize: bb11, otherwise: bb12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:23: 150:33
    }

    bb11: {
        _32 = ((_29 as Some).0: &str);   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:150:28: 150:32
        _33 = &mut (*_2);                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:151:13: 151:30
        _34 = _32;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:151:25: 151:29
        _0 = Formatter::write_str(move _33, move _34) -> bb16; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:151:13: 151:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:151:15: 151:24
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, &'s str) -> Result<(), core::fmt::Error> {Formatter::write_str}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _35 = &mut (*_2);                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
        _50 = const <error::Error as core::fmt::Display>::fmt::promoted[1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<error::Error as core::fmt::Display>::fmt, [], Some(promoted[1])) }
        _39 = _50;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
        _38 = _39;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
        _37 = move _38 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
        _48 = ((*_1).0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:50
        _47 = NonZeroU32::get(move _48) -> bb13; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:51: 153:54
                                         // + literal: Const { ty: fn(NonZeroU32) -> u32 {NonZeroU32::get}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _46 = &_47;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
        _45 = _46;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
        _44 = ArgumentV1::new_display::<u32>(move _45) -> bb14; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:44: 153:56
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> ArgumentV1<'b> {ArgumentV1::new_display::<u32>}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _43 = [move _44];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _42 = &_43;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _41 = _42;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _40 = move _41 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
        _36 = Arguments::new_v1(move _37, move _40) -> bb15; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:24: 500:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _0 = Formatter::write_fmt(move _35, move _36) -> bb16; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:9: 500:55
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:500:14: 500:23
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), core::fmt::Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:155:6: 155:6
    }
}

promoted[0] in error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:142:1: 156:2>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49

    bb0: {
        _1 = [const "OS Error: "];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:148:35: 148:49
    }
}

promoted[1] in error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:142:1: 156:2>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42

    bb0: {
        _1 = [const "Unknown Error: "];  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:153:23: 153:42
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:158:1: 162:2>::from(_1: NonZeroU32) -> error::Error {
    debug code => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:159:13: 159:17
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:159:34: 159:38
    let mut _2: core::num::NonZeroU32;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:160:14: 160:18

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:160:14: 160:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:160:9: 160:19
        (_0.0: core::num::NonZeroU32) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:160:9: 160:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:161:6: 161:6
    }
}

fn internal_desc(_1: error::Error) -> Option<&str> {
    debug error => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:164:18: 164:23
    let mut _0: core::option::Option<&str>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:164:35: 164:55
    let mut _2: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:36: 166:77
    let _3: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:36: 166:77
    let mut _4: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:43: 167:83
    let _5: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:43: 167:83
    let mut _6: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:39: 168:91
    let _7: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:39: 168:91
    let mut _8: &str;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:47: 169:94
    let _9: &str;                        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:47: 169:94
    let mut _10: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:38: 170:87
    let _11: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:38: 170:87
    let mut _12: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:34: 171:69
    let _13: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:34: 171:69
    let mut _14: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:35: 172:66
    let _15: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:35: 172:66
    let mut _16: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:46: 173:93
    let _17: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:46: 173:93
    let mut _18: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:44: 174:95
    let _19: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:44: 174:95
    let mut _20: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:36: 175:74
    let _21: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:36: 175:74
    let mut _22: &str;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:46: 176:96
    let _23: &str;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:46: 176:96

    bb0: {
        switchInt(((_1.0: core::num::NonZeroU32).0: u32)) -> [2147483648_u32: bb2, 2147483649_u32: bb3, 2147483651_u32: bb4, 2147483652_u32: bb5, 2147483653_u32: bb6, 2147483654_u32: bb7, 2147483655_u32: bb8, 2147483656_u32: bb9, 2147483659_u32: bb10, 2147483660_u32: bb11, 2147483661_u32: bb12, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:165:5: 165:16
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:177:14: 177:18
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:177:14: 177:18
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:177:14: 177:18
    }

    bb2: {
        _3 = const "getrandom: this target is not supported"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:36: 166:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:36: 166:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:36: 166:77
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:31: 166:78
        ((_0 as Some).0: &str) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:31: 166:78
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:31: 166:78
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:166:77: 166:78
    }

    bb3: {
        _5 = const "errno: did not return a positive value"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:43: 167:83
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:43: 167:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:43: 167:83
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:38: 167:84
        ((_0 as Some).0: &str) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:38: 167:84
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:38: 167:84
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:167:83: 167:84
    }

    bb4: {
        _7 = const "SecRandomCopyBytes: iOS Security framework failure"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:39: 168:91
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:39: 168:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:39: 168:91
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:34: 168:92
        ((_0 as Some).0: &str) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:34: 168:92
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:34: 168:92
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:168:91: 168:92
    }

    bb5: {
        _9 = const "RtlGenRandom: Windows system function failure"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:47: 169:94
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:47: 169:94
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:47: 169:94
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:42: 169:95
        ((_0 as Some).0: &str) = move _8; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:42: 169:95
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:42: 169:95
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:169:94: 169:95
    }

    bb6: {
        _11 = const "RDRAND: failed multiple times: CPU issue likely"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:38: 170:87
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:38: 170:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:38: 170:87
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:33: 170:88
        ((_0 as Some).0: &str) = move _10; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:33: 170:88
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:33: 170:88
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:170:87: 170:88
    }

    bb7: {
        _13 = const "RDRAND: instruction not supported"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:34: 171:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:34: 171:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:34: 171:69
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:29: 171:70
        ((_0 as Some).0: &str) = move _12; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:29: 171:70
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:29: 171:70
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:171:69: 171:70
    }

    bb8: {
        _15 = const "Web Crypto API is unavailable"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:35: 172:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:35: 172:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:35: 172:66
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:30: 172:67
        ((_0 as Some).0: &str) = move _14; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:30: 172:67
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:30: 172:67
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:172:66: 172:67
    }

    bb9: {
        _17 = const "Web API crypto.getRandomValues is unavailable"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:46: 173:93
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:46: 173:93
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:46: 173:93
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:41: 173:94
        ((_0 as Some).0: &str) = move _16; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:41: 173:94
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:41: 173:94
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:173:93: 173:94
    }

    bb10: {
        _19 = const "randSecure: VxWorks RNG module is not initialized"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:44: 174:95
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:44: 174:95
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _18 = _19;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:44: 174:95
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:39: 174:96
        ((_0 as Some).0: &str) = move _18; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:39: 174:96
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:39: 174:96
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:174:95: 174:96
    }

    bb11: {
        _21 = const "Node.js crypto module is unavailable"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:36: 175:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:36: 175:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:36: 175:74
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:31: 175:75
        ((_0 as Some).0: &str) = move _20; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:31: 175:75
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:31: 175:75
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:175:74: 175:75
    }

    bb12: {
        _23 = const "Node.js API crypto.randomFillSync is unavailable"; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:46: 176:96
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:46: 176:96
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:46: 176:96
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:41: 176:97
        ((_0 as Some).0: &str) = move _22; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:41: 176:97
        discriminant(_0) = 1;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:41: 176:97
        goto -> bb13;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:176:96: 176:97
    }

    bb13: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:179:2: 179:2
    }
}

fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:31:1: 51:2>::new() -> LazyUsize {
    let mut _0: util::LazyUsize;         // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:32:27: 32:31
    let mut _1: core::sync::atomic::AtomicUsize; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:44

    bb0: {
        _1 = AtomicUsize::new(const LazyUsize::UNINIT) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:30
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:9: 33:45
        (_0.0: core::sync::atomic::AtomicUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:9: 33:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:34:6: 34:6
    }
}

// MIR FOR CTFE
fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:31:1: 51:2>::new() -> LazyUsize {
    let mut _0: util::LazyUsize;         // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:32:27: 32:31
    let mut _1: core::sync::atomic::AtomicUsize; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:44

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:44
        _1 = AtomicUsize::new(const LazyUsize::UNINIT) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:14: 33:30
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:9: 33:45
        (_0.0: core::sync::atomic::AtomicUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:9: 33:45
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:33:44: 33:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:34:6: 34:6
    }
}

const util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:31:1: 51:2>::UNINIT: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:37:23: 37:28

    bb0: {
        _0 = core::num::<impl usize>::max_value() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:37:31: 37:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:37:31: 37:47
                                         // + literal: Const { ty: fn() -> usize {core::num::<impl usize>::max_value}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:37:5: 37:50
    }
}

fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:31:1: 51:2>::unsync_init(_1: &LazyUsize, _2: impl FnOnce() -> usize) -> usize {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:42:24: 42:29
    debug init => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:42:31: 42:35
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:42:64: 42:69
    let mut _3: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:13: 44:20
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:23: 44:43
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:35: 44:42
    let mut _6: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:45:12: 45:31
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:45:12: 45:15
    let mut _8: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:25
    let mut _9: impl FnOnce() -> usize;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:23
    let mut _10: ();                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:25
    let _11: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:13: 47:39
    let mut _12: &core::sync::atomic::AtomicUsize; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:13: 47:39
    let mut _13: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:26: 47:29
    let mut _14: core::sync::atomic::Ordering; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:31: 47:38
    let mut _15: bool;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:50:5: 50:6
    scope 1 {
        debug val => _3;                 // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:13: 44:20
    }

    bb0: {
        _15 = const false;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:13: 44:20
        _15 = const true;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:13: 44:20
        _4 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:23: 44:43
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:35: 44:42
        discriminant(_5) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:35: 44:42
        _3 = AtomicUsize::load(move _4, move _5) -> [return: bb1, unwind: bb9]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:23: 44:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:44:30: 44:34
                                         // + literal: Const { ty: for<'r> fn(&'r AtomicUsize, core::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:45:12: 45:15
        _6 = Eq(move _7, const LazyUsize::UNINIT); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:45:12: 45:31
        switchInt(move _6) -> [false: bb4, otherwise: bb2]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:45:12: 45:31
    }

    bb2: {
        _15 = const false;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:23
        _9 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:23
        _8 = <impl FnOnce() -> usize as FnOnce<()>>::call_once(move _9, move _10) -> [return: bb3, unwind: bb9]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:19: 46:23
                                         // + literal: Const { ty: extern "rust-call" fn(impl FnOnce() -> usize, ()) -> <impl FnOnce() -> usize as FnOnce<()>>::Output {<impl FnOnce() -> usize as FnOnce<()>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _3 = move _8;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:46:13: 46:25
        _12 = &((*_1).0: core::sync::atomic::AtomicUsize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:13: 47:39
        _13 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:26: 47:29
        Deinit(_14);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:31: 47:38
        discriminant(_14) = 0;           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:31: 47:38
        _11 = AtomicUsize::store(move _12, move _13, move _14) -> [return: bb10, unwind: bb9]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:13: 47:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:20: 47:25
                                         // + literal: Const { ty: for<'r> fn(&'r AtomicUsize, usize, core::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:49:9: 49:12
        switchInt(_15) -> [false: bb5, otherwise: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:50:5: 50:6
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:50:6: 50:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:42:5: 50:6
    }

    bb7: {
        drop(_2) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:50:5: 50:6
    }

    bb8 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:50:5: 50:6
    }

    bb9 (cleanup): {
        switchInt(_15) -> [false: bb6, otherwise: bb8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:50:5: 50:6
    }

    bb10: {
        goto -> bb4;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:47:13: 47:39
    }
}

fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:56:1: 64:2>::new() -> LazyBool {
    let mut _0: util::LazyBool;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:57:27: 57:31
    let mut _1: util::LazyUsize;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:30

    bb0: {
        _1 = LazyUsize::new() -> bb1;    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:28
                                         // + literal: Const { ty: fn() -> LazyUsize {LazyUsize::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:9: 58:31
        (_0.0: util::LazyUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:9: 58:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:59:6: 59:6
    }
}

// MIR FOR CTFE
fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:56:1: 64:2>::new() -> LazyBool {
    let mut _0: util::LazyBool;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:57:27: 57:31
    let mut _1: util::LazyUsize;         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:30

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:30
        _1 = LazyUsize::new() -> bb1;    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:14: 58:28
                                         // + literal: Const { ty: fn() -> LazyUsize {LazyUsize::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:9: 58:31
        (_0.0: util::LazyUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:9: 58:31
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:58:30: 58:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:59:6: 59:6
    }
}

fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:56:1: 64:2>::unsync_init::{closure#0}(_1: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46]) -> usize {
    debug init => (_1.0: impl FnOnce() -> bool); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:61:31: 61:35
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:31
    let mut _2: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:37
    let mut _3: impl FnOnce() -> bool;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:35
    let mut _4: ();                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:37

    bb0: {
        _3 = move (_1.0: impl FnOnce() -> bool); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:35
        _2 = <impl FnOnce() -> bool as FnOnce<()>>::call_once(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:35
                                         // + literal: Const { ty: extern "rust-call" fn(impl FnOnce() -> bool, ()) -> <impl FnOnce() -> bool as FnOnce<()>>::Output {<impl FnOnce() -> bool as FnOnce<()>>::call_once}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = move _2 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:31: 62:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:46: 62:46
    }
}

fn util::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:56:1: 64:2>::unsync_init(_1: &LazyBool, _2: impl FnOnce() -> bool) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:61:24: 61:29
    debug init => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:61:31: 61:35
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:61:63: 61:67
    let mut _3: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:9: 62:47
    let mut _4: &util::LazyUsize;        // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:9: 62:47
    let mut _5: [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46

    bb0: {
        _4 = &((*_1).0: util::LazyUsize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:9: 62:47
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46
        (_5.0: impl FnOnce() -> bool) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46
        _3 = LazyUsize::unsync_init::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46]>(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:9: 62:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:16: 62:27
                                         // + literal: Const { ty: for<'r> fn(&'r LazyUsize, [closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46]) -> usize {LazyUsize::unsync_init::<[closure@C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:28: 62:46]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = Ne(move _3, const 0_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:62:9: 62:52
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:63:6: 63:6
    }
}

fn error_impls::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:15:1: 22:2>::from(_1: error::Error) -> std::io::Error {
    debug err => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:16:13: 16:16
    let mut _0: error_impls::std::io::Error; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:16:28: 16:32
    let mut _2: core::option::Option<i32>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:15: 17:33
    let mut _3: error::Error;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:15: 17:18
    let mut _4: isize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:13: 18:24
    let _5: i32;                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:18: 18:23
    let mut _6: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:57: 18:62
    let mut _7: error_impls::std::io::ErrorKind; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:36: 19:56
    let mut _8: error::Error;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:58: 19:61
    scope 1 {
        debug errno => _5;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:18: 18:23
    }

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:15: 17:18
        _2 = error::Error::raw_os_error(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:15: 17:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:19: 17:31
                                         // + literal: Const { ty: fn(error::Error) -> Option<i32> {error::Error::raw_os_error}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:15: 17:33
        switchInt(move _4) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:9: 17:33
    }

    bb2: {
        Deinit(_7);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:36: 19:56
        discriminant(_7) = 39;           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:36: 19:56
        _8 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:58: 19:61
        _0 = std::io::Error::new::<error::Error>(move _7, move _8) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:21: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:19:21: 19:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(ErrorKind, error::Error) -> std::io::Error {std::io::Error::new::<error::Error>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        unreachable;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:17:15: 17:33
    }

    bb4: {
        _5 = ((_2 as Some).0: i32);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:18: 18:23
        _6 = _5;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:57: 18:62
        _0 = std::io::Error::from_raw_os_error(move _6) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:28: 18:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:18:28: 18:56
                                         // + literal: Const { ty: fn(i32) -> std::io::Error {std::io::Error::from_raw_os_error}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error_impls.rs:21:6: 21:6
    }
}

fn getrandom(_1: &mut [u8]) -> Result<(), error::Error> {
    debug dest => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:258:18: 258:22
    let mut _0: core::result::Result<(), error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:258:38: 258:55
    let mut _2: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:259:8: 259:23
    let mut _3: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:259:8: 259:23
    let mut _4: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:262:26: 262:30

    bb0: {
        _3 = &(*_1);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:259:8: 259:23
        _2 = core::slice::<impl [u8]>::is_empty(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:259:8: 259:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:259:13: 259:21
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> bool {core::slice::<impl [u8]>::is_empty}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        switchInt(move _2) -> [false: bb3, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:259:8: 259:23
    }

    bb2: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:260:16: 260:22
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:260:16: 260:22
        goto -> bb4;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:263:2: 263:2
    }

    bb3: {
        _4 = &mut (*_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:262:26: 262:30
        _0 = getrandom_inner(move _4) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:262:5: 262:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:262:5: 262:25
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> Result<(), error::Error> {getrandom_inner}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\lib.rs:263:2: 263:2
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:16: 24:21>::clone(_1: &error::Error) -> error::Error {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:16: 24:21
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:16: 24:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:16: 24:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:21: 24:21
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:23: 24:25>::assert_receiver_is_total_eq(_1: &error::Error) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:23: 24:25
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:23: 24:25
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:25: 24:25
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36>::eq(_1: &error::Error, _2: &error::Error) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36
    let _3: &core::num::NonZeroU32;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
    let mut _5: &core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
    let mut _6: &core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        let _4: &core::num::NonZeroU32;  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        }
    }

    bb0: {
        _3 = &((*_2).0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _4 = &((*_1).0: core::num::NonZeroU32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _5 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _6 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _0 = <NonZeroU32 as PartialEq>::eq(move _5, move _6) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r NonZeroU32, &'s NonZeroU32) -> bool {<NonZeroU32 as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:36: 24:36
    }
}

fn error::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36>::ne(_1: &error::Error, _2: &error::Error) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36
    debug other => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:27: 24:36
    let _3: &core::num::NonZeroU32;      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
    let mut _5: &core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
    let mut _6: &core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
    scope 1 {
        debug __self_1_0 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        let _4: &core::num::NonZeroU32;  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        scope 2 {
            debug __self_0_0 => _4;      // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        }
    }

    bb0: {
        _3 = &((*_2).0: core::num::NonZeroU32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _4 = &((*_1).0: core::num::NonZeroU32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _5 = _4;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _6 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
        _0 = <NonZeroU32 as PartialEq>::ne(move _5, move _6) -> bb1; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:18: 25:28
                                         // + literal: Const { ty: for<'r, 's> fn(&'r NonZeroU32, &'s NonZeroU32) -> bool {<NonZeroU32 as PartialEq>::ne}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:24:36: 24:36
    }
}

fn os_err(_1: i32, _2: &mut [u8]) -> Option<&str> {
    debug _errno => _1;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:117:19: 117:25
    debug _buf => _2;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:117:32: 117:36
    let mut _0: core::option::Option<&str>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:117:52: 117:64

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:118:13: 118:17
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:118:13: 118:17
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:119:10: 119:10
    }
}

const BCRYPT_USE_SYSTEM_PREFERRED_RNG: u32 = {
    let mut _0: u32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:12:40: 12:43

    bb0: {
        _0 = const 2_u32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:12:46: 12:56
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:12:1: 12:57
    }
}

fn getrandom_inner(_1: &mut [u8]) -> Result<(), error::Error> {
    debug dest => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:24:24: 24:28
    let mut _0: core::result::Result<(), error::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:24:44: 24:61
    let mut _2: core::slice::ChunksMut<u8>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _3: core::slice::ChunksMut<u8>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _4: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:34: 26:59
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:34: 26:50
    let mut _7: core::slice::ChunksMut<u8>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _8: core::option::Option<&mut [u8]>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _9: &mut core::slice::ChunksMut<u8>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _10: &mut core::slice::ChunksMut<u8>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    let mut _11: isize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:5: 46:6
    let mut _14: *mut core::ffi::c_void; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:29:17: 29:32
    let mut _15: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:30:17: 30:35
    let mut _16: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:30:17: 30:35
    let mut _17: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:31:17: 31:35
    let mut _18: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:31:17: 31:28
    let mut _19: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:31:17: 31:28
    let mut _20: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:21
    let mut _21: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:15
    let mut _22: (u32, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:21
    let mut _24: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:24: 39:27
    let mut _25: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:30: 39:39
    let mut _27: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:43:59: 43:63
    let mut _28: error::Error;           // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:24: 44:41
    let mut _29: core::num::NonZeroU32;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:36: 44:40
    scope 1 {
        debug iter => _7;                // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
        let _12: &mut [u8];              // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:9: 26:14
        scope 2 {
            debug chunk => _12;          // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:9: 26:14
            let _13: u32;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:27:13: 27:16
            scope 3 {
                debug ret => _13;        // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:27:13: 27:16
                let _23: u32;            // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:17: 39:21
                scope 5 {
                    debug code => _23;   // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:17: 39:21
                    let _26: core::num::NonZeroU32; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:43:17: 43:21
                    scope 6 {
                        debug code => _26; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:43:17: 43:21
                    }
                    scope 7 {
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _4 = &mut (*_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
        _6 = core::num::<impl u32>::max_value() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:34: 26:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:34: 26:48
                                         // + literal: Const { ty: fn() -> u32 {core::num::<impl u32>::max_value}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = move _6 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:34: 26:59
        _3 = core::slice::<impl [u8]>::chunks_mut(move _4, move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:23: 26:33
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], usize) -> ChunksMut<'r, u8> {core::slice::<impl [u8]>::chunks_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = <ChunksMut<u8> as IntoIterator>::into_iter(move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
                                         // + literal: Const { ty: fn(ChunksMut<u8>) -> <ChunksMut<u8> as IntoIterator>::IntoIter {<ChunksMut<u8> as IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
        goto -> bb4;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:5: 46:6
    }

    bb4: {
        _10 = &mut _7;                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
        _9 = &mut (*_10);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
        _8 = <ChunksMut<u8> as Iterator>::next(move _9) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
                                         // + literal: Const { ty: for<'r> fn(&'r mut ChunksMut<u8>) -> Option<<ChunksMut<u8> as Iterator>::Item> {<ChunksMut<u8> as Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _11 = discriminant(_8);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
        switchInt(move _11) -> [0_isize: bb8, 1_isize: bb6, otherwise: bb7]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    }

    bb6: {
        _12 = move ((_8 as Some).0: &mut [u8]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:9: 26:14
        _14 = null_mut::<c_void>() -> bb9; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:29:17: 29:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:29:17: 29:30
                                         // + literal: Const { ty: fn() -> *mut c_void {null_mut::<c_void>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        unreachable;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:26:18: 26:60
    }

    bb8: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:47:5: 47:11
        discriminant(_0) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:47:5: 47:11
        goto -> bb16;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:48:2: 48:2
    }

    bb9: {
        _16 = &mut (*_12);               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:30:17: 30:35
        _15 = core::slice::<impl [u8]>::as_mut_ptr(move _16) -> bb10; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:30:17: 30:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:30:23: 30:33
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {core::slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _19 = &(*_12);                   // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:31:17: 31:28
        _18 = Len((*_19));               // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:31:17: 31:28
        _17 = move _18 as u32 (Misc);    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:31:17: 31:35
        _13 = imp::BCryptGenRandom(move _14, move _15, move _17, const BCRYPT_USE_SYSTEM_PREFERRED_RNG) -> bb11; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:28:13: 33:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:28:13: 28:28
                                         // + literal: Const { ty: unsafe extern "system" fn(*mut c_void, *mut u8, u32, u32) -> u32 {imp::BCryptGenRandom}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _21 = _13;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:15
        _22 = CheckedShr(_21, const 30_i32); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:21
        assert(!move (_22.1: bool), "attempt to shift right by `{}`, which would overflow", const 30_i32) -> bb12; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:21
    }

    bb12: {
        _20 = move (_22.0: u32);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:21
        switchInt(move _20) -> [3_u32: bb13, otherwise: bb4]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:36:12: 36:29
    }

    bb13: {
        _24 = _13;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:24: 39:27
        _25 = const 2147483648_u32;      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:30: 39:39
        _23 = BitXor(move _24, move _25); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:39:24: 39:39
        _27 = _23;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:43:59: 43:63
        _26 = NonZeroU32::new_unchecked(move _27) -> bb14; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:43:33: 43:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:43:33: 43:58
                                         // + literal: Const { ty: unsafe fn(u32) -> NonZeroU32 {NonZeroU32::new_unchecked}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _29 = _26;                       // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:36: 44:40
        _28 = <error::Error as From<NonZeroU32>>::from(move _29) -> bb15; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:24: 44:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:24: 44:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(NonZeroU32) -> error::Error {<error::Error as From<NonZeroU32>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        Deinit(_0);                      // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:20: 44:42
        ((_0 as Err).0: error::Error) = move _28; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:20: 44:42
        discriminant(_0) = 1;            // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:44:20: 44:42
        goto -> bb16;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:48:2: 48:2
    }

    bb16: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\windows.rs:48:2: 48:2
    }
}

fn LazyUsize(_1: AtomicUsize) -> LazyUsize {
    let mut _0: util::LazyUsize;         // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35
        (_0.0: core::sync::atomic::AtomicUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35
    }
}

// MIR FOR CTFE
fn LazyUsize(_1: AtomicUsize) -> LazyUsize {
    let mut _0: util::LazyUsize;         // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35
        (_0.0: core::sync::atomic::AtomicUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:29:1: 29:35
    }
}

fn LazyBool(_1: LazyUsize) -> LazyBool {
    let mut _0: util::LazyBool;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32
        (_0.0: util::LazyUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32
    }
}

// MIR FOR CTFE
fn LazyBool(_1: LazyUsize) -> LazyBool {
    let mut _0: util::LazyBool;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32
        (_0.0: util::LazyUsize) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\util.rs:54:1: 54:32
    }
}

fn error::Error(_1: NonZeroU32) -> error::Error {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30
        (_0.0: core::num::NonZeroU32) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30
    }
}

// MIR FOR CTFE
fn error::Error(_1: NonZeroU32) -> error::Error {
    let mut _0: error::Error;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30
        (_0.0: core::num::NonZeroU32) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\getrandom-0.2.6\src\error.rs:25:1: 25:30
    }
}
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:11:1: 16:2>::new(_1: [W; 2]) -> x2<W, G> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:13:16: 13:18
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:13:31: 13:35
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:14:12: 14:14

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:14:12: 14:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:14:9: 14:28
        (_0.0: [W; 2]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:14:9: 14:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:15:6: 15:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:11:1: 16:2>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:13:24: 13:25

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:13:24: 13:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:13:24: 13:25
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:106:1: 112:2>::not(_1: x2<W, G>) -> x2<<W as core::ops::Not>::Output, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:109:12: 109:16
    let mut _0: soft::x2<<W as core::ops::Not>::Output, G>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:109:21: 109:33
    let mut _2: [<W as core::ops::Not>::Output; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:17: 110:51
    let mut _3: <W as core::ops::Not>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:18: 110:33
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:18: 110:27
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:25: 110:26
    let mut _6: <W as core::ops::Not>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:35: 110:50
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:35: 110:44
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:42: 110:43

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:25: 110:26
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:18: 110:27
        _3 = <W as core::ops::Not>::not(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:18: 110:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:28: 110:31
                                         // + literal: Const { ty: fn(W) -> <W as core::ops::Not>::Output {<W as core::ops::Not>::not}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:42: 110:43
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:35: 110:44
        _6 = <W as core::ops::Not>::not(move _7) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:35: 110:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:45: 110:48
                                         // + literal: Const { ty: fn(W) -> <W as core::ops::Not>::Output {<W as core::ops::Not>::not}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:17: 110:51
        _0 = x2::<<W as core::ops::Not>::Output, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:9: 110:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:9: 110:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([<W as core::ops::Not>::Output; 2]) -> x2<<W as core::ops::Not>::Output, G> {x2::<<W as core::ops::Not>::Output, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:111:6: 111:6
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:110:50: 110:51
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:109:5: 111:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:113:1: 118:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:113:27: 113:28

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:113:27: 113:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:113:27: 113:28
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:113:1: 118:2>::unsafe_from(_1: [W; 2]) -> x2<W, G> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:115:27: 115:29
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:115:42: 115:46
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:116:17: 116:19

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:116:17: 116:19
        _0 = x2::<W, G>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:116:9: 116:20
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:116:9: 116:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:117:6: 117:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:113:1: 118:2>::unsafe_from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:115:35: 115:36

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:115:35: 115:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:115:35: 115:36
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:119:1: 129:2>::extract(_1: x2<W, G>, _2: u32) -> W {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:121:16: 121:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:121:22: 121:23
    let mut _0: W;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:121:33: 121:34
    let _3: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:16: 122:26
    let mut _4: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:16: 122:17
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:9: 122:27
    let mut _6: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:9: 122:27

    bb0: {
        _4 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:16: 122:17
        _3 = move _4 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:16: 122:26
        _5 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:9: 122:27
        _6 = Lt(_3, _5);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:9: 122:27
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:9: 122:27
    }

    bb1: {
        _0 = (_1.0: [W; 2])[_3];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:122:9: 122:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:123:6: 123:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:119:1: 129:2>::insert(_1: x2<W, G>, _2: W, _3: u32) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:125:15: 125:23
    debug w => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:125:25: 125:26
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:125:31: 125:32
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:125:42: 125:46
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:30: 126:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:16: 126:26
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:16: 126:17
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:9: 126:27
    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:9: 126:27

    bb0: {
        _4 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:30: 126:31
        _6 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:16: 126:17
        _5 = move _6 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:16: 126:26
        _7 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:9: 126:27
        _8 = Lt(_5, _7);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:9: 126:27
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:9: 126:27
    }

    bb1: {
        (_1.0: [W; 2])[_5] = move _4;    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:126:9: 126:31
        _0 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:127:9: 127:13
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:128:6: 128:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:130:1: 136:2>::unpack(_1: vec256_storage) -> x2<W, G> {
    debug p => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:132:22: 132:23
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:132:44: 132:48
    let _2: [x86_64::vec128_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:133:13: 133:14
    let mut _3: x86_64::vec256_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:133:17: 133:18
    let mut _4: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:17: 134:51
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:18: 134:33
    let mut _6: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:28: 134:32
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:30: 134:31
    let mut _8: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:35: 134:50
    let mut _9: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:45: 134:49
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:47: 134:48
    scope 1 {
        debug p => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:133:13: 133:14
    }

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:133:17: 133:18
        _2 = vec256_storage::split128(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:133:17: 133:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:133:19: 133:27
                                         // + literal: Const { ty: fn(vec256_storage) -> [vec128_storage; 2] {vec256_storage::split128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:30: 134:31
        _6 = _2[_7];                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:28: 134:32
        _5 = <W as types::Store<vec128_storage>>::unpack(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:18: 134:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:18: 134:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(vec128_storage) -> W {<W as types::Store<vec128_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:47: 134:48
        _9 = _2[_10];                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:45: 134:49
        _8 = <W as types::Store<vec128_storage>>::unpack(move _9) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:35: 134:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:35: 134:44
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(vec128_storage) -> W {<W as types::Store<vec128_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _4 = [move _5, move _8];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:17: 134:51
        _0 = x2::<W, G>::new(move _4) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:9: 134:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:134:9: 134:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:135:6: 135:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:137:1: 146:2>::from(_1: x2<W, G>) -> vec256_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:143:13: 143:14
    let mut _0: x86_64::vec256_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:143:29: 143:33
    let mut _2: [x86_64::vec128_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:32: 144:62
    let mut _3: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:33: 144:46
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:33: 144:39
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:37: 144:38
    let mut _6: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:48: 144:61
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:48: 144:54
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:52: 144:53

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:37: 144:38
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:33: 144:39
        _3 = <W as Into<vec128_storage>>::into(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:33: 144:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:40: 144:44
                                         // + literal: Const { ty: fn(W) -> vec128_storage {<W as Into<vec128_storage>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:52: 144:53
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:48: 144:54
        _6 = <W as Into<vec128_storage>>::into(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:48: 144:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:55: 144:59
                                         // + literal: Const { ty: fn(W) -> vec128_storage {<W as Into<vec128_storage>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:32: 144:62
        _0 = vec256_storage::new128(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:9: 144:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:144:9: 144:31
                                         // + literal: Const { ty: fn([vec128_storage; 2]) -> vec256_storage {vec256_storage::new128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:145:6: 145:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:1: 168:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:32: 159:33

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:32: 159:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:32: 159:33
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:1: 168:2>::to_lanes(_1: x2<W, G>) -> [W; 2] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:161:17: 161:21
    let mut _0: [W; 2];                  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:161:26: 161:32

    bb0: {
        _0 = (_1.0: [W; 2]);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:162:9: 162:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:163:6: 163:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:1: 168:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:161:30: 161:31

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:161:30: 161:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:161:30: 161:31
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:1: 168:2>::from_lanes(_1: [W; 2]) -> x2<W, G> {
    debug lanes => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:165:19: 165:24
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:165:37: 165:41
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:166:17: 166:22

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:166:17: 166:22
        _0 = x2::<W, G>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:166:9: 166:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:166:9: 166:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:167:6: 167:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:159:1: 168:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:165:30: 165:31

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:165:30: 165:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:165:30: 165:31
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:169:1: 174:2>::bswap(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:171:14: 171:18
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:171:23: 171:27
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:17: 172:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:18: 172:35
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:18: 172:27
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:25: 172:26
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:37: 172:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:37: 172:46
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:44: 172:45

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:25: 172:26
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:18: 172:27
        _3 = <W as types::BSwap>::bswap(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:18: 172:35
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:28: 172:33
                                         // + literal: Const { ty: fn(W) -> W {<W as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:44: 172:45
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:37: 172:46
        _6 = <W as types::BSwap>::bswap(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:37: 172:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:47: 172:52
                                         // + literal: Const { ty: fn(W) -> W {<W as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:17: 172:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:9: 172:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:172:9: 172:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:173:6: 173:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:175:1: 198:2>::unsafe_read_le(_1: &[u8]) -> x2<W, G> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:177:30: 177:35
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:177:47: 177:51
    let _2: (&[u8], &[u8]);              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:13: 178:18
    let mut _3: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:21: 178:52
    let mut _4: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:36: 178:51
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:36: 178:47
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:36: 178:47
    let mut _7: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:17: 179:73
    let mut _8: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:18: 179:44
    let mut _9: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:36: 179:43
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:46: 179:72
    let mut _11: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:64: 179:71
    let mut _12: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:13: 178:18
    let mut _13: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:13: 178:18
    scope 1 {
        debug input => _2;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:13: 178:18
    }

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:21: 178:52
        _6 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:36: 178:47
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:36: 178:47
        _4 = Div(move _5, const 2_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:36: 178:51
        _2 = slice::<impl [u8]>::split_at(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:21: 178:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:178:27: 178:35
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], usize) -> (&'r [u8], &'r [u8]) {slice::<impl [u8]>::split_at}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _12 = move (_2.0: &[u8]);        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:36: 179:43
        _9 = _12;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:36: 179:43
        _8 = <W as types::StoreBytes>::unsafe_read_le(move _9) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:18: 179:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:18: 179:35
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _13 = move (_2.1: &[u8]);        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:64: 179:71
        _11 = _13;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:64: 179:71
        _10 = <W as types::StoreBytes>::unsafe_read_le(move _11) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:46: 179:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:46: 179:63
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = [move _8, move _10];        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:17: 179:73
        _0 = x2::<W, G>::new(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:9: 179:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:179:9: 179:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:180:6: 180:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:175:1: 198:2>::unsafe_read_be(_1: &[u8]) -> x2<W, G> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:182:30: 182:35
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:182:47: 182:51
    let _2: (&[u8], &[u8]);              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:13: 183:18
    let mut _3: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:21: 183:52
    let mut _4: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:36: 183:51
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:36: 183:47
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:36: 183:47
    let mut _7: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:17: 184:73
    let mut _8: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:18: 184:44
    let mut _9: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:36: 184:43
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:46: 184:72
    let mut _11: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:64: 184:71
    let mut _12: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:13: 183:18
    let mut _13: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:13: 183:18
    scope 1 {
        debug input => _2;               // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:13: 183:18
    }

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:21: 183:52
        _6 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:36: 183:47
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:36: 183:47
        _4 = Div(move _5, const 2_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:36: 183:51
        _2 = slice::<impl [u8]>::split_at(move _3, move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:21: 183:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:183:27: 183:35
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], usize) -> (&'r [u8], &'r [u8]) {slice::<impl [u8]>::split_at}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _12 = move (_2.0: &[u8]);        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:36: 184:43
        _9 = _12;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:36: 184:43
        _8 = <W as types::StoreBytes>::unsafe_read_be(move _9) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:18: 184:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:18: 184:35
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _13 = move (_2.1: &[u8]);        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:64: 184:71
        _11 = _13;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:64: 184:71
        _10 = <W as types::StoreBytes>::unsafe_read_be(move _11) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:46: 184:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:46: 184:63
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = [move _8, move _10];        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:17: 184:73
        _0 = x2::<W, G>::new(move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:9: 184:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:184:9: 184:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:185:6: 185:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:175:1: 198:2>::write_le(_1: x2<W, G>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:187:17: 187:21
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:187:23: 187:26
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:187:39: 187:39
    let _3: (&mut [u8], &mut [u8]);      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:13: 188:16
    let mut _4: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:19: 188:50
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:36: 188:49
    let mut _6: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:36: 188:45
    let mut _7: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:36: 188:45
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:9: 189:34
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:9: 189:18
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:16: 189:17
    let mut _11: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:28: 189:33
    let _12: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:9: 190:34
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:9: 190:18
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:16: 190:17
    let mut _15: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:28: 190:33
    let mut _16: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:13: 188:16
    let mut _17: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:13: 188:16
    scope 1 {
        debug out => _3;                 // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:13: 188:16
    }

    bb0: {
        _4 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:19: 188:50
        _7 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:36: 188:45
        _6 = Len((*_7));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:36: 188:45
        _5 = Div(move _6, const 2_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:36: 188:49
        _3 = slice::<impl [u8]>::split_at_mut(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:19: 188:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:188:23: 188:35
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], usize) -> (&'r mut [u8], &'r mut [u8]) {slice::<impl [u8]>::split_at_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:16: 189:17
        _9 = (_1.0: [W; 2])[_10];        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:9: 189:18
        _16 = move (_3.0: &mut [u8]);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:28: 189:33
        _11 = &mut (*_16);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:28: 189:33
        _8 = <W as types::StoreBytes>::write_le(move _9, move _11) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:9: 189:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:189:19: 189:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:16: 190:17
        _13 = (_1.0: [W; 2])[_14];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:9: 190:18
        _17 = move (_3.1: &mut [u8]);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:28: 190:33
        _15 = &mut (*_17);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:28: 190:33
        _12 = <W as types::StoreBytes>::write_le(move _13, move _15) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:9: 190:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:190:19: 190:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:191:6: 191:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:175:1: 198:2>::write_be(_1: x2<W, G>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:193:17: 193:21
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:193:23: 193:26
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:193:39: 193:39
    let _3: (&mut [u8], &mut [u8]);      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:13: 194:16
    let mut _4: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:19: 194:50
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:36: 194:49
    let mut _6: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:36: 194:45
    let mut _7: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:36: 194:45
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:9: 195:34
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:9: 195:18
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:16: 195:17
    let mut _11: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:28: 195:33
    let _12: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:9: 196:34
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:9: 196:18
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:16: 196:17
    let mut _15: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:28: 196:33
    let mut _16: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:13: 194:16
    let mut _17: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:13: 194:16
    scope 1 {
        debug out => _3;                 // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:13: 194:16
    }

    bb0: {
        _4 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:19: 194:50
        _7 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:36: 194:45
        _6 = Len((*_7));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:36: 194:45
        _5 = Div(move _6, const 2_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:36: 194:49
        _3 = slice::<impl [u8]>::split_at_mut(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:19: 194:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:194:23: 194:35
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], usize) -> (&'r mut [u8], &'r mut [u8]) {slice::<impl [u8]>::split_at_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:16: 195:17
        _9 = (_1.0: [W; 2])[_10];        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:9: 195:18
        _16 = move (_3.0: &mut [u8]);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:28: 195:33
        _11 = &mut (*_16);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:28: 195:33
        _8 = <W as types::StoreBytes>::write_be(move _9, move _11) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:9: 195:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:195:19: 195:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_be}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:16: 196:17
        _13 = (_1.0: [W; 2])[_14];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:9: 196:18
        _17 = move (_3.1: &mut [u8]);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:28: 196:33
        _15 = &mut (*_17);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:28: 196:33
        _12 = <W as types::StoreBytes>::write_be(move _13, move _15) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:9: 196:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:196:19: 196:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_be}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:197:6: 197:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:199:1: 221:2>::shuffle_lane_words2301(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:201:31: 201:35
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:201:40: 201:44
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:202:19: 205:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:13: 203:47
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:13: 203:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:20: 203:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:13: 204:47
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:13: 204:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:20: 204:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:20: 203:21
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:13: 203:22
        _3 = <W as types::LaneWords4>::shuffle_lane_words2301(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:13: 203:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:203:23: 203:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words2301}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:20: 204:21
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:13: 204:22
        _6 = <W as types::LaneWords4>::shuffle_lane_words2301(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:13: 204:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:204:23: 204:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words2301}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:202:19: 205:10
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:202:9: 205:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:202:9: 202:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:206:6: 206:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:199:1: 221:2>::shuffle_lane_words1230(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:208:31: 208:35
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:208:40: 208:44
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:209:19: 212:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:13: 210:47
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:13: 210:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:20: 210:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:13: 211:47
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:13: 211:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:20: 211:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:20: 210:21
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:13: 210:22
        _3 = <W as types::LaneWords4>::shuffle_lane_words1230(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:13: 210:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:210:23: 210:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words1230}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:20: 211:21
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:13: 211:22
        _6 = <W as types::LaneWords4>::shuffle_lane_words1230(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:13: 211:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:211:23: 211:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words1230}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:209:19: 212:10
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:209:9: 212:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:209:9: 209:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:213:6: 213:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:199:1: 221:2>::shuffle_lane_words3012(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:215:31: 215:35
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:215:40: 215:44
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:216:19: 219:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:13: 217:47
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:13: 217:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:20: 217:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:13: 218:47
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:13: 218:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:20: 218:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:20: 217:21
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:13: 217:22
        _3 = <W as types::LaneWords4>::shuffle_lane_words3012(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:13: 217:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:217:23: 217:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words3012}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:20: 218:21
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:13: 218:22
        _6 = <W as types::LaneWords4>::shuffle_lane_words3012(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:13: 218:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:218:23: 218:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words3012}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:216:19: 219:10
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:216:9: 219:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:216:9: 216:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:220:6: 220:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:226:1: 231:2>::new(_1: [W; 4]) -> x4<W> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:228:16: 228:18
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:228:31: 228:35
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:229:12: 229:14

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:229:12: 229:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:229:9: 229:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:229:9: 229:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:230:6: 230:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:226:1: 231:2>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:228:24: 228:25

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:228:24: 228:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:228:24: 228:25
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:308:1: 319:2>::not(_1: x4<W>) -> x4<<W as core::ops::Not>::Output> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:311:12: 311:16
    let mut _0: soft::x4<<W as core::ops::Not>::Output>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:311:21: 311:33
    let mut _2: [<W as core::ops::Not>::Output; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:312:12: 317:10
    let mut _3: <W as core::ops::Not>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:13: 313:28
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:13: 313:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:20: 313:21
    let mut _6: <W as core::ops::Not>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:13: 314:28
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:13: 314:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:20: 314:21
    let mut _9: <W as core::ops::Not>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:13: 315:28
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:13: 315:22
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:20: 315:21
    let mut _12: <W as core::ops::Not>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:13: 316:28
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:13: 316:22
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:20: 316:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:20: 313:21
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:13: 313:22
        _3 = <W as core::ops::Not>::not(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:13: 313:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:313:23: 313:26
                                         // + literal: Const { ty: fn(W) -> <W as core::ops::Not>::Output {<W as core::ops::Not>::not}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:20: 314:21
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:13: 314:22
        _6 = <W as core::ops::Not>::not(move _7) -> [return: bb2, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:13: 314:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:314:23: 314:26
                                         // + literal: Const { ty: fn(W) -> <W as core::ops::Not>::Output {<W as core::ops::Not>::not}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:20: 315:21
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:13: 315:22
        _9 = <W as core::ops::Not>::not(move _10) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:13: 315:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:315:23: 315:26
                                         // + literal: Const { ty: fn(W) -> <W as core::ops::Not>::Output {<W as core::ops::Not>::not}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:20: 316:21
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:13: 316:22
        _12 = <W as core::ops::Not>::not(move _13) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:13: 316:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:316:23: 316:26
                                         // + literal: Const { ty: fn(W) -> <W as core::ops::Not>::Output {<W as core::ops::Not>::not}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:312:12: 317:10
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:312:9: 317:11
        (_0.0: [<W as core::ops::Not>::Output; 4]) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:312:9: 317:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:318:6: 318:6
    }

    bb5 (cleanup): {
        drop(_9) -> bb6;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:317:9: 317:10
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:317:9: 317:10
    }

    bb7 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:317:9: 317:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:311:5: 318:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:320:1: 325:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:320:24: 320:25

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:320:24: 320:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:320:24: 320:25
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:320:1: 325:2>::unsafe_from(_1: [W; 4]) -> x4<W> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:322:27: 322:29
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:322:42: 322:46
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:323:12: 323:14

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:323:12: 323:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:323:9: 323:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:323:9: 323:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:324:6: 324:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:320:1: 325:2>::unsafe_from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:322:35: 322:36

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:322:35: 322:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:322:35: 322:36
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:326:1: 336:2>::extract(_1: x4<W>, _2: u32) -> W {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:328:16: 328:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:328:22: 328:23
    let mut _0: W;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:328:33: 328:34
    let _3: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:16: 329:26
    let mut _4: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:16: 329:17
    let mut _5: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:9: 329:27
    let mut _6: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:9: 329:27

    bb0: {
        _4 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:16: 329:17
        _3 = move _4 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:16: 329:26
        _5 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:9: 329:27
        _6 = Lt(_3, _5);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:9: 329:27
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:9: 329:27
    }

    bb1: {
        _0 = (_1.0: [W; 4])[_3];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:329:9: 329:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:330:6: 330:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:326:1: 336:2>::insert(_1: x4<W>, _2: W, _3: u32) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:332:15: 332:23
    debug w => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:332:25: 332:26
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:332:31: 332:32
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:332:42: 332:46
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:30: 333:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:16: 333:26
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:16: 333:17
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:9: 333:27
    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:9: 333:27

    bb0: {
        _4 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:30: 333:31
        _6 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:16: 333:17
        _5 = move _6 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:16: 333:26
        _7 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:9: 333:27
        _8 = Lt(_5, _7);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:9: 333:27
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:9: 333:27
    }

    bb1: {
        (_1.0: [W; 4])[_5] = move _4;    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:333:9: 333:31
        _0 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:334:9: 334:13
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:335:6: 335:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:337:1: 350:2>::transpose4(_1: x4<W>, _2: x4<W>, _3: x4<W>, _4: x4<W>) -> (x4<W>, x4<W>, x4<W>, x4<W>) {
    debug a => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:339:19: 339:20
    debug b => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:339:28: 339:29
    debug c => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:339:37: 339:38
    debug d => _4;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:339:46: 339:47
    let mut _0: (soft::x4<W>, soft::x4<W>, soft::x4<W>, soft::x4<W>); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:339:58: 339:82
    let mut _5: soft::x4<W>;             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:13: 344:49
    let mut _6: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:16: 344:48
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:17: 344:23
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:21: 344:22
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:25: 344:31
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:29: 344:30
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:33: 344:39
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:37: 344:38
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:41: 344:47
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:45: 344:46
    let mut _15: soft::x4<W>;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:13: 345:49
    let mut _16: [W; 4];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:16: 345:48
    let mut _17: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:17: 345:23
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:21: 345:22
    let mut _19: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:25: 345:31
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:29: 345:30
    let mut _21: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:33: 345:39
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:37: 345:38
    let mut _23: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:41: 345:47
    let _24: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:45: 345:46
    let mut _25: soft::x4<W>;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:13: 346:49
    let mut _26: [W; 4];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:16: 346:48
    let mut _27: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:17: 346:23
    let _28: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:21: 346:22
    let mut _29: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:25: 346:31
    let _30: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:29: 346:30
    let mut _31: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:33: 346:39
    let _32: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:37: 346:38
    let mut _33: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:41: 346:47
    let _34: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:45: 346:46
    let mut _35: soft::x4<W>;            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:13: 347:49
    let mut _36: [W; 4];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:16: 347:48
    let mut _37: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:17: 347:23
    let _38: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:21: 347:22
    let mut _39: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:25: 347:31
    let _40: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:29: 347:30
    let mut _41: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:33: 347:39
    let _42: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:37: 347:38
    let mut _43: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:41: 347:47
    let _44: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:45: 347:46

    bb0: {
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:21: 344:22
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:17: 344:23
        _10 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:29: 344:30
        _9 = (_2.0: [W; 4])[_10];        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:25: 344:31
        _12 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:37: 344:38
        _11 = (_3.0: [W; 4])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:33: 344:39
        _14 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:45: 344:46
        _13 = (_4.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:41: 344:47
        _6 = [move _7, move _9, move _11, move _13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:16: 344:48
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:13: 344:49
        (_5.0: [W; 4]) = move _6;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:344:13: 344:49
        _18 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:21: 345:22
        _17 = (_1.0: [W; 4])[_18];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:17: 345:23
        _20 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:29: 345:30
        _19 = (_2.0: [W; 4])[_20];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:25: 345:31
        _22 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:37: 345:38
        _21 = (_3.0: [W; 4])[_22];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:33: 345:39
        _24 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:45: 345:46
        _23 = (_4.0: [W; 4])[_24];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:41: 345:47
        _16 = [move _17, move _19, move _21, move _23]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:16: 345:48
        Deinit(_15);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:13: 345:49
        (_15.0: [W; 4]) = move _16;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:345:13: 345:49
        _28 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:21: 346:22
        _27 = (_1.0: [W; 4])[_28];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:17: 346:23
        _30 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:29: 346:30
        _29 = (_2.0: [W; 4])[_30];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:25: 346:31
        _32 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:37: 346:38
        _31 = (_3.0: [W; 4])[_32];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:33: 346:39
        _34 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:45: 346:46
        _33 = (_4.0: [W; 4])[_34];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:41: 346:47
        _26 = [move _27, move _29, move _31, move _33]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:16: 346:48
        Deinit(_25);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:13: 346:49
        (_25.0: [W; 4]) = move _26;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:346:13: 346:49
        _38 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:21: 347:22
        _37 = (_1.0: [W; 4])[_38];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:17: 347:23
        _40 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:29: 347:30
        _39 = (_2.0: [W; 4])[_40];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:25: 347:31
        _42 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:37: 347:38
        _41 = (_3.0: [W; 4])[_42];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:33: 347:39
        _44 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:45: 347:46
        _43 = (_4.0: [W; 4])[_44];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:41: 347:47
        _36 = [move _37, move _39, move _41, move _43]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:16: 347:48
        Deinit(_35);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:13: 347:49
        (_35.0: [W; 4]) = move _36;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:347:13: 347:49
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:343:9: 348:10
        (_0.0: soft::x4<W>) = move _5;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:343:9: 348:10
        (_0.1: soft::x4<W>) = move _15;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:343:9: 348:10
        (_0.2: soft::x4<W>) = move _25;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:343:9: 348:10
        (_0.3: soft::x4<W>) = move _35;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:343:9: 348:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:349:6: 349:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:351:1: 362:2>::unpack(_1: vec512_storage) -> x4<W> {
    debug p => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:353:22: 353:23
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:353:44: 353:48
    let _2: [x86_64::vec128_storage; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:354:13: 354:14
    let mut _3: x86_64::vec512_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:354:17: 354:18
    let mut _4: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:355:12: 360:10
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:13: 356:28
    let mut _6: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:23: 356:27
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:25: 356:26
    let mut _8: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:13: 357:28
    let mut _9: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:23: 357:27
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:25: 357:26
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:13: 358:28
    let mut _12: x86_64::vec128_storage; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:23: 358:27
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:25: 358:26
    let mut _14: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:13: 359:28
    let mut _15: x86_64::vec128_storage; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:23: 359:27
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:25: 359:26
    scope 1 {
        debug p => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:354:13: 354:14
    }

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:354:17: 354:18
        _2 = vec512_storage::split128(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:354:17: 354:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:354:19: 354:27
                                         // + literal: Const { ty: fn(vec512_storage) -> [vec128_storage; 4] {vec512_storage::split128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:25: 356:26
        _6 = _2[_7];                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:23: 356:27
        _5 = <W as types::Store<vec128_storage>>::unpack(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:13: 356:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:356:13: 356:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(vec128_storage) -> W {<W as types::Store<vec128_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:25: 357:26
        _9 = _2[_10];                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:23: 357:27
        _8 = <W as types::Store<vec128_storage>>::unpack(move _9) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:13: 357:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:357:13: 357:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(vec128_storage) -> W {<W as types::Store<vec128_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _13 = const 2_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:25: 358:26
        _12 = _2[_13];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:23: 358:27
        _11 = <W as types::Store<vec128_storage>>::unpack(move _12) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:13: 358:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:358:13: 358:22
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(vec128_storage) -> W {<W as types::Store<vec128_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _16 = const 3_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:25: 359:26
        _15 = _2[_16];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:23: 359:27
        _14 = <W as types::Store<vec128_storage>>::unpack(move _15) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:13: 359:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:359:13: 359:22
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: unsafe fn(vec128_storage) -> W {<W as types::Store<vec128_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = [move _5, move _8, move _11, move _14]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:355:12: 360:10
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:355:9: 360:11
        (_0.0: [W; 4]) = move _4;        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:355:9: 360:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:361:6: 361:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:363:1: 372:2>::from(_1: x4<W>) -> vec512_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:369:13: 369:14
    let mut _0: x86_64::vec512_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:369:26: 369:30
    let mut _2: [x86_64::vec128_storage; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:32: 370:92
    let mut _3: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:33: 370:46
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:33: 370:39
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:37: 370:38
    let mut _6: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:48: 370:61
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:48: 370:54
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:52: 370:53
    let mut _9: x86_64::vec128_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:63: 370:76
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:63: 370:69
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:67: 370:68
    let mut _12: x86_64::vec128_storage; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:78: 370:91
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:78: 370:84
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:82: 370:83

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:37: 370:38
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:33: 370:39
        _3 = <W as Into<vec128_storage>>::into(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:33: 370:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:40: 370:44
                                         // + literal: Const { ty: fn(W) -> vec128_storage {<W as Into<vec128_storage>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:52: 370:53
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:48: 370:54
        _6 = <W as Into<vec128_storage>>::into(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:48: 370:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:55: 370:59
                                         // + literal: Const { ty: fn(W) -> vec128_storage {<W as Into<vec128_storage>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:67: 370:68
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:63: 370:69
        _9 = <W as Into<vec128_storage>>::into(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:63: 370:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:70: 370:74
                                         // + literal: Const { ty: fn(W) -> vec128_storage {<W as Into<vec128_storage>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:82: 370:83
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:78: 370:84
        _12 = <W as Into<vec128_storage>>::into(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:78: 370:91
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:85: 370:89
                                         // + literal: Const { ty: fn(W) -> vec128_storage {<W as Into<vec128_storage>>::into}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:32: 370:92
        _0 = vec512_storage::new128(move _2) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:9: 370:93
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:370:9: 370:31
                                         // + literal: Const { ty: fn([vec128_storage; 4]) -> vec512_storage {vec512_storage::new128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:371:6: 371:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:1: 394:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:29: 385:30

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:29: 385:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:29: 385:30
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:1: 394:2>::to_lanes(_1: x4<W>) -> [W; 4] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:387:17: 387:21
    let mut _0: [W; 4];                  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:387:26: 387:32

    bb0: {
        _0 = (_1.0: [W; 4]);             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:388:9: 388:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:389:6: 389:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:1: 394:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:387:30: 387:31

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:387:30: 387:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:387:30: 387:31
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:1: 394:2>::from_lanes(_1: [W; 4]) -> x4<W> {
    debug lanes => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:391:19: 391:24
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:391:37: 391:41
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:392:12: 392:17

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:392:12: 392:17
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:392:9: 392:18
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:392:9: 392:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:393:6: 393:6
    }
}

soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:385:1: 394:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:391:30: 391:31

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:391:30: 391:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:391:30: 391:31
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:395:1: 405:2>::bswap(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:397:14: 397:18
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:397:23: 397:27
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:398:12: 403:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:13: 399:30
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:13: 399:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:20: 399:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:13: 400:30
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:13: 400:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:20: 400:21
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:13: 401:30
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:13: 401:22
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:20: 401:21
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:13: 402:30
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:13: 402:22
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:20: 402:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:20: 399:21
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:13: 399:22
        _3 = <W as types::BSwap>::bswap(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:13: 399:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:399:23: 399:28
                                         // + literal: Const { ty: fn(W) -> W {<W as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:20: 400:21
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:13: 400:22
        _6 = <W as types::BSwap>::bswap(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:13: 400:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:400:23: 400:28
                                         // + literal: Const { ty: fn(W) -> W {<W as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:20: 401:21
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:13: 401:22
        _9 = <W as types::BSwap>::bswap(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:13: 401:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:401:23: 401:28
                                         // + literal: Const { ty: fn(W) -> W {<W as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:20: 402:21
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:13: 402:22
        _12 = <W as types::BSwap>::bswap(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:13: 402:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:402:23: 402:28
                                         // + literal: Const { ty: fn(W) -> W {<W as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:398:12: 403:10
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:398:9: 403:11
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:398:9: 403:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:404:6: 404:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:406:1: 443:2>::unsafe_read_le(_1: &[u8]) -> x4<W> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:408:30: 408:35
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:408:47: 408:51
    let _2: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:13: 409:14
    let mut _3: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:17: 409:28
    let mut _4: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:17: 409:28
    let mut _5: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:410:12: 415:10
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:13: 411:43
    let mut _7: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:31: 411:42
    let _8: &[u8];                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:31: 411:42
    let _9: &[u8];                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:32: 411:42
    let mut _10: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:32: 411:37
    let mut _11: core::ops::RangeTo<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:38: 411:41
    let mut _12: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:40: 411:41
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:13: 412:48
    let mut _14: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:31: 412:47
    let _15: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:31: 412:47
    let _16: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:32: 412:47
    let mut _17: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:32: 412:37
    let mut _18: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:38: 412:46
    let mut _19: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:38: 412:39
    let mut _20: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:46
    let mut _21: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:42
    let mut _22: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:46
    let mut _23: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:13: 413:52
    let mut _24: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:31: 413:51
    let _25: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:31: 413:51
    let _26: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:32: 413:51
    let mut _27: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:32: 413:37
    let mut _28: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:50
    let mut _29: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:43
    let mut _30: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:39
    let mut _31: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:43
    let mut _32: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:50
    let mut _33: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:46
    let mut _34: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:50
    let mut _35: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:13: 414:47
    let mut _36: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:31: 414:46
    let _37: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:31: 414:46
    let _38: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:32: 414:46
    let mut _39: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:32: 414:37
    let mut _40: core::ops::RangeFrom<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:45
    let mut _41: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:43
    let mut _42: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:39
    let mut _43: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:43
    scope 1 {
        debug n => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:13: 409:14
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:17: 409:28
        _3 = Len((*_4));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:17: 409:28
        _2 = Div(move _3, const 4_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:409:17: 409:32
        _10 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:32: 411:37
        _12 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:40: 411:41
        Deinit(_11);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:38: 411:41
        (_11.0: usize) = move _12;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:38: 411:41
        _9 = <[u8] as Index<RangeTo<usize>>>::index(move _10, move _11) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:32: 411:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:32: 411:42
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], RangeTo<usize>) -> &'r <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as Index<RangeTo<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = _9;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:31: 411:42
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:31: 411:42
        _6 = <W as types::StoreBytes>::unsafe_read_le(move _7) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:13: 411:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:411:13: 411:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _17 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:32: 412:37
        _19 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:38: 412:39
        _21 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:42
        _22 = CheckedMul(_21, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:46
        assert(!move (_22.1: bool), "attempt to compute `{} * {}`, which would overflow", move _21, const 2_usize) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:46
    }

    bb3: {
        _20 = move (_22.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:41: 412:46
        Deinit(_18);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:38: 412:46
        (_18.0: usize) = move _19;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:38: 412:46
        (_18.1: usize) = move _20;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:38: 412:46
        _16 = <[u8] as Index<Range<usize>>>::index(move _17, move _18) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:32: 412:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:32: 412:47
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], Range<usize>) -> &'r <[u8] as Index<Range<usize>>>::Output {<[u8] as Index<Range<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _15 = _16;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:31: 412:47
        _14 = _15;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:31: 412:47
        _13 = <W as types::StoreBytes>::unsafe_read_le(move _14) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:13: 412:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:412:13: 412:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _27 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:32: 413:37
        _30 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:39
        _31 = CheckedMul(_30, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:43
        assert(!move (_31.1: bool), "attempt to compute `{} * {}`, which would overflow", move _30, const 2_usize) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:43
    }

    bb6: {
        _29 = move (_31.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:43
        _33 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:46
        _34 = CheckedMul(_33, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:50
        assert(!move (_34.1: bool), "attempt to compute `{} * {}`, which would overflow", move _33, const 3_usize) -> bb7; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:50
    }

    bb7: {
        _32 = move (_34.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:45: 413:50
        Deinit(_28);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:50
        (_28.0: usize) = move _29;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:50
        (_28.1: usize) = move _32;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:38: 413:50
        _26 = <[u8] as Index<Range<usize>>>::index(move _27, move _28) -> bb8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:32: 413:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:32: 413:51
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], Range<usize>) -> &'r <[u8] as Index<Range<usize>>>::Output {<[u8] as Index<Range<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _25 = _26;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:31: 413:51
        _24 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:31: 413:51
        _23 = <W as types::StoreBytes>::unsafe_read_le(move _24) -> bb9; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:13: 413:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:413:13: 413:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _39 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:32: 414:37
        _42 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:39
        _43 = CheckedMul(_42, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:43
        assert(!move (_43.1: bool), "attempt to compute `{} * {}`, which would overflow", move _42, const 3_usize) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:43
    }

    bb10: {
        _41 = move (_43.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:43
        Deinit(_40);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:45
        (_40.0: usize) = move _41;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:38: 414:45
        _38 = <[u8] as Index<RangeFrom<usize>>>::index(move _39, move _40) -> bb11; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:32: 414:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:32: 414:46
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], RangeFrom<usize>) -> &'r <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as Index<RangeFrom<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _37 = _38;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:31: 414:46
        _36 = _37;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:31: 414:46
        _35 = <W as types::StoreBytes>::unsafe_read_le(move _36) -> bb12; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:13: 414:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:414:13: 414:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _5 = [move _6, move _13, move _23, move _35]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:410:12: 415:10
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:410:9: 415:11
        (_0.0: [W; 4]) = move _5;        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:410:9: 415:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:416:6: 416:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:406:1: 443:2>::unsafe_read_be(_1: &[u8]) -> x4<W> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:418:30: 418:35
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:418:47: 418:51
    let _2: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:13: 419:14
    let mut _3: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:17: 419:28
    let mut _4: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:17: 419:28
    let mut _5: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:420:12: 425:10
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:13: 421:43
    let mut _7: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:31: 421:42
    let _8: &[u8];                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:31: 421:42
    let _9: &[u8];                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:32: 421:42
    let mut _10: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:32: 421:37
    let mut _11: core::ops::RangeTo<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:38: 421:41
    let mut _12: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:40: 421:41
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:13: 422:48
    let mut _14: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:31: 422:47
    let _15: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:31: 422:47
    let _16: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:32: 422:47
    let mut _17: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:32: 422:37
    let mut _18: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:38: 422:46
    let mut _19: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:38: 422:39
    let mut _20: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:46
    let mut _21: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:42
    let mut _22: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:46
    let mut _23: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:13: 423:52
    let mut _24: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:31: 423:51
    let _25: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:31: 423:51
    let _26: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:32: 423:51
    let mut _27: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:32: 423:37
    let mut _28: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:50
    let mut _29: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:43
    let mut _30: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:39
    let mut _31: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:43
    let mut _32: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:50
    let mut _33: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:46
    let mut _34: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:50
    let mut _35: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:13: 424:47
    let mut _36: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:31: 424:46
    let _37: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:31: 424:46
    let _38: &[u8];                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:32: 424:46
    let mut _39: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:32: 424:37
    let mut _40: core::ops::RangeFrom<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:45
    let mut _41: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:43
    let mut _42: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:39
    let mut _43: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:43
    scope 1 {
        debug n => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:13: 419:14
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:17: 419:28
        _3 = Len((*_4));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:17: 419:28
        _2 = Div(move _3, const 4_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:419:17: 419:32
        _10 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:32: 421:37
        _12 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:40: 421:41
        Deinit(_11);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:38: 421:41
        (_11.0: usize) = move _12;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:38: 421:41
        _9 = <[u8] as Index<RangeTo<usize>>>::index(move _10, move _11) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:32: 421:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:32: 421:42
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], RangeTo<usize>) -> &'r <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as Index<RangeTo<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = _9;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:31: 421:42
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:31: 421:42
        _6 = <W as types::StoreBytes>::unsafe_read_be(move _7) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:13: 421:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:421:13: 421:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _17 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:32: 422:37
        _19 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:38: 422:39
        _21 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:42
        _22 = CheckedMul(_21, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:46
        assert(!move (_22.1: bool), "attempt to compute `{} * {}`, which would overflow", move _21, const 2_usize) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:46
    }

    bb3: {
        _20 = move (_22.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:41: 422:46
        Deinit(_18);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:38: 422:46
        (_18.0: usize) = move _19;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:38: 422:46
        (_18.1: usize) = move _20;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:38: 422:46
        _16 = <[u8] as Index<Range<usize>>>::index(move _17, move _18) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:32: 422:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:32: 422:47
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], Range<usize>) -> &'r <[u8] as Index<Range<usize>>>::Output {<[u8] as Index<Range<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _15 = _16;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:31: 422:47
        _14 = _15;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:31: 422:47
        _13 = <W as types::StoreBytes>::unsafe_read_be(move _14) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:13: 422:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:422:13: 422:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _27 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:32: 423:37
        _30 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:39
        _31 = CheckedMul(_30, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:43
        assert(!move (_31.1: bool), "attempt to compute `{} * {}`, which would overflow", move _30, const 2_usize) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:43
    }

    bb6: {
        _29 = move (_31.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:43
        _33 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:46
        _34 = CheckedMul(_33, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:50
        assert(!move (_34.1: bool), "attempt to compute `{} * {}`, which would overflow", move _33, const 3_usize) -> bb7; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:50
    }

    bb7: {
        _32 = move (_34.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:45: 423:50
        Deinit(_28);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:50
        (_28.0: usize) = move _29;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:50
        (_28.1: usize) = move _32;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:38: 423:50
        _26 = <[u8] as Index<Range<usize>>>::index(move _27, move _28) -> bb8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:32: 423:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:32: 423:51
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], Range<usize>) -> &'r <[u8] as Index<Range<usize>>>::Output {<[u8] as Index<Range<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _25 = _26;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:31: 423:51
        _24 = _25;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:31: 423:51
        _23 = <W as types::StoreBytes>::unsafe_read_be(move _24) -> bb9; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:13: 423:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:423:13: 423:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _39 = _1;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:32: 424:37
        _42 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:39
        _43 = CheckedMul(_42, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:43
        assert(!move (_43.1: bool), "attempt to compute `{} * {}`, which would overflow", move _42, const 3_usize) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:43
    }

    bb10: {
        _41 = move (_43.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:43
        Deinit(_40);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:45
        (_40.0: usize) = move _41;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:38: 424:45
        _38 = <[u8] as Index<RangeFrom<usize>>>::index(move _39, move _40) -> bb11; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:32: 424:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:32: 424:46
                                         // + literal: Const { ty: for<'r> fn(&'r [u8], RangeFrom<usize>) -> &'r <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as Index<RangeFrom<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _37 = _38;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:31: 424:46
        _36 = _37;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:31: 424:46
        _35 = <W as types::StoreBytes>::unsafe_read_be(move _36) -> bb12; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:13: 424:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:424:13: 424:30
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> W {<W as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _5 = [move _6, move _13, move _23, move _35]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:420:12: 425:10
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:420:9: 425:11
        (_0.0: [W; 4]) = move _5;        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:420:9: 425:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:426:6: 426:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:406:1: 443:2>::write_le(_1: x4<W>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:428:17: 428:21
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:428:23: 428:26
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:428:39: 428:39
    let _3: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:13: 429:14
    let mut _4: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:17: 429:26
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:17: 429:26
    let _6: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:9: 430:42
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:9: 430:18
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:16: 430:17
    let mut _9: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:28: 430:41
    let mut _10: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:28: 430:41
    let mut _11: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:33: 430:41
    let mut _12: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:33: 430:36
    let mut _13: core::ops::RangeTo<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:37: 430:40
    let mut _14: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:39: 430:40
    let _15: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:9: 431:47
    let mut _16: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:9: 431:18
    let _17: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:16: 431:17
    let mut _18: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:28: 431:46
    let mut _19: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:28: 431:46
    let mut _20: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:33: 431:46
    let mut _21: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:33: 431:36
    let mut _22: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:37: 431:45
    let mut _23: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:37: 431:38
    let mut _24: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:45
    let mut _25: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:41
    let mut _26: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:45
    let _27: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:9: 432:51
    let mut _28: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:9: 432:18
    let _29: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:16: 432:17
    let mut _30: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:28: 432:50
    let mut _31: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:28: 432:50
    let mut _32: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:33: 432:50
    let mut _33: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:33: 432:36
    let mut _34: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:49
    let mut _35: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:42
    let mut _36: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:38
    let mut _37: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:42
    let mut _38: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:49
    let mut _39: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:45
    let mut _40: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:49
    let _41: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:9: 433:46
    let mut _42: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:9: 433:18
    let _43: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:16: 433:17
    let mut _44: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:28: 433:45
    let mut _45: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:28: 433:45
    let mut _46: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:33: 433:45
    let mut _47: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:33: 433:36
    let mut _48: core::ops::RangeFrom<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:44
    let mut _49: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:42
    let mut _50: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:38
    let mut _51: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:42
    scope 1 {
        debug n => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:13: 429:14
    }

    bb0: {
        _5 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:17: 429:26
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:17: 429:26
        _3 = Div(move _4, const 4_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:429:17: 429:30
        _8 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:16: 430:17
        _7 = (_1.0: [W; 4])[_8];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:9: 430:18
        _12 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:33: 430:36
        _14 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:39: 430:40
        Deinit(_13);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:37: 430:40
        (_13.0: usize) = move _14;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:37: 430:40
        _11 = <[u8] as IndexMut<RangeTo<usize>>>::index_mut(move _12, move _13) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:33: 430:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:33: 430:41
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], RangeTo<usize>) -> &'r mut <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as IndexMut<RangeTo<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = &mut (*_11);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:28: 430:41
        _9 = &mut (*_10);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:28: 430:41
        _6 = <W as types::StoreBytes>::write_le(move _7, move _9) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:9: 430:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:430:19: 430:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _17 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:16: 431:17
        _16 = (_1.0: [W; 4])[_17];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:9: 431:18
        _21 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:33: 431:36
        _23 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:37: 431:38
        _25 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:41
        _26 = CheckedMul(_25, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:45
        assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", move _25, const 2_usize) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:45
    }

    bb3: {
        _24 = move (_26.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:40: 431:45
        Deinit(_22);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:37: 431:45
        (_22.0: usize) = move _23;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:37: 431:45
        (_22.1: usize) = move _24;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:37: 431:45
        _20 = <[u8] as IndexMut<Range<usize>>>::index_mut(move _21, move _22) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:33: 431:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:33: 431:46
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], Range<usize>) -> &'r mut <[u8] as Index<Range<usize>>>::Output {<[u8] as IndexMut<Range<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _19 = &mut (*_20);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:28: 431:46
        _18 = &mut (*_19);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:28: 431:46
        _15 = <W as types::StoreBytes>::write_le(move _16, move _18) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:9: 431:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:431:19: 431:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _29 = const 2_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:16: 432:17
        _28 = (_1.0: [W; 4])[_29];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:9: 432:18
        _33 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:33: 432:36
        _36 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:38
        _37 = CheckedMul(_36, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:42
        assert(!move (_37.1: bool), "attempt to compute `{} * {}`, which would overflow", move _36, const 2_usize) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:42
    }

    bb6: {
        _35 = move (_37.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:42
        _39 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:45
        _40 = CheckedMul(_39, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:49
        assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", move _39, const 3_usize) -> bb7; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:49
    }

    bb7: {
        _38 = move (_40.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:44: 432:49
        Deinit(_34);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:49
        (_34.0: usize) = move _35;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:49
        (_34.1: usize) = move _38;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:37: 432:49
        _32 = <[u8] as IndexMut<Range<usize>>>::index_mut(move _33, move _34) -> bb8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:33: 432:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:33: 432:50
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], Range<usize>) -> &'r mut <[u8] as Index<Range<usize>>>::Output {<[u8] as IndexMut<Range<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _31 = &mut (*_32);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:28: 432:50
        _30 = &mut (*_31);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:28: 432:50
        _27 = <W as types::StoreBytes>::write_le(move _28, move _30) -> bb9; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:9: 432:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:432:19: 432:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _43 = const 3_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:16: 433:17
        _42 = (_1.0: [W; 4])[_43];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:9: 433:18
        _47 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:33: 433:36
        _50 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:38
        _51 = CheckedMul(_50, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:42
        assert(!move (_51.1: bool), "attempt to compute `{} * {}`, which would overflow", move _50, const 3_usize) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:42
    }

    bb10: {
        _49 = move (_51.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:42
        Deinit(_48);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:44
        (_48.0: usize) = move _49;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:37: 433:44
        _46 = <[u8] as IndexMut<RangeFrom<usize>>>::index_mut(move _47, move _48) -> bb11; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:33: 433:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:33: 433:45
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], RangeFrom<usize>) -> &'r mut <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as IndexMut<RangeFrom<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _45 = &mut (*_46);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:28: 433:45
        _44 = &mut (*_45);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:28: 433:45
        _41 = <W as types::StoreBytes>::write_le(move _42, move _44) -> bb12; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:9: 433:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:433:19: 433:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:434:6: 434:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:406:1: 443:2>::write_be(_1: x4<W>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:436:17: 436:21
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:436:23: 436:26
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:436:39: 436:39
    let _3: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:13: 437:14
    let mut _4: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:17: 437:26
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:17: 437:26
    let _6: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:9: 438:42
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:9: 438:18
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:16: 438:17
    let mut _9: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:28: 438:41
    let mut _10: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:28: 438:41
    let mut _11: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:33: 438:41
    let mut _12: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:33: 438:36
    let mut _13: core::ops::RangeTo<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:37: 438:40
    let mut _14: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:39: 438:40
    let _15: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:9: 439:47
    let mut _16: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:9: 439:18
    let _17: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:16: 439:17
    let mut _18: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:28: 439:46
    let mut _19: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:28: 439:46
    let mut _20: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:33: 439:46
    let mut _21: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:33: 439:36
    let mut _22: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:37: 439:45
    let mut _23: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:37: 439:38
    let mut _24: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:45
    let mut _25: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:41
    let mut _26: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:45
    let _27: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:9: 440:51
    let mut _28: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:9: 440:18
    let _29: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:16: 440:17
    let mut _30: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:28: 440:50
    let mut _31: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:28: 440:50
    let mut _32: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:33: 440:50
    let mut _33: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:33: 440:36
    let mut _34: core::ops::Range<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:49
    let mut _35: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:42
    let mut _36: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:38
    let mut _37: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:42
    let mut _38: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:49
    let mut _39: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:45
    let mut _40: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:49
    let _41: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:9: 441:46
    let mut _42: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:9: 441:18
    let _43: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:16: 441:17
    let mut _44: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:28: 441:45
    let mut _45: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:28: 441:45
    let mut _46: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:33: 441:45
    let mut _47: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:33: 441:36
    let mut _48: core::ops::RangeFrom<usize>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:44
    let mut _49: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:42
    let mut _50: usize;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:38
    let mut _51: (usize, bool);          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:42
    scope 1 {
        debug n => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:13: 437:14
    }

    bb0: {
        _5 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:17: 437:26
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:17: 437:26
        _3 = Div(move _4, const 4_usize); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:437:17: 437:30
        _8 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:16: 438:17
        _7 = (_1.0: [W; 4])[_8];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:9: 438:18
        _12 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:33: 438:36
        _14 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:39: 438:40
        Deinit(_13);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:37: 438:40
        (_13.0: usize) = move _14;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:37: 438:40
        _11 = <[u8] as IndexMut<RangeTo<usize>>>::index_mut(move _12, move _13) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:33: 438:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:33: 438:41
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], RangeTo<usize>) -> &'r mut <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as IndexMut<RangeTo<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = &mut (*_11);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:28: 438:41
        _9 = &mut (*_10);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:28: 438:41
        _6 = <W as types::StoreBytes>::write_be(move _7, move _9) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:9: 438:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:438:19: 438:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_be}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _17 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:16: 439:17
        _16 = (_1.0: [W; 4])[_17];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:9: 439:18
        _21 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:33: 439:36
        _23 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:37: 439:38
        _25 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:41
        _26 = CheckedMul(_25, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:45
        assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", move _25, const 2_usize) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:45
    }

    bb3: {
        _24 = move (_26.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:40: 439:45
        Deinit(_22);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:37: 439:45
        (_22.0: usize) = move _23;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:37: 439:45
        (_22.1: usize) = move _24;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:37: 439:45
        _20 = <[u8] as IndexMut<Range<usize>>>::index_mut(move _21, move _22) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:33: 439:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:33: 439:46
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], Range<usize>) -> &'r mut <[u8] as Index<Range<usize>>>::Output {<[u8] as IndexMut<Range<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _19 = &mut (*_20);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:28: 439:46
        _18 = &mut (*_19);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:28: 439:46
        _15 = <W as types::StoreBytes>::write_be(move _16, move _18) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:9: 439:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:439:19: 439:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_be}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _29 = const 2_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:16: 440:17
        _28 = (_1.0: [W; 4])[_29];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:9: 440:18
        _33 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:33: 440:36
        _36 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:38
        _37 = CheckedMul(_36, const 2_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:42
        assert(!move (_37.1: bool), "attempt to compute `{} * {}`, which would overflow", move _36, const 2_usize) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:42
    }

    bb6: {
        _35 = move (_37.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:42
        _39 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:45
        _40 = CheckedMul(_39, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:49
        assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", move _39, const 3_usize) -> bb7; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:49
    }

    bb7: {
        _38 = move (_40.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:44: 440:49
        Deinit(_34);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:49
        (_34.0: usize) = move _35;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:49
        (_34.1: usize) = move _38;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:37: 440:49
        _32 = <[u8] as IndexMut<Range<usize>>>::index_mut(move _33, move _34) -> bb8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:33: 440:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:33: 440:50
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], Range<usize>) -> &'r mut <[u8] as Index<Range<usize>>>::Output {<[u8] as IndexMut<Range<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _31 = &mut (*_32);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:28: 440:50
        _30 = &mut (*_31);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:28: 440:50
        _27 = <W as types::StoreBytes>::write_be(move _28, move _30) -> bb9; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:9: 440:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:440:19: 440:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_be}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _43 = const 3_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:16: 441:17
        _42 = (_1.0: [W; 4])[_43];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:9: 441:18
        _47 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:33: 441:36
        _50 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:38
        _51 = CheckedMul(_50, const 3_usize); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:42
        assert(!move (_51.1: bool), "attempt to compute `{} * {}`, which would overflow", move _50, const 3_usize) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:42
    }

    bb10: {
        _49 = move (_51.0: usize);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:42
        Deinit(_48);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:44
        (_48.0: usize) = move _49;       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:37: 441:44
        _46 = <[u8] as IndexMut<RangeFrom<usize>>>::index_mut(move _47, move _48) -> bb11; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:33: 441:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:33: 441:45
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8], RangeFrom<usize>) -> &'r mut <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as IndexMut<RangeFrom<usize>>>::index_mut}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _45 = &mut (*_46);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:28: 441:45
        _44 = &mut (*_45);               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:28: 441:45
        _41 = <W as types::StoreBytes>::write_be(move _42, move _44) -> bb12; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:9: 441:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:441:19: 441:27
                                         // + literal: Const { ty: for<'r> fn(W, &'r mut [u8]) {<W as types::StoreBytes>::write_be}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:442:6: 442:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:444:1: 472:2>::shuffle_lane_words2301(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:446:31: 446:35
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:446:40: 446:44
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:447:12: 452:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:13: 448:47
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:13: 448:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:20: 448:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:13: 449:47
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:13: 449:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:20: 449:21
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:13: 450:47
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:13: 450:22
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:20: 450:21
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:13: 451:47
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:13: 451:22
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:20: 451:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:20: 448:21
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:13: 448:22
        _3 = <W as types::LaneWords4>::shuffle_lane_words2301(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:13: 448:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:448:23: 448:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words2301}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:20: 449:21
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:13: 449:22
        _6 = <W as types::LaneWords4>::shuffle_lane_words2301(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:13: 449:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:449:23: 449:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words2301}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:20: 450:21
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:13: 450:22
        _9 = <W as types::LaneWords4>::shuffle_lane_words2301(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:13: 450:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:450:23: 450:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words2301}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:20: 451:21
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:13: 451:22
        _12 = <W as types::LaneWords4>::shuffle_lane_words2301(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:13: 451:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:451:23: 451:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words2301}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:447:12: 452:10
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:447:9: 452:11
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:447:9: 452:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:453:6: 453:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:444:1: 472:2>::shuffle_lane_words1230(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:455:31: 455:35
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:455:40: 455:44
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:456:12: 461:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:13: 457:47
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:13: 457:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:20: 457:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:13: 458:47
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:13: 458:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:20: 458:21
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:13: 459:47
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:13: 459:22
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:20: 459:21
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:13: 460:47
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:13: 460:22
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:20: 460:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:20: 457:21
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:13: 457:22
        _3 = <W as types::LaneWords4>::shuffle_lane_words1230(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:13: 457:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:457:23: 457:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words1230}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:20: 458:21
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:13: 458:22
        _6 = <W as types::LaneWords4>::shuffle_lane_words1230(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:13: 458:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:458:23: 458:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words1230}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:20: 459:21
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:13: 459:22
        _9 = <W as types::LaneWords4>::shuffle_lane_words1230(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:13: 459:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:459:23: 459:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words1230}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:20: 460:21
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:13: 460:22
        _12 = <W as types::LaneWords4>::shuffle_lane_words1230(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:13: 460:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:460:23: 460:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words1230}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:456:12: 461:10
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:456:9: 461:11
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:456:9: 461:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:462:6: 462:6
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:444:1: 472:2>::shuffle_lane_words3012(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:464:31: 464:35
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:464:40: 464:44
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:465:12: 470:10
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:13: 466:47
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:13: 466:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:20: 466:21
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:13: 467:47
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:13: 467:22
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:20: 467:21
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:13: 468:47
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:13: 468:22
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:20: 468:21
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:13: 469:47
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:13: 469:22
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:20: 469:21

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:20: 466:21
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:13: 466:22
        _3 = <W as types::LaneWords4>::shuffle_lane_words3012(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:13: 466:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:466:23: 466:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words3012}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:20: 467:21
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:13: 467:22
        _6 = <W as types::LaneWords4>::shuffle_lane_words3012(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:13: 467:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:467:23: 467:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words3012}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:20: 468:21
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:13: 468:22
        _9 = <W as types::LaneWords4>::shuffle_lane_words3012(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:13: 468:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:468:23: 468:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words3012}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:20: 469:21
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:13: 469:22
        _12 = <W as types::LaneWords4>::shuffle_lane_words3012(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:13: 469:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:469:23: 469:45
                                         // + literal: Const { ty: fn(W) -> W {<W as types::LaneWords4>::shuffle_lane_words3012}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:465:12: 470:10
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:465:9: 470:11
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:465:9: 470:11
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:471:6: 471:6
    }
}

types::u32x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:121:23: 121:24

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:121:23: 121:24
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:121:23: 121:24
    }
}

types::u64x2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:126:79: 126:80

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:126:79: 126:80
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:126:79: 126:80
    }
}

types::u128x1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:130:67: 130:68

    bb0: {
        _0 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:130:67: 130:68
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:130:67: 130:68
    }
}

types::u32x4x2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:138:28: 138:29

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:138:28: 138:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:138:28: 138:29
    }
}

types::u64x2x2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:148:28: 148:29

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:148:28: 148:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:148:28: 148:29
    }
}

types::u64x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:158:23: 158:24

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:158:23: 158:24
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:158:23: 158:24
    }
}

types::u128x2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:169:29: 169:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:169:29: 169:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:169:29: 169:30
    }
}

types::u32x4x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:180:20: 180:22

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:180:20: 180:22
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:180:20: 180:22
    }
}

types::u32x4x4::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:181:28: 181:29

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:181:28: 181:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:181:28: 181:29
    }
}

types::u64x2x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:192:28: 192:29

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:192:28: 192:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:192:28: 192:29
    }
}

types::u128x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:202:29: 202:30

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:202:29: 202:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:202:29: 202:30
    }
}

fn types::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:221:1: 229:2>::vzip(_1: T) -> V {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:226:13: 226:17
    let mut _0: V;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:226:22: 226:23
    let mut _2: T;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:227:23: 227:27

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:227:23: 227:27
        _0 = <V as types::MultiLane<T>>::from_lanes(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:227:9: 227:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:227:9: 227:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T) -> V {<V as types::MultiLane<T>>::from_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:228:6: 228:6
    }
}

fn types::Machine::unpack(_1: Self, _2: S) -> V {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:246:31: 246:35
    debug s => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:246:37: 246:38
    let mut _0: V;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:246:46: 246:47
    let mut _3: S;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:247:28: 247:29
    scope 1 {
    }

    bb0: {
        _3 = move _2;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:247:28: 247:29
        _0 = <V as types::Store<S>>::unpack(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:247:18: 247:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:247:18: 247:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(S) -> V {<V as types::Store<S>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:248:6: 248:6
    }
}

fn types::Machine::vec(_1: Self, _2: A) -> V {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:251:18: 251:22
    debug a => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:251:24: 251:25
    let mut _0: V;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:251:33: 251:34
    let mut _3: A;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:255:23: 255:24

    bb0: {
        _3 = move _2;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:255:23: 255:24
        _0 = <V as types::MultiLane<A>>::from_lanes(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:255:9: 255:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:255:9: 255:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(A) -> V {<V as types::MultiLane<A>>::from_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:256:6: 256:6
    }
}

fn types::Machine::read_le(_1: Self, _2: &[u8]) -> V {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:259:19: 259:23
    debug input => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:259:25: 259:30
    let mut _0: V;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:259:42: 259:43
    let mut _3: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:263:36: 263:41
    scope 1 {
    }

    bb0: {
        _3 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:263:36: 263:41
        _0 = <V as types::StoreBytes>::unsafe_read_le(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:263:18: 263:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:263:18: 263:35
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> V {<V as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:264:6: 264:6
    }
}

fn types::Machine::read_be(_1: Self, _2: &[u8]) -> V {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:267:19: 267:23
    debug input => _2;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:267:25: 267:30
    let mut _0: V;                       // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:267:42: 267:43
    let mut _3: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:271:36: 271:41
    scope 1 {
    }

    bb0: {
        _3 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:271:36: 271:41
        _0 = <V as types::StoreBytes>::unsafe_read_be(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:271:18: 271:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:271:18: 271:35
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> V {<V as types::StoreBytes>::unsafe_read_be}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\types.rs:272:6: 272:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right16(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:216:33: 216:37
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:216:42: 216:46
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:19: 217:36
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:29: 217:35

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:29: 217:35
        _2 = swap16_s2(move _3) -> bb1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:19: 217:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:19: 217:28
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {swap16_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:9: 217:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:217:9: 217:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:218:6: 218:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right16(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:273:33: 273:37
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:273:42: 273:46
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:19: 274:36
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:29: 274:35

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:29: 274:35
        _2 = swap16_s2(move _3) -> bb1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:19: 274:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:19: 274:28
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {swap16_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:9: 274:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:274:9: 274:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:275:6: 275:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:280:1: 285:2>::rotate_each_word_right32::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:54: 283:64

    bb0: {
        _0 = const 177_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:54: 283:64
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:54: 283:64
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:280:1: 285:2>::rotate_each_word_right32(_1: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:282:33: 282:37
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:282:42: 282:46
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:19: 283:67
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:46: 283:52
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:46: 283:52
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<177_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:28: 283:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:28: 283:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<177_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:9: 283:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:283:9: 283:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:284:6: 284:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:30: 321:31

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:30: 321:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:30: 321:31
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::to_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:47: 326:48

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:47: 326:48
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:47: 326:48
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::to_lanes(_1: u32x4_sse2<S3, YesS4, NI>) -> [u32; 4] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:323:17: 323:21
    let mut _0: [u32; 4];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:323:26: 323:34
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:21: 325:46
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:39: 325:45
    let mut _6: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:21: 326:49
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:39: 326:45
    let mut _8: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:14: 327:22
    let mut _9: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:14: 327:15
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:40
    let mut _11: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:33
    let mut _12: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:25: 327:26
    let mut _13: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:33
    let mut _14: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:42: 327:50
    let mut _15: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:42: 327:43
    let mut _16: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:68
    let mut _17: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:61
    let mut _18: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:53: 327:54
    let mut _19: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:61
    scope 1 {
        let _2: u64;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:17: 325:18
        scope 2 {
            debug x => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:17: 325:18
            let _5: u64;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:17: 326:18
            scope 3 {
                debug y => _5;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:17: 326:18
            }
        }
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:39: 325:45
        _3 = core::arch::x86_64::_mm_cvtsi128_si64(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:21: 325:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:21: 325:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = move _3 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:325:21: 325:53
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:39: 326:45
        _6 = core::arch::x86_64::_mm_extract_epi64::<1_i32>(move _7) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:21: 326:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:21: 326:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_extract_epi64::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = move _6 as u64 (Misc);      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:326:21: 326:56
        _9 = _2;                         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:14: 327:15
        _8 = move _9 as u32 (Misc);      // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:14: 327:22
        _12 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:25: 327:26
        _13 = CheckedShr(_12, const 32_i32); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:33
        assert(!move (_13.1: bool), "attempt to shift right by `{}`, which would overflow", const 32_i32) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:33
    }

    bb3: {
        _11 = move (_13.0: u64);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:33
        _10 = move _11 as u32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:24: 327:40
        _15 = _5;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:42: 327:43
        _14 = move _15 as u32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:42: 327:50
        _18 = _5;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:53: 327:54
        _19 = CheckedShr(_18, const 32_i32); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:61
        assert(!move (_19.1: bool), "attempt to shift right by `{}`, which would overflow", const 32_i32) -> bb4; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:61
    }

    bb4: {
        _17 = move (_19.0: u64);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:61
        _16 = move _17 as u32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:52: 327:68
        _0 = [move _8, move _10, move _14, move _16]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:327:13: 327:69
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:329:6: 329:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:323:32: 323:33

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:323:32: 323:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:323:32: 323:33
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::from_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:85: 334:86

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:85: 334:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:85: 334:86
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::from_lanes(_1: [u32; 4]) -> u32x4_sse2<S3, YesS4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:331:19: 331:21
    let mut _0: x86_64::sse2::u32x4_sse2<S3, x86_64::YesS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:331:36: 331:40
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:43: 333:89
    let mut _4: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:43: 333:82
    let mut _5: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:44: 333:56
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:44: 333:49
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:47: 333:48
    let mut _8: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:59: 333:81
    let mut _9: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:60: 333:74
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:61: 333:66
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:64: 333:65
    let mut _12: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:59: 333:81
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:17: 334:87
    let mut _14: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:34: 334:35
    let mut _15: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:37: 334:83
    let mut _16: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:37: 334:76
    let mut _17: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:38: 334:50
    let mut _18: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:38: 334:43
    let _19: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:41: 334:42
    let mut _20: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:53: 334:75
    let mut _21: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:54: 334:68
    let mut _22: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:55: 334:60
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:58: 334:59
    let mut _24: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:53: 334:75
    let mut _25: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:335:23: 335:24
    scope 1 {
        let mut _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:17: 333:22
        scope 2 {
            debug x => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:17: 333:22
        }
    }

    bb0: {
        _7 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:47: 333:48
        _6 = _1[_7];                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:44: 333:49
        _5 = move _6 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:44: 333:56
        _11 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:64: 333:65
        _10 = _1[_11];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:61: 333:66
        _9 = move _10 as u64 (Misc);     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:60: 333:74
        _12 = CheckedShl(_9, const 32_i32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:59: 333:81
        assert(!move (_12.1: bool), "attempt to shift left by `{}`, which would overflow", const 32_i32) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:59: 333:81
    }

    bb1: {
        _8 = move (_12.0: u64);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:59: 333:81
        _4 = BitOr(move _5, move _8);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:43: 333:82
        _3 = move _4 as i64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:43: 333:89
        _2 = core::arch::x86_64::_mm_cvtsi64_si128(move _3) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:25: 333:90
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:333:25: 333:42
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:34: 334:35
        _19 = const 2_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:41: 334:42
        _18 = _1[_19];                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:38: 334:43
        _17 = move _18 as u64 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:38: 334:50
        _23 = const 3_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:58: 334:59
        _22 = _1[_23];                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:55: 334:60
        _21 = move _22 as u64 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:54: 334:68
        _24 = CheckedShl(_21, const 32_i32); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:53: 334:75
        assert(!move (_24.1: bool), "attempt to shift left by `{}`, which would overflow", const 32_i32) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:53: 334:75
    }

    bb3: {
        _20 = move (_24.0: u64);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:53: 334:75
        _16 = BitOr(move _17, move _20); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:37: 334:76
        _15 = move _16 as i64 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:37: 334:83
        _13 = core::arch::x86_64::_mm_insert_epi64::<1_i32>(move _14, move _15) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:17: 334:87
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:17: 334:33
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi64::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = move _13;                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:334:13: 334:87
        _25 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:335:23: 335:24
        _0 = u32x4_sse2::<S3, YesS4, NI>::new(move _25) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:335:13: 335:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:335:13: 335:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, YesS4, NI> {u32x4_sse2::<S3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:337:6: 337:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:321:1: 338:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:331:29: 331:30

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:331:29: 331:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:331:29: 331:30
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:30: 339:31

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:30: 339:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:30: 339:31
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::to_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:65: 344:75

    bb0: {
        _0 = const 238_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:65: 344:75
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:65: 344:75
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::to_lanes(_1: u32x4_sse2<S3, NoS4, NI>) -> [u32; 4] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:341:17: 341:21
    let mut _0: [u32; 4];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:341:26: 341:34
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:21: 343:46
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:39: 343:45
    let mut _6: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:21: 344:77
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:39: 344:76
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:57: 344:63
    let mut _9: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:14: 345:22
    let mut _10: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:14: 345:15
    let mut _11: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:40
    let mut _12: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:33
    let mut _13: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:25: 345:26
    let mut _14: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:33
    let mut _15: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:42: 345:50
    let mut _16: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:42: 345:43
    let mut _17: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:68
    let mut _18: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:61
    let mut _19: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:53: 345:54
    let mut _20: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:61
    scope 1 {
        let _2: u64;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:17: 343:18
        scope 2 {
            debug x => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:17: 343:18
            let _5: u64;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:17: 344:18
            scope 3 {
                debug y => _5;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:17: 344:18
            }
        }
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:39: 343:45
        _3 = core::arch::x86_64::_mm_cvtsi128_si64(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:21: 343:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:21: 343:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = move _3 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:343:21: 343:53
        _8 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:57: 344:63
        _7 = core::arch::x86_64::_mm_shuffle_epi32::<238_i32>(move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:39: 344:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:39: 344:56
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<238_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = core::arch::x86_64::_mm_cvtsi128_si64(move _7) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:21: 344:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:21: 344:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _5 = move _6 as u64 (Misc);      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:344:21: 344:84
        _10 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:14: 345:15
        _9 = move _10 as u32 (Misc);     // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:14: 345:22
        _13 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:25: 345:26
        _14 = CheckedShr(_13, const 32_i32); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:33
        assert(!move (_14.1: bool), "attempt to shift right by `{}`, which would overflow", const 32_i32) -> bb4; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:33
    }

    bb4: {
        _12 = move (_14.0: u64);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:33
        _11 = move _12 as u32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:24: 345:40
        _16 = _5;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:42: 345:43
        _15 = move _16 as u32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:42: 345:50
        _19 = _5;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:53: 345:54
        _20 = CheckedShr(_19, const 32_i32); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:61
        assert(!move (_20.1: bool), "attempt to shift right by `{}`, which would overflow", const 32_i32) -> bb5; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:61
    }

    bb5: {
        _18 = move (_20.0: u64);         // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:61
        _17 = move _18 as u32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:52: 345:68
        _0 = [move _9, move _11, move _15, move _17]; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:345:13: 345:69
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:347:6: 347:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:341:32: 341:33

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:341:32: 341:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:341:32: 341:33
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::from_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:58: 354:59

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:58: 354:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:58: 354:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::from_lanes(_1: [u32; 4]) -> u32x4_sse2<S3, NoS4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:349:19: 349:21
    let mut _0: x86_64::sse2::u32x4_sse2<S3, x86_64::NoS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:349:36: 349:40
    let mut _3: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:21: 351:60
    let mut _4: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:22: 351:34
    let mut _5: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:22: 351:27
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:25: 351:26
    let mut _7: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:37: 351:59
    let mut _8: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:38: 351:52
    let mut _9: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:39: 351:44
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:42: 351:43
    let mut _11: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:37: 351:59
    let mut _13: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:21: 352:60
    let mut _14: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:22: 352:34
    let mut _15: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:22: 352:27
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:25: 352:26
    let mut _17: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:37: 352:59
    let mut _18: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:38: 352:52
    let mut _19: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:39: 352:44
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:42: 352:43
    let mut _21: (u64, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:37: 352:59
    let mut _23: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:353:39: 353:40
    let mut _25: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:36: 354:56
    let mut _26: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:54: 354:55
    let mut _27: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:23: 355:41
    let mut _28: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:36: 355:37
    let mut _29: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:39: 355:40
    scope 1 {
        let _2: i64;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:17: 351:18
        scope 2 {
            debug x => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:17: 351:18
            let _12: i64;                // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:17: 352:18
            scope 3 {
                debug y => _12;          // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:17: 352:18
                let _22: core::arch::x86_64::__m128i; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:353:17: 353:18
                scope 4 {
                    debug x => _22;      // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:353:17: 353:18
                    let _24: core::arch::x86_64::__m128i; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:17: 354:18
                    scope 5 {
                        debug y => _24;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:17: 354:18
                    }
                }
            }
        }
    }

    bb0: {
        _6 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:25: 351:26
        _5 = _1[_6];                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:22: 351:27
        _4 = move _5 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:22: 351:34
        _10 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:42: 351:43
        _9 = _1[_10];                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:39: 351:44
        _8 = move _9 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:38: 351:52
        _11 = CheckedShl(_8, const 32_i32); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:37: 351:59
        assert(!move (_11.1: bool), "attempt to shift left by `{}`, which would overflow", const 32_i32) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:37: 351:59
    }

    bb1: {
        _7 = move (_11.0: u64);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:37: 351:59
        _3 = BitOr(move _4, move _7);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:21: 351:60
        _2 = move _3 as i64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:351:21: 351:67
        _16 = const 2_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:25: 352:26
        _15 = _1[_16];                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:22: 352:27
        _14 = move _15 as u64 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:22: 352:34
        _20 = const 3_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:42: 352:43
        _19 = _1[_20];                   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:39: 352:44
        _18 = move _19 as u64 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:38: 352:52
        _21 = CheckedShl(_18, const 32_i32); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:37: 352:59
        assert(!move (_21.1: bool), "attempt to shift left by `{}`, which would overflow", const 32_i32) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:37: 352:59
    }

    bb2: {
        _17 = move (_21.0: u64);         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:37: 352:59
        _13 = BitOr(move _14, move _17); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:21: 352:60
        _12 = move _13 as i64 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:352:21: 352:67
        _23 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:353:39: 353:40
        _22 = core::arch::x86_64::_mm_cvtsi64_si128(move _23) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:353:21: 353:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:353:21: 353:38
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _26 = _12;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:54: 354:55
        _25 = core::arch::x86_64::_mm_cvtsi64_si128(move _26) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:36: 354:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:36: 354:53
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _24 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _25) -> bb5; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:21: 354:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:354:21: 354:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _28 = _22;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:36: 355:37
        _29 = _24;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:39: 355:40
        _27 = core::arch::x86_64::_mm_or_si128(move _28, move _29) -> bb6; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:23: 355:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:23: 355:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u32x4_sse2::<S3, NoS4, NI>::new(move _27) -> bb7; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:13: 355:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:355:13: 355:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, NoS4, NI> {u32x4_sse2::<S3, NoS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:357:6: 357:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:339:1: 358:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:349:29: 349:30

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:349:29: 349:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:349:29: 349:30
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:30: 359:31

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:30: 359:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:30: 359:31
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::to_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:43: 365:44

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:43: 365:44
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:43: 365:44
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::to_lanes(_1: u64x2_sse2<S3, YesS4, NI>) -> [u64; 2] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:361:17: 361:21
    let mut _0: [u64; 2];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:361:26: 361:34
    let mut _2: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:17: 364:49
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:17: 364:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:35: 364:41
    let mut _5: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:17: 365:52
    let mut _6: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:17: 365:45
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:35: 365:41
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:35: 364:41
        _3 = core::arch::x86_64::_mm_cvtsi128_si64(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:17: 364:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:17: 364:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = move _3 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:364:17: 364:49
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:35: 365:41
        _6 = core::arch::x86_64::_mm_extract_epi64::<1_i32>(move _7) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:17: 365:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:17: 365:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_extract_epi64::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = move _6 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:365:17: 365:52
        _0 = [move _2, move _5];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:363:13: 366:14
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:368:6: 368:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:361:32: 361:33

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:361:32: 361:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:361:32: 361:33
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::from_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:51: 373:52

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:51: 373:52
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:51: 373:52
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::from_lanes(_1: [u64; 2]) -> u64x2_sse2<S3, YesS4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:370:19: 370:21
    let mut _0: x86_64::sse2::u64x2_sse2<S3, x86_64::YesS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:370:36: 370:40
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:43: 372:55
    let mut _4: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:43: 372:48
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:46: 372:47
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:17: 373:53
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:34: 373:35
    let mut _8: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:37: 373:49
    let mut _9: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:37: 373:42
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:40: 373:41
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:374:23: 374:24
    scope 1 {
        let mut _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:17: 372:22
        scope 2 {
            debug x => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:17: 372:22
        }
    }

    bb0: {
        _5 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:46: 372:47
        _4 = _1[_5];                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:43: 372:48
        _3 = move _4 as i64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:43: 372:55
        _2 = core::arch::x86_64::_mm_cvtsi64_si128(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:25: 372:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:372:25: 372:42
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:34: 373:35
        _10 = const 1_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:40: 373:41
        _9 = _1[_10];                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:37: 373:42
        _8 = move _9 as i64 (Misc);      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:37: 373:49
        _6 = core::arch::x86_64::_mm_insert_epi64::<1_i32>(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:17: 373:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:17: 373:33
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi64::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = move _6;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:373:13: 373:53
        _11 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:374:23: 374:24
        _0 = u64x2_sse2::<S3, YesS4, NI>::new(move _11) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:374:13: 374:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:374:13: 374:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, YesS4, NI> {u64x2_sse2::<S3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:376:6: 376:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:359:1: 377:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:370:29: 370:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:370:29: 370:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:370:29: 370:30
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:30: 378:31

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:30: 378:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:30: 378:31
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::to_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:58: 384:59

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:58: 384:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:58: 384:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::to_lanes(_1: u64x2_sse2<S3, NoS4, NI>) -> [u64; 2] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:380:17: 380:21
    let mut _0: [u64; 2];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:380:26: 380:34
    let mut _2: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:17: 383:49
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:17: 383:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:35: 383:41
    let mut _5: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:17: 384:68
    let mut _6: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:17: 384:61
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:35: 384:60
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:50: 384:56
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:35: 383:41
        _3 = core::arch::x86_64::_mm_cvtsi128_si64(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:17: 383:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:17: 383:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = move _3 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:383:17: 383:49
        _8 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:50: 384:56
        _7 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _8) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:35: 384:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:35: 384:49
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = core::arch::x86_64::_mm_cvtsi128_si64(move _7) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:17: 384:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:17: 384:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _5 = move _6 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:384:17: 384:68
        _0 = [move _2, move _5];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:382:13: 385:14
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:387:6: 387:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:380:32: 380:33

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:380:32: 380:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:380:32: 380:33
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::from_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:69: 392:70

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:69: 392:70
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:69: 392:70
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::from_lanes(_1: [u64; 2]) -> u64x2_sse2<S3, NoS4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:389:19: 389:21
    let mut _0: x86_64::sse2::u64x2_sse2<S3, x86_64::NoS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:389:36: 389:40
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:39: 391:51
    let mut _4: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:39: 391:44
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:42: 391:43
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:36: 392:67
    let mut _8: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:54: 392:66
    let mut _9: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:54: 392:59
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:57: 392:58
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:23: 393:41
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:36: 393:37
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:39: 393:40
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:17: 391:18
        scope 2 {
            debug x => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:17: 391:18
            let _6: core::arch::x86_64::__m128i; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:17: 392:18
            scope 3 {
                debug y => _6;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:17: 392:18
            }
        }
    }

    bb0: {
        _5 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:42: 391:43
        _4 = _1[_5];                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:39: 391:44
        _3 = move _4 as i64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:39: 391:51
        _2 = core::arch::x86_64::_mm_cvtsi64_si128(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:21: 391:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:391:21: 391:38
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:57: 392:58
        _9 = _1[_10];                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:54: 392:59
        _8 = move _9 as i64 (Misc);      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:54: 392:66
        _7 = core::arch::x86_64::_mm_cvtsi64_si128(move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:36: 392:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:36: 392:53
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _7) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:21: 392:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:392:21: 392:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _12 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:36: 393:37
        _13 = _6;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:39: 393:40
        _11 = core::arch::x86_64::_mm_or_si128(move _12, move _13) -> bb4; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:23: 393:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:23: 393:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u64x2_sse2::<S3, NoS4, NI>::new(move _11) -> bb5; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:13: 393:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:393:13: 393:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, NoS4, NI> {u64x2_sse2::<S3, NoS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:395:6: 395:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:378:1: 396:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:389:29: 389:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:389:29: 389:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:389:29: 389:30
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:35: 397:36

    bb0: {
        _0 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:35: 397:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:35: 397:36
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::to_lanes(_1: u128x1_sse2<S3, S4, NI>) -> [u128; 1] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:399:17: 399:21
    let mut _0: [u128; 1];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:399:26: 399:35

    bb0: {
        panic(const "not implemented");  // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:705:9: 705:52
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:705:9: 705:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:705:34: 705:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:399:33: 399:34

    bb0: {
        _0 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:399:33: 399:34
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:399:33: 399:34
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::from_lanes(_1: [u128; 1]) -> u128x1_sse2<S3, S4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:403:19: 403:21
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:403:37: 403:41
    let mut _2: core::fmt::Arguments;    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
    let mut _3: &[&str];                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
    let mut _4: &[&str; 1];              // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
    let _5: &[&str; 1];                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
    let mut _6: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
    let mut _7: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
    let _8: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
    let _9: [core::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
    let mut _10: core::fmt::ArgumentV1;  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let mut _11: &core::fmt::Arguments;  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let _12: &core::fmt::Arguments;      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let _13: core::fmt::Arguments;       // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let mut _14: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
    let mut _15: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
    let _16: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
    let mut _17: &[core::fmt::ArgumentV1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let mut _18: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let _19: &[core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let _20: [core::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
    let mut _21: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
    let mut _22: &[u128; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
    let _23: &[u128; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
    let mut _24: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
    let mut _25: &[&str; 1];             // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45

    bb0: {
        _25 = const <u128x1_sse2<S3, S4, NI> as types::MultiLane<[u128; 1]>>::from_lanes::promoted[1]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<u128x1_sse2<S3, S4, NI> as types::MultiLane<[u128; 1]>>::from_lanes, [S3, S4, NI], Some(promoted[1])) }
        _5 = _25;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
        _4 = _5;                         // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
        _24 = const <u128x1_sse2<S3, S4, NI> as types::MultiLane<[u128; 1]>>::from_lanes::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<u128x1_sse2<S3, S4, NI> as types::MultiLane<[u128; 1]>>::from_lanes, [S3, S4, NI], Some(promoted[0])) }
        _16 = _24;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
        _15 = _16;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
        _23 = &_1;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
        _21 = ArgumentV1::new_debug::<[u128; 1]>(move _22) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:32: 404:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b [u128; 1]) -> ArgumentV1<'b> {ArgumentV1::new_debug::<[u128; 1]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _20 = [move _21];                // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
        _19 = &_20;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
        _18 = _19;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
        _17 = move _18 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
        _13 = Arguments::new_v1(move _14, move _17) -> bb2; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _12 = &_13;                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
        _11 = _12;                       // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
        _10 = ArgumentV1::new_display::<Arguments>(move _11) -> bb3; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:47: 708:77
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Arguments) -> ArgumentV1<'b> {ArgumentV1::new_display::<Arguments>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _9 = [move _10];                 // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
        _8 = &_9;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
        _7 = _8;                         // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
        _6 = move _7 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
        _2 = Arguments::new_v1(move _3, move _6) -> bb4; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:38: 57:72
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        panic_fmt(move _2);              // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:9: 57:73
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:57:9: 57:37
                                         // + literal: Const { ty: for<'r> fn(Arguments<'r>) -> ! {panic_fmt}, val: Value(Scalar(<ZST>)) }
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::from_lanes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30

    bb0: {
        _1 = [const ""];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:404:24: 404:30
    }
}

promoted[1] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::from_lanes: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
    let mut _1: [&str; 1];               // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45

    bb0: {
        _1 = [const "not implemented: "]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:708:24: 708:45
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:397:1: 406:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:403:30: 403:31

    bb0: {
        _0 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:403:30: 403:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:403:30: 403:31
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:1: 425:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:410:45: 410:46

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:410:45: 410:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:410:45: 410:46
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:1: 425:2>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:34: 408:35

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:34: 408:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:34: 408:35
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:1: 425:2>::to_lanes(_1: x2<u64x2_sse2<S3, S4, NI>, G1>) -> [u64; 4] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:413:17: 413:21
    let mut _0: [u64; 4];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:413:26: 413:34
    let _2: [u64; 2];                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:14: 414:15
    let _3: [u64; 2];                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:17: 414:18
    let mut _4: ([u64; 2], [u64; 2]);    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:22: 414:66
    let mut _5: [u64; 2];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:23: 414:43
    let mut _6: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:23: 414:32
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:30: 414:31
    let mut _8: [u64; 2];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:45: 414:65
    let mut _9: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:45: 414:54
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:52: 414:53
    let mut _11: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:10: 415:14
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:12: 415:13
    let mut _13: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:16: 415:20
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:18: 415:19
    let mut _15: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:22: 415:26
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:24: 415:25
    let mut _17: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:28: 415:32
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:30: 415:31
    scope 1 {
        debug a => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:14: 414:15
        debug b => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:17: 414:18
    }

    bb0: {
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:30: 414:31
        _6 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:23: 414:32
        _5 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes(move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:23: 414:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:33: 414:41
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> [u64; 2] {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:52: 414:53
        _9 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:45: 414:54
        _8 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes(move _9) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:45: 414:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:55: 414:63
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> [u64; 2] {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:22: 414:66
        (_4.0: [u64; 2]) = move _5;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:22: 414:66
        (_4.1: [u64; 2]) = move _8;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:22: 414:66
        _2 = (_4.0: [u64; 2]);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:14: 414:15
        _3 = (_4.1: [u64; 2]);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:414:17: 414:18
        _12 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:12: 415:13
        _11 = _2[_12];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:10: 415:14
        _14 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:18: 415:19
        _13 = _2[_14];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:16: 415:20
        _16 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:24: 415:25
        _15 = _3[_16];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:22: 415:26
        _18 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:30: 415:31
        _17 = _3[_18];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:28: 415:32
        _0 = [move _11, move _13, move _15, move _17]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:415:9: 415:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:416:6: 416:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:1: 425:2>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:413:32: 413:33

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:413:32: 413:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:413:32: 413:33
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:1: 425:2>::from_lanes(_1: [u64; 4]) -> x2<u64x2_sse2<S3, S4, NI>, G1> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:418:19: 418:21
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<S3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:418:36: 418:40
    let _2: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:14: 419:15
    let _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:17: 419:18
    let mut _4: (x86_64::sse2::u64x2_sse2<S3, S4, NI>, x86_64::sse2::u64x2_sse2<S3, S4, NI>); // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:22: 422:10
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:13: 420:51
    let mut _6: [u64; 2];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:36: 420:50
    let mut _7: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:37: 420:42
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:40: 420:41
    let mut _9: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:44: 420:49
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:47: 420:48
    let mut _11: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:13: 421:51
    let mut _12: [u64; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:36: 421:50
    let mut _13: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:37: 421:42
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:40: 421:41
    let mut _15: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:44: 421:49
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:47: 421:48
    let mut _17: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:17: 423:23
    let mut _18: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:18: 423:19
    let mut _19: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:21: 423:22
    scope 1 {
        debug a => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:14: 419:15
        debug b => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:17: 419:18
    }

    bb0: {
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:40: 420:41
        _7 = _1[_8];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:37: 420:42
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:47: 420:48
        _9 = _1[_10];                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:44: 420:49
        _6 = [move _7, move _9];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:36: 420:50
        _5 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::from_lanes(move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:13: 420:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:420:13: 420:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64; 2]) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::from_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _14 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:40: 421:41
        _13 = _1[_14];                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:37: 421:42
        _16 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:47: 421:48
        _15 = _1[_16];                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:44: 421:49
        _12 = [move _13, move _15];      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:36: 421:50
        _11 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::from_lanes(move _12) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:13: 421:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:421:13: 421:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([u64; 2]) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::from_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:22: 422:10
        (_4.0: x86_64::sse2::u64x2_sse2<S3, S4, NI>) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:22: 422:10
        (_4.1: x86_64::sse2::u64x2_sse2<S3, S4, NI>) = move _11; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:22: 422:10
        _2 = (_4.0: x86_64::sse2::u64x2_sse2<S3, S4, NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:14: 419:15
        _3 = (_4.1: x86_64::sse2::u64x2_sse2<S3, S4, NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:419:17: 419:18
        _18 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:18: 423:19
        _19 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:21: 423:22
        _17 = [move _18, move _19];      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:17: 423:23
        _0 = x2::<u64x2_sse2<S3, S4, NI>, G1>::new(move _17) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:9: 423:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:423:9: 423:16
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([u64x2_sse2<S3, S4, NI>; 2]) -> x2<u64x2_sse2<S3, S4, NI>, G1> {x2::<u64x2_sse2<S3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:424:6: 424:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:408:1: 425:2>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:418:29: 418:30

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:418:29: 418:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:418:29: 418:30
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:458:1: 463:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:460:72: 460:73

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:460:72: 460:73
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:460:72: 460:73
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:464:1: 470:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:467:71: 467:72

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:467:71: 467:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:467:71: 467:72
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:480:1: 485:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:482:78: 482:79

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:482:78: 482:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:482:78: 482:79
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:486:1: 492:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:489:71: 489:72

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:489:71: 489:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:489:71: 489:72
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:502:1: 512:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:502:35: 502:36

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:502:35: 502:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:502:35: 502:36
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:502:1: 512:2>::unsafe_from(_1: [u32; 4]) -> u32x4_sse2<S3, S4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:504:27: 504:29
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:504:44: 504:48
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:505:19: 510:10
    let mut _3: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:506:13: 506:25
    let mut _4: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:506:13: 506:18
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:506:16: 506:17
    let mut _6: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:507:13: 507:25
    let mut _7: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:507:13: 507:18
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:507:16: 507:17
    let mut _9: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:508:13: 508:25
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:508:13: 508:18
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:508:16: 508:17
    let mut _12: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:509:13: 509:25
    let mut _13: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:509:13: 509:18
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:509:16: 509:17

    bb0: {
        _5 = const 3_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:506:16: 506:17
        _4 = _1[_5];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:506:13: 506:18
        _3 = move _4 as i32 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:506:13: 506:25
        _8 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:507:16: 507:17
        _7 = _1[_8];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:507:13: 507:18
        _6 = move _7 as i32 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:507:13: 507:25
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:508:16: 508:17
        _10 = _1[_11];                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:508:13: 508:18
        _9 = move _10 as i32 (Misc);     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:508:13: 508:25
        _14 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:509:16: 509:17
        _13 = _1[_14];                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:509:13: 509:18
        _12 = move _13 as i32 (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:509:13: 509:25
        _2 = core::arch::x86_64::_mm_set_epi32(move _3, move _6, move _9, move _12) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:505:19: 510:10
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:505:19: 505:32
                                         // + literal: Const { ty: unsafe fn(i32, i32, i32, i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:505:9: 510:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:505:9: 505:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:511:6: 511:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:502:1: 512:2>::unsafe_from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:504:37: 504:38

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:504:37: 504:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:504:37: 504:38
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:516:27: 516:28

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:516:27: 516:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:516:27: 516:28
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::extract(_1: u32x4_sse2<S3, YesS4, NI>, _2: u32) -> u32 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:519:16: 519:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:519:22: 519:23
    let mut _0: u32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:519:33: 519:36
    let mut _3: [u32; 4];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:24
    let mut _4: x86_64::sse2::u32x4_sse2<S3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:13
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:25: 520:35
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:25: 520:26
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:36
    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:36

    bb0: {
        _4 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:13
        _3 = <u32x4_sse2<S3, YesS4, NI> as types::MultiLane<[u32; 4]>>::to_lanes(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:14: 520:22
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, YesS4, NI>) -> [u32; 4] {<u32x4_sse2<S3, YesS4, NI> as types::MultiLane<[u32; 4]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:25: 520:26
        _5 = move _6 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:25: 520:35
        _7 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:36
        _8 = Lt(_5, _7);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:36
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:36
    }

    bb2: {
        _0 = _3[_5];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:520:9: 520:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:521:6: 521:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::insert::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:57: 526:58

    bb0: {
        _0 = const 0_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:57: 526:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:57: 526:58
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::insert::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:57: 527:58

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:57: 527:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:57: 527:58
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::insert::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:57: 528:58

    bb0: {
        _0 = const 2_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:57: 528:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:57: 528:58
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::insert::{constant#3}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:57: 529:58

    bb0: {
        _0 = const 3_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:57: 529:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:57: 529:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:514:1: 534:2>::insert(_1: u32x4_sse2<S3, YesS4, NI>, _2: u32, _3: u32) -> u32x4_sse2<S3, YesS4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:523:15: 523:19
    debug v => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:523:21: 523:22
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:523:29: 523:30
    let mut _0: x86_64::sse2::u32x4_sse2<S3, x86_64::YesS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:523:40: 523:44
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:524:19: 532:10
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:39: 526:45
    let mut _6: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:47: 526:55
    let mut _7: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:47: 526:48
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:39: 527:45
    let mut _9: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:47: 527:55
    let mut _10: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:47: 527:48
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:39: 528:45
    let mut _12: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:47: 528:55
    let mut _13: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:47: 528:48
    let mut _14: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:39: 529:45
    let mut _15: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:47: 529:55
    let mut _16: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:47: 529:48
    scope 1 {
    }

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb3, 2_u32: bb4, 3_u32: bb5, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:525:13: 525:20
    }

    bb1: {
        panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _5 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:39: 526:45
        _7 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:47: 526:48
        _6 = move _7 as i32 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:47: 526:55
        _4 = core::arch::x86_64::_mm_insert_epi32::<0_i32>(move _5, move _6) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:22: 526:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:526:22: 526:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi32::<0_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:39: 527:45
        _10 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:47: 527:48
        _9 = move _10 as i32 (Misc);     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:47: 527:55
        _4 = core::arch::x86_64::_mm_insert_epi32::<1_i32>(move _8, move _9) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:22: 527:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:527:22: 527:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi32::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:39: 528:45
        _13 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:47: 528:48
        _12 = move _13 as i32 (Misc);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:47: 528:55
        _4 = core::arch::x86_64::_mm_insert_epi32::<2_i32>(move _11, move _12) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:22: 528:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:528:22: 528:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi32::<2_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _14 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:39: 529:45
        _16 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:47: 529:48
        _15 = move _16 as i32 (Misc);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:47: 529:55
        _4 = core::arch::x86_64::_mm_insert_epi32::<3_i32>(move _14, move _15) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:22: 529:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:529:22: 529:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi32::<3_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u32x4_sse2::<S3, YesS4, NI>::new(move _4) -> bb7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:524:9: 532:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:524:9: 524:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, YesS4, NI> {u32x4_sse2::<S3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:533:6: 533:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:537:27: 537:28

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:537:27: 537:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:537:27: 537:28
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::extract(_1: u32x4_sse2<S3, NoS4, NI>, _2: u32) -> u32 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:540:16: 540:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:540:22: 540:23
    let mut _0: u32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:540:33: 540:36
    let mut _3: [u32; 4];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:24
    let mut _4: x86_64::sse2::u32x4_sse2<S3, x86_64::NoS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:13
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:25: 541:35
    let mut _6: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:25: 541:26
    let mut _7: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:36
    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:36

    bb0: {
        _4 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:13
        _3 = <u32x4_sse2<S3, NoS4, NI> as types::MultiLane<[u32; 4]>>::to_lanes(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:24
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:14: 541:22
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, NoS4, NI>) -> [u32; 4] {<u32x4_sse2<S3, NoS4, NI> as types::MultiLane<[u32; 4]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:25: 541:26
        _5 = move _6 as usize (Misc);    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:25: 541:35
        _7 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:36
        _8 = Lt(_5, _7);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:36
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:36
    }

    bb2: {
        _0 = _3[_5];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:541:9: 541:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:542:6: 542:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:59: 552:70

    bb0: {
        _0 = const 120_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:59: 552:70
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:59: 552:70
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:43: 553:44

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:43: 553:44
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:43: 553:44
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:42: 555:53

    bb0: {
        _0 = const 225_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:42: 555:53
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:42: 555:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#3}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:59: 558:70

    bb0: {
        _0 = const 180_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:59: 558:70
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:59: 558:70
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#4}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:43: 559:44

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:43: 559:44
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:43: 559:44
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#5}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:42: 561:53

    bb0: {
        _0 = const 201_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:42: 561:53
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:42: 561:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#6}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:56: 564:57

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:56: 564:57
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:56: 564:57
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert::{constant#7}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:42: 566:53

    bb0: {
        _0 = const 57_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:42: 566:53
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:42: 566:53
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:535:1: 572:2>::insert(_1: u32x4_sse2<S3, NoS4, NI>, _2: u32, _3: u32) -> u32x4_sse2<S3, NoS4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:544:15: 544:19
    debug v => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:544:21: 544:22
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:544:29: 544:30
    let mut _0: x86_64::sse2::u32x4_sse2<S3, x86_64::NoS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:544:40: 544:44
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:545:19: 570:10
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:46: 548:67
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:69: 548:75
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:34: 549:35
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:37: 549:64
    let mut _10: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:55: 549:63
    let mut _11: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:55: 549:56
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:51: 552:57
    let mut _14: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:25: 553:45
    let mut _15: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:40: 553:41
    let mut _16: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:25: 554:69
    let mut _17: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:38: 554:39
    let mut _18: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:41: 554:68
    let mut _19: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:59: 554:67
    let mut _20: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:59: 554:60
    let mut _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:39: 555:40
    let mut _23: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:51: 558:57
    let mut _24: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:25: 559:45
    let mut _25: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:40: 559:41
    let mut _26: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:25: 560:69
    let mut _27: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:38: 560:39
    let mut _28: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:41: 560:68
    let mut _29: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:59: 560:67
    let mut _30: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:59: 560:60
    let mut _31: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:39: 561:40
    let mut _33: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:48: 564:54
    let mut _34: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:25: 565:69
    let mut _35: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:38: 565:39
    let mut _36: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:41: 565:68
    let mut _37: i32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:59: 565:67
    let mut _38: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:59: 565:60
    let mut _39: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:39: 566:40
    scope 1 {
        let _5: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:25: 548:26
        let mut _12: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:25: 552:30
        let mut _22: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:25: 558:30
        let mut _32: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:25: 564:30
        scope 2 {
            debug x => _5;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:25: 548:26
        }
        scope 3 {
            debug x => _12;              // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:25: 552:30
        }
        scope 4 {
            debug x => _22;              // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:25: 558:30
        }
        scope 5 {
            debug x => _32;              // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:25: 564:30
        }
    }

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb6, 2_u32: bb11, 3_u32: bb16, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:546:13: 546:20
    }

    bb1: {
        panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = core::arch::x86_64::_mm_cvtsi32_si128(const -1_i32) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:46: 548:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:46: 548:63
                                         // + literal: Const { ty: unsafe fn(i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi32_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:69: 548:75
        _5 = core::arch::x86_64::_mm_andnot_si128(move _6, move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:29: 548:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:548:29: 548:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_andnot_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _8 = _5;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:34: 549:35
        _11 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:55: 549:56
        _10 = move _11 as i32 (Misc);    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:55: 549:63
        _9 = core::arch::x86_64::_mm_cvtsi32_si128(move _10) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:37: 549:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:37: 549:54
                                         // + literal: Const { ty: unsafe fn(i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi32_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _8, move _9) -> bb20; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:21: 549:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:549:21: 549:33
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _13 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:51: 552:57
        _12 = core::arch::x86_64::_mm_shuffle_epi32::<120_i32>(move _13) -> bb7; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:33: 552:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:552:33: 552:50
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<120_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _15 = _12;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:40: 553:41
        _14 = core::arch::x86_64::_mm_slli_si128::<4_i32>(move _15) -> bb8; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:25: 553:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:25: 553:39
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _12 = move _14;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:553:21: 553:45
        _17 = _12;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:38: 554:39
        _20 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:59: 554:60
        _19 = move _20 as i32 (Misc);    // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:59: 554:67
        _18 = core::arch::x86_64::_mm_cvtsi32_si128(move _19) -> bb9; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:41: 554:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:41: 554:58
                                         // + literal: Const { ty: unsafe fn(i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi32_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _16 = core::arch::x86_64::_mm_or_si128(move _17, move _18) -> bb10; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:25: 554:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:25: 554:37
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _12 = move _16;                  // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:554:21: 554:69
        _21 = _12;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:39: 555:40
        _4 = core::arch::x86_64::_mm_shuffle_epi32::<225_i32>(move _21) -> bb20; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:21: 555:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:555:21: 555:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<225_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _23 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:51: 558:57
        _22 = core::arch::x86_64::_mm_shuffle_epi32::<180_i32>(move _23) -> bb12; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:33: 558:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:558:33: 558:50
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<180_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _25 = _22;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:40: 559:41
        _24 = core::arch::x86_64::_mm_slli_si128::<4_i32>(move _25) -> bb13; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:25: 559:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:25: 559:39
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _22 = move _24;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:559:21: 559:45
        _27 = _22;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:38: 560:39
        _30 = _2;                        // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:59: 560:60
        _29 = move _30 as i32 (Misc);    // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:59: 560:67
        _28 = core::arch::x86_64::_mm_cvtsi32_si128(move _29) -> bb14; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:41: 560:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:41: 560:58
                                         // + literal: Const { ty: unsafe fn(i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi32_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _26 = core::arch::x86_64::_mm_or_si128(move _27, move _28) -> bb15; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:25: 560:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:25: 560:37
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _22 = move _26;                  // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:560:21: 560:69
        _31 = _22;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:39: 561:40
        _4 = core::arch::x86_64::_mm_shuffle_epi32::<201_i32>(move _31) -> bb20; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:21: 561:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:561:21: 561:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<201_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _33 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:48: 564:54
        _32 = core::arch::x86_64::_mm_slli_si128::<4_i32>(move _33) -> bb17; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:33: 564:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:564:33: 564:47
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _35 = _32;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:38: 565:39
        _38 = _2;                        // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:59: 565:60
        _37 = move _38 as i32 (Misc);    // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:59: 565:67
        _36 = core::arch::x86_64::_mm_cvtsi32_si128(move _37) -> bb18; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:41: 565:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:41: 565:58
                                         // + literal: Const { ty: unsafe fn(i32) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi32_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _34 = core::arch::x86_64::_mm_or_si128(move _35, move _36) -> bb19; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:25: 565:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:25: 565:37
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _32 = move _34;                  // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:565:21: 565:69
        _39 = _32;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:39: 566:40
        _4 = core::arch::x86_64::_mm_shuffle_epi32::<57_i32>(move _39) -> bb20; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:21: 566:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:566:21: 566:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<57_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        _0 = u32x4_sse2::<S3, NoS4, NI>::new(move _4) -> bb21; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:545:9: 570:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:545:9: 545:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, NoS4, NI> {u32x4_sse2::<S3, NoS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb21: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:571:6: 571:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:574:1: 587:2>::shuffle_lane_words2301(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:576:31: 576:35
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:576:40: 576:44
    let mut _2: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:577:9: 577:13

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:577:9: 577:13
        _0 = <u32x4_sse2<S3, S4, NI> as types::Words4>::shuffle2301(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:577:9: 577:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:577:14: 577:25
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as types::Words4>::shuffle2301}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:578:6: 578:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:574:1: 587:2>::shuffle_lane_words1230(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:580:31: 580:35
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:580:40: 580:44
    let mut _2: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:581:9: 581:13

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:581:9: 581:13
        _0 = <u32x4_sse2<S3, S4, NI> as types::Words4>::shuffle1230(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:581:9: 581:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:581:14: 581:25
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as types::Words4>::shuffle1230}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:582:6: 582:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:574:1: 587:2>::shuffle_lane_words3012(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:584:31: 584:35
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:584:40: 584:44
    let mut _2: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:585:9: 585:13

    bb0: {
        _2 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:585:9: 585:13
        _0 = <u32x4_sse2<S3, S4, NI> as types::Words4>::shuffle3012(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:585:9: 585:27
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:585:14: 585:25
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as types::Words4>::shuffle3012}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:586:6: 586:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:589:1: 602:2>::shuffle2301::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:54: 592:65

    bb0: {
        _0 = const 78_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:54: 592:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:54: 592:65
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:589:1: 602:2>::shuffle2301(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:591:20: 591:24
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:591:29: 591:33
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:19: 592:68
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:46: 592:52
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:46: 592:52
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<78_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:28: 592:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:28: 592:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<78_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:9: 592:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:592:9: 592:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:593:6: 593:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:589:1: 602:2>::shuffle1230::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:54: 596:65

    bb0: {
        _0 = const 147_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:54: 596:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:54: 596:65
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:589:1: 602:2>::shuffle1230(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:595:20: 595:24
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:595:29: 595:33
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:19: 596:68
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:46: 596:52
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:46: 596:52
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<147_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:28: 596:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:28: 596:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<147_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:9: 596:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:596:9: 596:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:597:6: 597:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:589:1: 602:2>::shuffle3012::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:54: 600:65

    bb0: {
        _0 = const 57_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:54: 600:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:54: 600:65
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:589:1: 602:2>::shuffle3012(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:599:20: 599:24
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:599:29: 599:33
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:19: 600:68
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:46: 600:52
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:46: 600:52
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<57_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:28: 600:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:28: 600:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<57_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:9: 600:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:600:9: 600:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:601:6: 601:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle2301(_1: x2<u64x2_sse2<YesS3, S4, NI>, G1>) -> x2<u64x2_sse2<YesS3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:606:20: 606:24
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:606:29: 606:33
    let mut _2: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:17: 607:77
    let mut _3: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:18: 607:46
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:34: 607:45
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:41: 607:42
    let mut _6: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:48: 607:76
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:64: 607:75
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:71: 607:72

    bb0: {
        _5 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:41: 607:42
        _4 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_5].0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:34: 607:45
        _3 = u64x2_sse2::<YesS3, S4, NI>::new(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:18: 607:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:18: 607:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:71: 607:72
        _7 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_8].0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:64: 607:75
        _6 = u64x2_sse2::<YesS3, S4, NI>::new(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:48: 607:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:48: 607:63
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:17: 607:77
        _0 = x2::<u64x2_sse2<YesS3, S4, NI>, G1>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:9: 607:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:607:9: 607:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<YesS3, S4, NI>; 2]) -> x2<u64x2_sse2<YesS3, S4, NI>, G1> {x2::<u64x2_sse2<YesS3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:608:6: 608:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle3012::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:75: 613:76

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:75: 613:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:75: 613:76
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle3012::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:75: 614:76

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:75: 614:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:75: 614:76
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle3012(_1: x2<u64x2_sse2<YesS3, S4, NI>, G1>) -> x2<u64x2_sse2<YesS3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:610:20: 610:24
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:610:29: 610:33
    let mut _2: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:612:21: 615:14
    let mut _3: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:17: 613:78
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:33: 613:77
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:49: 613:60
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:56: 613:57
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:62: 613:73
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:69: 613:70
    let mut _9: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:17: 614:78
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:33: 614:77
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:49: 614:60
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:56: 614:57
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:62: 614:73
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:69: 614:70
    scope 1 {
    }

    bb0: {
        _6 = const 1_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:56: 613:57
        _5 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_6].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:49: 613:60
        _8 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:69: 613:70
        _7 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_8].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:62: 613:73
        _4 = core::arch::x86_64::_mm_alignr_epi8::<8_i32>(move _5, move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:33: 613:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:33: 613:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_alignr_epi8::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = u64x2_sse2::<YesS3, S4, NI>::new(move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:17: 613:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:613:17: 613:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _12 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:56: 614:57
        _11 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_12].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:49: 614:60
        _14 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:69: 614:70
        _13 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_14].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:62: 614:73
        _10 = core::arch::x86_64::_mm_alignr_epi8::<8_i32>(move _11, move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:33: 614:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:33: 614:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_alignr_epi8::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _9 = u64x2_sse2::<YesS3, S4, NI>::new(move _10) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:17: 614:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:614:17: 614:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _9];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:612:21: 615:14
        _0 = x2::<u64x2_sse2<YesS3, S4, NI>, G1>::new(move _2) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:612:13: 615:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:612:13: 612:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<YesS3, S4, NI>; 2]) -> x2<u64x2_sse2<YesS3, S4, NI>, G1> {x2::<u64x2_sse2<YesS3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:617:6: 617:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle1230::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:75: 622:76

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:75: 622:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:75: 622:76
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle1230::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:75: 623:76

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:75: 623:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:75: 623:76
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:604:1: 627:2>::shuffle1230(_1: x2<u64x2_sse2<YesS3, S4, NI>, G1>) -> x2<u64x2_sse2<YesS3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:619:20: 619:24
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:619:29: 619:33
    let mut _2: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:621:21: 624:14
    let mut _3: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:17: 622:78
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:33: 622:77
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:49: 622:60
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:56: 622:57
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:62: 622:73
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:69: 622:70
    let mut _9: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:17: 623:78
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:33: 623:77
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:49: 623:60
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:56: 623:57
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:62: 623:73
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:69: 623:70
    scope 1 {
    }

    bb0: {
        _6 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:56: 622:57
        _5 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_6].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:49: 622:60
        _8 = const 1_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:69: 622:70
        _7 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_8].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:62: 622:73
        _4 = core::arch::x86_64::_mm_alignr_epi8::<8_i32>(move _5, move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:33: 622:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:33: 622:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_alignr_epi8::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = u64x2_sse2::<YesS3, S4, NI>::new(move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:17: 622:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:622:17: 622:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _12 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:56: 623:57
        _11 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_12].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:49: 623:60
        _14 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:69: 623:70
        _13 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; 2])[_14].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:62: 623:73
        _10 = core::arch::x86_64::_mm_alignr_epi8::<8_i32>(move _11, move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:33: 623:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:33: 623:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_alignr_epi8::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _9 = u64x2_sse2::<YesS3, S4, NI>::new(move _10) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:17: 623:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:623:17: 623:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _9];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:621:21: 624:14
        _0 = x2::<u64x2_sse2<YesS3, S4, NI>, G1>::new(move _2) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:621:13: 624:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:621:13: 621:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<YesS3, S4, NI>; 2]) -> x2<u64x2_sse2<YesS3, S4, NI>, G1> {x2::<u64x2_sse2<YesS3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:626:6: 626:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle2301(_1: x2<u64x2_sse2<NoS3, S4, NI>, G1>) -> x2<u64x2_sse2<NoS3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:630:20: 630:24
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:630:29: 630:33
    let mut _2: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:17: 631:77
    let mut _3: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:18: 631:46
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:34: 631:45
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:41: 631:42
    let mut _6: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:48: 631:76
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:64: 631:75
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:71: 631:72

    bb0: {
        _5 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:41: 631:42
        _4 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_5].0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:34: 631:45
        _3 = u64x2_sse2::<NoS3, S4, NI>::new(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:18: 631:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:18: 631:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:71: 631:72
        _7 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_8].0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:64: 631:75
        _6 = u64x2_sse2::<NoS3, S4, NI>::new(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:48: 631:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:48: 631:63
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:17: 631:77
        _0 = x2::<u64x2_sse2<NoS3, S4, NI>, G1>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:9: 631:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:631:9: 631:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<NoS3, S4, NI>; 2]) -> x2<u64x2_sse2<NoS3, S4, NI>, G1> {x2::<u64x2_sse2<NoS3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:632:6: 632:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle3012::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:49: 636:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:49: 636:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:49: 636:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle3012::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:49: 637:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:49: 637:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:49: 637:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle3012::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:49: 638:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:49: 638:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:49: 638:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle3012::{constant#3}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:49: 639:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:49: 639:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:49: 639:50
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle3012(_1: x2<u64x2_sse2<NoS3, S4, NI>, G1>) -> x2<u64x2_sse2<NoS3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:634:20: 634:24
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:634:29: 634:33
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:36: 636:47
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:43: 636:44
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:36: 637:47
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:43: 637:44
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:36: 638:47
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:43: 638:44
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:36: 639:47
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:43: 639:44
    let mut _15: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:35: 640:36
    let mut _16: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:38: 640:39
    let mut _18: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:35: 641:36
    let mut _19: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:38: 641:39
    let mut _20: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:21: 642:63
    let mut _21: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:22: 642:41
    let mut _22: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:38: 642:40
    let mut _23: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:43: 642:62
    let mut _24: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:59: 642:61
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:17: 636:18
        scope 2 {
            debug a => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:17: 636:18
            let _5: core::arch::x86_64::__m128i; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:17: 637:18
            scope 3 {
                debug b => _5;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:17: 637:18
                let _8: core::arch::x86_64::__m128i; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:17: 638:18
                scope 4 {
                    debug c => _8;       // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:17: 638:18
                    let _11: core::arch::x86_64::__m128i; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:17: 639:18
                    scope 5 {
                        debug d => _11;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:17: 639:18
                        let _14: core::arch::x86_64::__m128i; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:17: 640:19
                        scope 6 {
                            debug da => _14; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:17: 640:19
                            let _17: core::arch::x86_64::__m128i; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:17: 641:19
                            scope 7 {
                                debug bc => _17; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:17: 641:19
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:43: 636:44
        _3 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_4].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:36: 636:47
        _2 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:21: 636:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:636:21: 636:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = const 0_usize;              // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:43: 637:44
        _6 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_7].0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:36: 637:47
        _5 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _6) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:21: 637:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:637:21: 637:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = const 1_usize;             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:43: 638:44
        _9 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_10].0: core::arch::x86_64::__m128i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:36: 638:47
        _8 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _9) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:21: 638:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:638:21: 638:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _13 = const 1_usize;             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:43: 639:44
        _12 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_13].0: core::arch::x86_64::__m128i); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:36: 639:47
        _11 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _12) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:21: 639:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:639:21: 639:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _15 = _11;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:35: 640:36
        _16 = _2;                        // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:38: 640:39
        _14 = core::arch::x86_64::_mm_or_si128(move _15, move _16) -> bb5; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:22: 640:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:640:22: 640:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _18 = _5;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:35: 641:36
        _19 = _8;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:38: 641:39
        _17 = core::arch::x86_64::_mm_or_si128(move _18, move _19) -> bb6; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:22: 641:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:641:22: 641:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _22 = _14;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:38: 642:40
        _21 = u64x2_sse2::<NoS3, S4, NI>::new(move _22) -> bb7; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:22: 642:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:22: 642:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _24 = _17;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:59: 642:61
        _23 = u64x2_sse2::<NoS3, S4, NI>::new(move _24) -> bb8; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:43: 642:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:43: 642:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _20 = [move _21, move _23];      // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:21: 642:63
        _0 = x2::<u64x2_sse2<NoS3, S4, NI>, G1>::new(move _20) -> bb9; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:13: 642:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:642:13: 642:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<NoS3, S4, NI>; 2]) -> x2<u64x2_sse2<NoS3, S4, NI>, G1> {x2::<u64x2_sse2<NoS3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:644:6: 644:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle1230::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:49: 648:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:49: 648:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:49: 648:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle1230::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:49: 649:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:49: 649:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:49: 649:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle1230::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:49: 650:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:49: 650:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:49: 650:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle1230::{constant#3}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:49: 651:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:49: 651:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:49: 651:50
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:628:1: 657:2>::shuffle1230(_1: x2<u64x2_sse2<NoS3, S4, NI>, G1>) -> x2<u64x2_sse2<NoS3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:646:20: 646:24
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:646:29: 646:33
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:36: 648:47
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:43: 648:44
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:36: 649:47
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:43: 649:44
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:36: 650:47
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:43: 650:44
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:36: 651:47
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:43: 651:44
    let mut _15: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:35: 652:36
    let mut _16: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:38: 652:39
    let mut _18: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:35: 653:36
    let mut _19: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:38: 653:39
    let mut _20: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:21: 654:63
    let mut _21: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:22: 654:41
    let mut _22: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:38: 654:40
    let mut _23: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:43: 654:62
    let mut _24: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:59: 654:61
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:17: 648:18
        scope 2 {
            debug a => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:17: 648:18
            let _5: core::arch::x86_64::__m128i; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:17: 649:18
            scope 3 {
                debug b => _5;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:17: 649:18
                let _8: core::arch::x86_64::__m128i; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:17: 650:18
                scope 4 {
                    debug c => _8;       // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:17: 650:18
                    let _11: core::arch::x86_64::__m128i; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:17: 651:18
                    scope 5 {
                        debug d => _11;  // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:17: 651:18
                        let _14: core::arch::x86_64::__m128i; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:17: 652:19
                        scope 6 {
                            debug da => _14; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:17: 652:19
                            let _17: core::arch::x86_64::__m128i; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:17: 653:19
                            scope 7 {
                                debug bc => _17; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:17: 653:19
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:43: 648:44
        _3 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_4].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:36: 648:47
        _2 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:21: 648:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:648:21: 648:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = const 0_usize;              // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:43: 649:44
        _6 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_7].0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:36: 649:47
        _5 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _6) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:21: 649:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:649:21: 649:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _10 = const 1_usize;             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:43: 650:44
        _9 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_10].0: core::arch::x86_64::__m128i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:36: 650:47
        _8 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _9) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:21: 650:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:650:21: 650:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _13 = const 1_usize;             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:43: 651:44
        _12 = ((_1.0: [x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; 2])[_13].0: core::arch::x86_64::__m128i); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:36: 651:47
        _11 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _12) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:21: 651:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:651:21: 651:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _15 = _11;                       // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:35: 652:36
        _16 = _2;                        // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:38: 652:39
        _14 = core::arch::x86_64::_mm_or_si128(move _15, move _16) -> bb5; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:22: 652:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:652:22: 652:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _18 = _5;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:35: 653:36
        _19 = _8;                        // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:38: 653:39
        _17 = core::arch::x86_64::_mm_or_si128(move _18, move _19) -> bb6; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:22: 653:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:653:22: 653:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _22 = _17;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:38: 654:40
        _21 = u64x2_sse2::<NoS3, S4, NI>::new(move _22) -> bb7; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:22: 654:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:22: 654:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _24 = _14;                       // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:59: 654:61
        _23 = u64x2_sse2::<NoS3, S4, NI>::new(move _24) -> bb8; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:43: 654:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:43: 654:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _20 = [move _21, move _23];      // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:21: 654:63
        _0 = x2::<u64x2_sse2<NoS3, S4, NI>, G1>::new(move _20) -> bb9; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:13: 654:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:654:13: 654:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<NoS3, S4, NI>; 2]) -> x2<u64x2_sse2<NoS3, S4, NI>, G1> {x2::<u64x2_sse2<NoS3, S4, NI>, G1>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:656:6: 656:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:659:1: 664:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:659:35: 659:36

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:659:35: 659:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:659:35: 659:36
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:659:1: 664:2>::unsafe_from(_1: [u64; 2]) -> u64x2_sse2<S3, S4, NI> {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:661:27: 661:29
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:661:44: 661:48
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:19: 662:61
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:34: 662:46
    let mut _4: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:34: 662:39
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:37: 662:38
    let mut _6: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:48: 662:60
    let mut _7: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:48: 662:53
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:51: 662:52

    bb0: {
        _5 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:37: 662:38
        _4 = _1[_5];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:34: 662:39
        _3 = move _4 as i64 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:34: 662:46
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:51: 662:52
        _7 = _1[_8];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:48: 662:53
        _6 = move _7 as i64 (Misc);      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:48: 662:60
        _2 = core::arch::x86_64::_mm_set_epi64x(move _3, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:19: 662:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:19: 662:33
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:9: 662:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:662:9: 662:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:663:6: 663:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:659:1: 664:2>::unsafe_from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:661:37: 661:38

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:661:37: 661:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:661:37: 661:38
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:666:1: 687:2>::extract::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:48: 672:49

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:48: 672:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:48: 672:49
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:666:1: 687:2>::extract(_1: u64x2_sse2<S3, YesS4, NI>, _2: u32) -> u64 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:668:16: 668:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:668:22: 668:23
    let mut _0: u64;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:668:33: 668:36
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:22: 671:47
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:40: 671:46
    let mut _5: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:22: 672:50
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:40: 672:46
    scope 1 {
    }

    bb0: {
        switchInt(_2) -> [0_u32: bb2, 1_u32: bb4, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:670:13: 670:20
    }

    bb1: {
        panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:40: 671:46
        _3 = core::arch::x86_64::_mm_cvtsi128_si64(move _4) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:22: 671:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:22: 671:39
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = move _3 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:22: 671:54
        goto -> bb6;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:671:53: 671:54
    }

    bb4: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:40: 672:46
        _5 = core::arch::x86_64::_mm_extract_epi64::<1_i32>(move _6) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:22: 672:50
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:22: 672:39
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_extract_epi64::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = move _5 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:22: 672:57
        goto -> bb6;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:672:56: 672:57
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:676:6: 676:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:666:1: 687:2>::insert::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:57: 681:58

    bb0: {
        _0 = const 0_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:57: 681:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:57: 681:58
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:666:1: 687:2>::insert::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:57: 682:58

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:57: 682:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:57: 682:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:666:1: 687:2>::insert(_1: u64x2_sse2<S3, YesS4, NI>, _2: u64, _3: u32) -> u64x2_sse2<S3, YesS4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:678:15: 678:19
    debug x => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:678:21: 678:22
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:678:29: 678:30
    let mut _0: x86_64::sse2::u64x2_sse2<S3, x86_64::YesS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:678:40: 678:44
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:679:19: 685:10
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:39: 681:45
    let mut _6: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:47: 681:55
    let mut _7: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:47: 681:48
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:39: 682:45
    let mut _9: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:47: 682:55
    let mut _10: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:47: 682:48
    scope 1 {
    }

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb3, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:680:13: 680:20
    }

    bb1: {
        panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _5 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:39: 681:45
        _7 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:47: 681:48
        _6 = move _7 as i64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:47: 681:55
        _4 = core::arch::x86_64::_mm_insert_epi64::<0_i32>(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:22: 681:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:681:22: 681:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi64::<0_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:39: 682:45
        _10 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:47: 682:48
        _9 = move _10 as i64 (Misc);     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:47: 682:55
        _4 = core::arch::x86_64::_mm_insert_epi64::<1_i32>(move _8, move _9) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:22: 682:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:682:22: 682:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_insert_epi64::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u64x2_sse2::<S3, YesS4, NI>::new(move _4) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:679:9: 685:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:679:9: 679:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, YesS4, NI> {u64x2_sse2::<S3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:686:6: 686:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:688:1: 715:2>::extract::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:66: 694:76

    bb0: {
        _0 = const 238_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:66: 694:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:66: 694:76
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:688:1: 715:2>::extract(_1: u64x2_sse2<S3, NoS4, NI>, _2: u32) -> u64 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:690:16: 690:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:690:22: 690:23
    let mut _0: u64;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:690:33: 690:36
    let mut _3: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:22: 693:47
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:40: 693:46
    let mut _5: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:22: 694:78
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:40: 694:77
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:58: 694:64
    scope 1 {
    }

    bb0: {
        switchInt(_2) -> [0_u32: bb2, 1_u32: bb4, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:692:13: 692:20
    }

    bb1: {
        panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:40: 693:46
        _3 = core::arch::x86_64::_mm_cvtsi128_si64(move _4) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:22: 693:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:22: 693:39
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = move _3 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:22: 693:54
        goto -> bb7;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:693:53: 693:54
    }

    bb4: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:58: 694:64
        _6 = core::arch::x86_64::_mm_shuffle_epi32::<238_i32>(move _7) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:40: 694:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:40: 694:57
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<238_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _5 = core::arch::x86_64::_mm_cvtsi128_si64(move _6) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:22: 694:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:22: 694:39
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = move _5 as u64 (Misc);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:22: 694:85
        goto -> bb7;                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:694:84: 694:85
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:698:6: 698:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:688:1: 715:2>::insert::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:65: 709:66

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:65: 709:66
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:65: 709:66
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:688:1: 715:2>::insert(_1: u64x2_sse2<S3, NoS4, NI>, _2: u64, _3: u32) -> u64x2_sse2<S3, NoS4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:700:15: 700:19
    debug x => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:700:21: 700:22
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:700:29: 700:30
    let mut _0: x86_64::sse2::u64x2_sse2<S3, x86_64::NoS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:700:40: 700:44
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:701:19: 713:10
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:21: 704:68
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:38: 704:59
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:61: 704:67
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:21: 705:48
    let mut _9: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:39: 705:47
    let mut _10: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:39: 705:40
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:708:21: 708:43
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:708:36: 708:42
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:21: 709:67
    let mut _14: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:36: 709:63
    let mut _15: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:54: 709:62
    let mut _16: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:54: 709:55
    scope 1 {
    }

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb6, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:702:13: 702:20
    }

    bb1: {
        panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = core::arch::x86_64::_mm_cvtsi64_si128(const -1_i64) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:38: 704:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:38: 704:55
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:61: 704:67
        _5 = core::arch::x86_64::_mm_andnot_si128(move _6, move _7) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:21: 704:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:704:21: 704:37
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_andnot_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _10 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:39: 705:40
        _9 = move _10 as i64 (Misc);     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:39: 705:47
        _8 = core::arch::x86_64::_mm_cvtsi64_si128(move _9) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:21: 705:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:705:21: 705:38
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _8) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:703:22: 706:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:703:22: 703:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _12 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:708:36: 708:42
        _11 = core::arch::x86_64::_mm_move_epi64(move _12) -> bb7; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:708:21: 708:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:708:21: 708:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_move_epi64}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _16 = _2;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:54: 709:55
        _15 = move _16 as i64 (Misc);    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:54: 709:62
        _14 = core::arch::x86_64::_mm_cvtsi64_si128(move _15) -> bb8; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:36: 709:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:36: 709:53
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cvtsi64_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _13 = core::arch::x86_64::_mm_slli_si128::<8_i32>(move _14) -> bb9; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:21: 709:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:709:21: 709:35
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _4 = core::arch::x86_64::_mm_or_si128(move _11, move _13) -> bb10; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:707:22: 710:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:707:22: 707:34
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _0 = u64x2_sse2::<S3, NoS4, NI>::new(move _4) -> bb11; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:701:9: 713:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:701:9: 701:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, NoS4, NI> {u64x2_sse2::<S3, NoS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:714:6: 714:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:717:1: 725:2>::bswap(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:719:14: 719:18
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:719:23: 719:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:720:19: 723:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:722:30: 722:36
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:722:38: 722:39
    scope 1 {
        let _3: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:721:17: 721:18
        scope 2 {
            debug k => _3;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:721:17: 721:18
        }
    }

    bb0: {
        _3 = core::arch::x86_64::_mm_set_epi64x(const 868365760874482187_i64, const 289644378169868803_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:721:21: 721:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:721:21: 721:35
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:722:30: 722:36
        _5 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:722:38: 722:39
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _4, move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:722:13: 722:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:722:13: 722:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:720:9: 723:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:720:9: 720:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:724:6: 724:6
    }
}

bswap32_s2::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:36: 730:47

    bb0: {
        _0 = const 27_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:36: 730:47
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:36: 730:47
    }
}

bswap32_s2::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:36: 731:47

    bb0: {
        _0 = const 27_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:36: 731:47
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:36: 731:47
    }
}

bswap32_s2::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:36: 733:47

    bb0: {
        _0 = const 27_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:36: 733:47
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:36: 733:47
    }
}

bswap32_s2::{constant#3}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:36: 734:47

    bb0: {
        _0 = const 27_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:36: 734:47
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:36: 734:47
    }
}

fn bswap32_s2(_1: core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:727:15: 727:16
    let mut _0: core::arch::x86_64::__m128i; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:727:30: 727:37
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:39: 729:40
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:42: 729:61
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:13: 730:48
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:33: 730:34
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:13: 731:48
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:33: 731:34
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:39: 732:40
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:42: 732:61
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:13: 733:48
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:33: 733:34
    let mut _14: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:13: 734:48
    let mut _15: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:33: 734:34
    let mut _16: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:735:26: 735:27
    let mut _17: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:735:29: 735:30
    scope 1 {
        let mut _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:13: 729:18
        scope 2 {
            debug y => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:13: 729:18
            let mut _9: core::arch::x86_64::__m128i; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:13: 732:18
            scope 3 {
                debug z => _9;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:13: 732:18
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:39: 729:40
        _4 = core::arch::x86_64::_mm_setzero_si128() -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:42: 729:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:42: 729:59
                                         // + literal: Const { ty: unsafe fn() -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_setzero_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_unpacklo_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:21: 729:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:729:21: 729:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_unpacklo_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:33: 730:34
        _5 = core::arch::x86_64::_mm_shufflehi_epi16::<27_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:13: 730:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:13: 730:32
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shufflehi_epi16::<27_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _2 = move _5;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:730:9: 730:48
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:33: 731:34
        _7 = core::arch::x86_64::_mm_shufflelo_epi16::<27_i32>(move _8) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:13: 731:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:13: 731:32
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shufflelo_epi16::<27_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = move _7;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:731:9: 731:48
        _10 = _1;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:39: 732:40
        _11 = core::arch::x86_64::_mm_setzero_si128() -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:42: 732:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:42: 732:59
                                         // + literal: Const { ty: unsafe fn() -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_setzero_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _9 = core::arch::x86_64::_mm_unpackhi_epi8(move _10, move _11) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:21: 732:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:732:21: 732:38
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_unpackhi_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _13 = _9;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:33: 733:34
        _12 = core::arch::x86_64::_mm_shufflehi_epi16::<27_i32>(move _13) -> bb7; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:13: 733:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:13: 733:32
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shufflehi_epi16::<27_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _9 = move _12;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:733:9: 733:48
        _15 = _9;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:33: 734:34
        _14 = core::arch::x86_64::_mm_shufflelo_epi16::<27_i32>(move _15) -> bb8; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:13: 734:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:13: 734:32
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shufflelo_epi16::<27_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _9 = move _14;                   // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:734:9: 734:48
        _16 = _2;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:735:26: 735:27
        _17 = _9;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:735:29: 735:30
        _0 = core::arch::x86_64::_mm_packus_epi16(move _16, move _17) -> bb9; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:735:9: 735:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:735:9: 735:25
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_packus_epi16}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:737:2: 737:2
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:738:1: 743:2>::bswap(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:740:14: 740:18
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:740:23: 740:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:19: 741:37
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:30: 741:36

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:30: 741:36
        _2 = bswap32_s2(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:19: 741:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:19: 741:29
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {bswap32_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:9: 741:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:741:9: 741:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:742:6: 742:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:745:1: 753:2>::bswap(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:747:14: 747:18
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:747:23: 747:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:748:19: 751:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:750:30: 750:36
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:750:38: 750:39
    scope 1 {
        let _3: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:749:17: 749:18
        scope 2 {
            debug k => _3;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:749:17: 749:18
        }
    }

    bb0: {
        _3 = core::arch::x86_64::_mm_set_epi64x(const 579005069656919567_i64, const 283686952306183_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:749:21: 749:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:749:21: 749:35
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:750:30: 750:36
        _5 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:750:38: 750:39
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _4, move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:750:13: 750:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:750:13: 750:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:748:9: 751:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:748:9: 748:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:752:6: 752:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:754:1: 759:2>::bswap::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:65: 757:76

    bb0: {
        _0 = const 177_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:65: 757:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:65: 757:76
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:754:1: 759:2>::bswap(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:756:14: 756:18
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:756:23: 756:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:19: 757:80
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:39: 757:77
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:57: 757:63
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:57: 757:63
        _3 = core::arch::x86_64::_mm_shuffle_epi32::<177_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:39: 757:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:39: 757:56
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<177_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = bswap32_s2(move _3) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:28: 757:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:28: 757:38
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {bswap32_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:9: 757:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:757:9: 757:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:758:6: 758:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:761:1: 769:2>::bswap(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:763:14: 763:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:763:23: 763:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:764:19: 767:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:766:30: 766:36
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:766:38: 766:39
    scope 1 {
        let _3: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:765:17: 765:18
        scope 2 {
            debug k => _3;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:765:17: 765:18
        }
    }

    bb0: {
        _3 = core::arch::x86_64::_mm_set_epi64x(const 1084818905618843912_i64, const 506097522914230528_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:765:21: 765:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:765:21: 765:35
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:766:30: 766:36
        _5 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:766:38: 766:39
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _4, move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:766:13: 766:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:766:13: 766:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:764:9: 767:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:764:9: 764:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:768:6: 768:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:770:1: 775:2>::bswap(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:772:14: 772:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:772:23: 772:27

    bb0: {
        panic(const "not implemented");  // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:705:9: 705:52
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:705:9: 705:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:705:34: 705:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

swap16_s2::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:71: 791:82

    bb0: {
        _0 = const 177_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:71: 791:82
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:71: 791:82
    }
}

swap16_s2::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:57: 791:68

    bb0: {
        _0 = const 177_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:57: 791:68
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:57: 791:68
    }
}

fn swap16_s2(_1: core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:790:14: 790:15
    let mut _0: core::arch::x86_64::__m128i; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:790:29: 790:36
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:34: 791:69
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:54: 791:55
    scope 1 {
    }

    bb0: {
        _3 = _1;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:54: 791:55
        _2 = core::arch::x86_64::_mm_shufflelo_epi16::<177_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:34: 791:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:34: 791:53
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shufflelo_epi16::<177_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = core::arch::x86_64::_mm_shufflehi_epi16::<177_i32>(move _2) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:14: 791:83
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:791:14: 791:33
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shufflehi_epi16::<177_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:792:2: 792:2
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap1::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:22: 796:23

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:22: 796:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:22: 796:23
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap1::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:22: 796:23

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:22: 796:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:22: 796:23
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap1(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:795:14: 795:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:795:23: 795:27
    let mut _3: i8;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        scope 2 {
            debug k => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        }
    }

    bb0: {
        _3 = const -86_i8;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
        _2 = core::arch::x86_64::_mm_set1_epi8(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:34
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
        _6 = core::arch::x86_64::_mm_and_si128(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = core::arch::x86_64::_mm_srli_epi16::<1_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:31
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
        _10 = core::arch::x86_64::_mm_slli_epi16::<1_i32>(move _11) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
        _9 = core::arch::x86_64::_mm_and_si128(move _10, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 782:42
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _4) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 785:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 782:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:797:6: 797:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap2::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:22: 800:23

    bb0: {
        _0 = const 2_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:22: 800:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:22: 800:23
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap2::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:22: 800:23

    bb0: {
        _0 = const 2_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:22: 800:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:22: 800:23
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap2(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:799:14: 799:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:799:23: 799:27
    let mut _3: i8;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        scope 2 {
            debug k => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        }
    }

    bb0: {
        _3 = const -52_i8;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
        _2 = core::arch::x86_64::_mm_set1_epi8(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:34
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
        _6 = core::arch::x86_64::_mm_and_si128(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = core::arch::x86_64::_mm_srli_epi16::<2_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:31
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<2_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
        _10 = core::arch::x86_64::_mm_slli_epi16::<2_i32>(move _11) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<2_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
        _9 = core::arch::x86_64::_mm_and_si128(move _10, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 782:42
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _4) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 785:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 782:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:801:6: 801:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap4::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:22: 804:23

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:22: 804:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:22: 804:23
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap4::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:22: 804:23

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:22: 804:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:22: 804:23
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap4(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:803:14: 803:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:803:23: 803:27
    let mut _3: i8;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        scope 2 {
            debug k => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        }
    }

    bb0: {
        _3 = const -16_i8;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
        _2 = core::arch::x86_64::_mm_set1_epi8(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:34
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
        _6 = core::arch::x86_64::_mm_and_si128(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = core::arch::x86_64::_mm_srli_epi16::<4_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:31
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
        _10 = core::arch::x86_64::_mm_slli_epi16::<4_i32>(move _11) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
        _9 = core::arch::x86_64::_mm_and_si128(move _10, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 782:42
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _4) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 785:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 782:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:805:6: 805:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap8(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:807:14: 807:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:807:23: 807:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:808:26: 811:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:810:30: 810:36
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:810:38: 810:39
    scope 1 {
        let _3: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:809:17: 809:18
        scope 2 {
            debug k => _3;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:809:17: 809:18
        }
    }

    bb0: {
        _3 = core::arch::x86_64::_mm_set_epi64x(const 1013041691324254217_i64, const 434320308619640833_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:809:21: 809:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:809:21: 809:35
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:810:30: 810:36
        _5 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:810:38: 810:39
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _4, move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:810:13: 810:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:810:13: 810:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:808:9: 811:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:808:9: 808:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:812:6: 812:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap16(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:814:15: 814:19
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:814:24: 814:28
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:815:26: 818:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:817:30: 817:36
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:817:38: 817:39
    scope 1 {
        let _3: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:816:17: 816:18
        scope 2 {
            debug k => _3;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:816:17: 816:18
        }
    }

    bb0: {
        _3 = core::arch::x86_64::_mm_set_epi64x(const 940142975169071882_i64, const 361421592464458498_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:816:21: 816:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:816:21: 816:35
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:817:30: 817:36
        _5 = _3;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:817:38: 817:39
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _4, move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:817:13: 817:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:817:13: 817:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:815:9: 818:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:815:9: 815:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:819:6: 819:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap32::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:61: 822:72

    bb0: {
        _0 = const 177_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:61: 822:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:61: 822:72
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap32(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:821:15: 821:19
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:821:24: 821:28
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:26: 822:75
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:53: 822:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:53: 822:59
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<177_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:35: 822:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:35: 822:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<177_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:9: 822:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:822:9: 822:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:823:6: 823:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap64::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:61: 826:72

    bb0: {
        _0 = const 78_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:61: 826:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:61: 826:72
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap64(_1: u128x1_sse2<YesS3, S4, NI>) -> u128x1_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:825:15: 825:19
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:825:24: 825:28
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:26: 826:75
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:53: 826:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:53: 826:59
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<78_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:35: 826:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:35: 826:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<78_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<YesS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:9: 826:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:826:9: 826:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<YesS3, S4, NI> {u128x1_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:827:6: 827:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap1::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:22: 832:23

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:22: 832:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:22: 832:23
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap1::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:22: 832:23

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:22: 832:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:22: 832:23
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap1(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:831:14: 831:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:831:23: 831:27
    let mut _3: i8;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        scope 2 {
            debug k => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        }
    }

    bb0: {
        _3 = const -86_i8;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
        _2 = core::arch::x86_64::_mm_set1_epi8(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:34
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
        _6 = core::arch::x86_64::_mm_and_si128(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = core::arch::x86_64::_mm_srli_epi16::<1_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:31
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
        _10 = core::arch::x86_64::_mm_slli_epi16::<1_i32>(move _11) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
        _9 = core::arch::x86_64::_mm_and_si128(move _10, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 782:42
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _4) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 785:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 782:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:833:6: 833:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap2::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:22: 836:23

    bb0: {
        _0 = const 2_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:22: 836:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:22: 836:23
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap2::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:22: 836:23

    bb0: {
        _0 = const 2_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:22: 836:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:22: 836:23
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap2(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:835:14: 835:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:835:23: 835:27
    let mut _3: i8;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        scope 2 {
            debug k => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        }
    }

    bb0: {
        _3 = const -52_i8;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
        _2 = core::arch::x86_64::_mm_set1_epi8(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:34
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
        _6 = core::arch::x86_64::_mm_and_si128(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = core::arch::x86_64::_mm_srli_epi16::<2_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:31
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<2_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
        _10 = core::arch::x86_64::_mm_slli_epi16::<2_i32>(move _11) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<2_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
        _9 = core::arch::x86_64::_mm_and_si128(move _10, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 782:42
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _4) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 785:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 782:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:837:6: 837:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap4::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:22: 840:23

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:22: 840:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:22: 840:23
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap4::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:22: 840:23

    bb0: {
        _0 = const 4_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:22: 840:23
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:22: 840:23
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap4(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:839:14: 839:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:839:23: 839:27
    let mut _3: i8;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
    let mut _9: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
    let mut _12: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        scope 2 {
            debug k => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:17: 781:18
        }
    }

    bb0: {
        _3 = const -16_i8;               // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:35: 781:42
        _2 = core::arch::x86_64::_mm_set1_epi8(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:781:21: 781:34
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _7 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:46: 783:50
        _8 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:52: 783:53
        _6 = core::arch::x86_64::_mm_and_si128(move _7, move _8) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:32: 783:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = core::arch::x86_64::_mm_srli_epi16::<4_i32>(move _6) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:783:17: 783:31
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = (_1.0: core::arch::x86_64::__m128i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:46: 784:50
        _10 = core::arch::x86_64::_mm_slli_epi16::<4_i32>(move _11) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:31: 784:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<4_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:57: 784:58
        _9 = core::arch::x86_64::_mm_and_si128(move _10, move _12) -> bb5; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:784:17: 784:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _4 = core::arch::x86_64::_mm_or_si128(move _5, move _9) -> bb6; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 785:14
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:30: 782:42
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _4) -> bb7; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 785:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:782:13: 782:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:841:6: 841:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap8::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:49: 845:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:49: 845:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:49: 845:50
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap8::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:76: 845:77

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:76: 845:77
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:76: 845:77
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap8(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:843:14: 843:18
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:843:23: 843:27
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:844:26: 846:10
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:26: 845:51
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:41: 845:47
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:53: 845:78
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:68: 845:74
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:41: 845:47
        _3 = core::arch::x86_64::_mm_slli_epi16::<8_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:26: 845:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:26: 845:40
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi16::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:68: 845:74
        _5 = core::arch::x86_64::_mm_srli_epi16::<8_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:53: 845:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:53: 845:67
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi16::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:13: 845:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:845:13: 845:25
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:844:9: 846:11
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:844:9: 844:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:847:6: 847:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap16(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:849:15: 849:19
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:849:24: 849:28
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:26: 850:43
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:36: 850:42

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:36: 850:42
        _2 = swap16_s2(move _3) -> bb1;  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:26: 850:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:26: 850:35
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {swap16_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:9: 850:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:850:9: 850:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:851:6: 851:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap32::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:61: 854:72

    bb0: {
        _0 = const 177_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:61: 854:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:61: 854:72
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap32(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:853:15: 853:19
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:853:24: 853:28
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:26: 854:75
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:53: 854:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:53: 854:59
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<177_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:35: 854:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:35: 854:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<177_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:9: 854:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:854:9: 854:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:855:6: 855:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap64::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:61: 858:72

    bb0: {
        _0 = const 78_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:61: 858:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:61: 858:72
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap64(_1: u128x1_sse2<NoS3, S4, NI>) -> u128x1_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:857:15: 857:19
    let mut _0: x86_64::sse2::u128x1_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:857:24: 857:28
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:26: 858:75
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:53: 858:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:53: 858:59
        _2 = core::arch::x86_64::_mm_shuffle_epi32::<78_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:35: 858:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:35: 858:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<78_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<NoS3, S4, NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:9: 858:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:858:9: 858:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<NoS3, S4, NI> {u128x1_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:859:6: 859:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:883:1: 888:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:883:31: 883:33

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:883:31: 883:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:883:31: 883:33
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:883:1: 888:2>::to_scalars(_1: x4<u32x4_sse2<S3, S4, NI>>) -> [u32; 16] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:885:19: 885:23
    let mut _0: [u32; 16];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:885:28: 885:37
    let mut _2: soft::x4<x86_64::sse2::u32x4_sse2<S3, S4, NI>>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:886:39: 886:43
    scope 1 {
    }

    bb0: {
        _2 = move _1;                    // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:886:39: 886:43
        _0 = transmute::<x4<u32x4_sse2<S3, S4, NI>>, [u32; 16]>(move _2) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:886:18: 886:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:886:18: 886:38
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(x4<u32x4_sse2<S3, S4, NI>>) -> [u32; 16] {transmute::<x4<u32x4_sse2<S3, S4, NI>>, [u32; 16]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:887:6: 887:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:883:1: 888:2>::to_scalars::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:885:34: 885:36

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:885:34: 885:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:885:34: 885:36
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:890:1: 897:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:894:85: 894:86

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:894:85: 894:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:894:85: 894:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:898:1: 905:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:902:85: 902:86

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:902:85: 902:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:902:85: 902:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:906:1: 912:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:910:45: 910:46

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:910:45: 910:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:910:45: 910:46
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:913:1: 923:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:917:85: 917:86

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:917:85: 917:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:917:85: 917:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:925:1: 932:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:929:85: 929:86

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:929:85: 929:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:929:85: 929:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:933:1: 940:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:937:85: 937:86

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:937:85: 937:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:937:85: 937:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:941:1: 947:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:945:51: 945:52

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:945:51: 945:52
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:945:51: 945:52
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:948:1: 958:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:952:85: 952:86

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:952:85: 952:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:952:85: 952:86
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:960:1: 985:2>::extract(_1: x2<u64x2_sse2<S3, S4, NI>, G1>, _2: u32) -> u64 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:965:16: 965:20
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:965:22: 965:23
    let mut _0: u64;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:965:33: 965:36
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:967:18: 967:27
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:967:25: 967:26
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:968:18: 968:27
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:968:25: 968:26
    let mut _7: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:969:18: 969:27
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:969:25: 969:26
    let mut _9: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:970:18: 970:27
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:970:25: 970:26

    bb0: {
        switchInt(_2) -> [0_u32: bb2, 1_u32: bb3, 2_u32: bb4, 3_u32: bb5, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:966:9: 966:16
    }

    bb1: {
        panic(const "explicit panic");   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _4 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:967:25: 967:26
        _3 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:967:18: 967:27
        _0 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract(move _3, const 0_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:967:18: 967:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:967:28: 967:35
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u32) -> u64 {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:968:25: 968:26
        _5 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:968:18: 968:27
        _0 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract(move _5, const 1_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:968:18: 968:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:968:28: 968:35
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u32) -> u64 {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:969:25: 969:26
        _7 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:969:18: 969:27
        _0 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract(move _7, const 0_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:969:18: 969:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:969:28: 969:35
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u32) -> u64 {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:970:25: 970:26
        _9 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:970:18: 970:27
        _0 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract(move _9, const 1_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:970:18: 970:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:970:28: 970:35
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u32) -> u64 {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:973:6: 973:6
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:960:1: 985:2>::insert(_1: x2<u64x2_sse2<S3, S4, NI>, G1>, _2: u64, _3: u32) -> x2<u64x2_sse2<S3, S4, NI>, G1> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:975:15: 975:23
    debug w => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:975:25: 975:26
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:975:33: 975:34
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<S3, S4, NI>, x86_64::sse2::G1>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:975:44: 975:48
    let mut _4: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:30: 977:52
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:30: 977:39
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:37: 977:38
    let mut _7: u64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:47: 977:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:25: 977:26
    let mut _9: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:30: 978:52
    let mut _10: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:30: 978:39
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:37: 978:38
    let mut _12: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:47: 978:48
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:25: 978:26
    let mut _14: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:30: 979:52
    let mut _15: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:30: 979:39
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:37: 979:38
    let mut _17: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:47: 979:48
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:25: 979:26
    let mut _19: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:30: 980:52
    let mut _20: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:30: 980:39
    let _21: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:37: 980:38
    let mut _22: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:47: 980:48
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:25: 980:26

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb4, 2_u32: bb6, 3_u32: bb8, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:976:9: 976:16
    }

    bb1: {
        panic(const "explicit panic");   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:37: 977:38
        _5 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:30: 977:39
        _7 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:47: 977:48
        _4 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert(move _5, move _7, const 0_u32) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:30: 977:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:40: 977:46
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64, u32) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:25: 977:26
        (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_8] = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:18: 977:52
        goto -> bb10;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:977:51: 977:52
    }

    bb4: {
        _11 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:37: 978:38
        _10 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:30: 978:39
        _12 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:47: 978:48
        _9 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert(move _10, move _12, const 1_u32) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:30: 978:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:40: 978:46
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64, u32) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _13 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:25: 978:26
        (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_13] = move _9; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:18: 978:52
        goto -> bb10;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:978:51: 978:52
    }

    bb6: {
        _16 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:37: 979:38
        _15 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_16]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:30: 979:39
        _17 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:47: 979:48
        _14 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert(move _15, move _17, const 0_u32) -> bb7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:30: 979:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:40: 979:46
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64, u32) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _18 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:25: 979:26
        (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_18] = move _14; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:18: 979:52
        goto -> bb10;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:979:51: 979:52
    }

    bb8: {
        _21 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:37: 980:38
        _20 = (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_21]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:30: 980:39
        _22 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:47: 980:48
        _19 = <u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert(move _20, move _22, const 1_u32) -> bb9; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:30: 980:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:40: 980:46
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64, u32) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::Vec2<u64>>::insert}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _23 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:25: 980:26
        (_1.0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_23] = move _19; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:18: 980:52
        goto -> bb10;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:980:51: 980:52
    }

    bb10: {
        _0 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:983:9: 983:13
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:984:6: 984:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:987:1: 996:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:991:85: 991:86

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:991:85: 991:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:991:85: 991:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:987:1: 996:2>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:994:44: 994:46

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:994:44: 994:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:994:44: 994:46
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:997:1: 1004:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1001:85: 1001:86

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1001:85: 1001:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1001:85: 1001:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1005:1: 1014:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1009:85: 1009:86

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1009:85: 1009:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1009:85: 1009:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1016:1: 1023:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1020:85: 1020:86

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1020:85: 1020:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1020:85: 1020:86
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1024:1: 1033:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1028:85: 1028:86

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1028:85: 1028:86
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1028:85: 1028:86
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1065:1: 1070:2>::eq(_1: &x2<W, G>, _2: &x2<W, G>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1067:11: 1067:16
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1067:18: 1067:21
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1067:33: 1067:37
    let mut _3: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:30
    let mut _4: &W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:18
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:16: 1068:17
    let mut _6: &W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:22: 1068:30
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:28: 1068:29
    let mut _8: bool;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:34: 1068:55
    let mut _9: &W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:34: 1068:43
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:41: 1068:42
    let mut _11: &W;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:47: 1068:55
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:53: 1068:54

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:16: 1068:17
        _4 = &((*_1).0: [W; 2])[_5];     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:18
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:28: 1068:29
        _6 = &((*_2).0: [W; 2])[_7];     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:22: 1068:30
        _3 = <W as PartialEq>::eq(move _4, move _6) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:30
                                         // + literal: Const { ty: for<'r, 's> fn(&'r W, &'s W) -> bool {<W as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = const false;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:55
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:55
    }

    bb2: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:41: 1068:42
        _9 = &((*_1).0: [W; 2])[_10];    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:34: 1068:43
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:53: 1068:54
        _11 = &((*_2).0: [W; 2])[_12];   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:47: 1068:55
        _8 = <W as PartialEq>::eq(move _9, move _11) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:34: 1068:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:34: 1068:55
                                         // + literal: Const { ty: for<'r, 's> fn(&'r W, &'s W) -> bool {<W as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1069:6: 1069:6
    }

    bb4: {
        switchInt(move _3) -> [false: bb1, otherwise: bb2]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:55
    }

    bb5: {
        _0 = move _8;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:55
        goto -> bb3;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1068:9: 1068:55
    }
}

eq128_s4::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:54: 1075:65

    bb0: {
        _0 = const 198_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:54: 1075:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:54: 1075:65
    }
}

fn eq128_s4(_1: core::arch::x86_64::__m128i, _2: core::arch::x86_64::__m128i) -> bool {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1074:20: 1074:21
    debug y => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1074:32: 1074:33
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1074:47: 1074:51
    let _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:9: 1075:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:31: 1075:52
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:47: 1075:48
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:50: 1075:51
    let mut _7: i64;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1076:5: 1076:25
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1076:23: 1076:24
    scope 1 {
        debug q => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:9: 1075:10
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:47: 1075:48
        _6 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:50: 1075:51
        _4 = core::arch::x86_64::_mm_cmpeq_epi64(move _5, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:31: 1075:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:31: 1075:46
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cmpeq_epi64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = core::arch::x86_64::_mm_shuffle_epi32::<198_i32>(move _4) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:13: 1075:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1075:13: 1075:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi32::<198_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _8 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1076:23: 1076:24
        _7 = core::arch::x86_64::_mm_cvtsi128_si64(move _8) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1076:5: 1076:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1076:5: 1076:22
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = Eq(move _7, const -1_i64);  // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1076:5: 1076:31
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1077:2: 1077:2
    }
}

eq128_s2::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:49: 1082:50

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:49: 1082:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:49: 1082:50
    }
}

fn eq128_s2(_1: core::arch::x86_64::__m128i, _2: core::arch::x86_64::__m128i) -> bool {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1080:20: 1080:21
    debug y => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1080:32: 1080:33
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1080:47: 1080:51
    let _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:9: 1081:10
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:29: 1081:30
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:32: 1081:33
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:31: 1082:51
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:46: 1082:47
    let mut _10: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1083:31: 1083:32
    let mut _11: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:5: 1084:12
    let mut _12: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:6: 1084:7
    let mut _13: i64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:10: 1084:11
    scope 1 {
        debug q => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:9: 1081:10
        let _6: i64;                     // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:9: 1082:10
        scope 2 {
            debug p => _6;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:9: 1082:10
            let _9: i64;                 // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1083:9: 1083:10
            scope 3 {
                debug q => _9;           // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1083:9: 1083:10
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:29: 1081:30
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:32: 1081:33
        _3 = core::arch::x86_64::_mm_cmpeq_epi32(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:13: 1081:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1081:13: 1081:28
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_cmpeq_epi32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:46: 1082:47
        _7 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _8) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:31: 1082:51
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:31: 1082:45
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _6 = core::arch::x86_64::_mm_cvtsi128_si64(move _7) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:13: 1082:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1082:13: 1082:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _10 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1083:31: 1083:32
        _9 = core::arch::x86_64::_mm_cvtsi128_si64(move _10) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1083:13: 1083:33
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1083:13: 1083:30
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> i64 {core::arch::x86_64::_mm_cvtsi128_si64}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _12 = _6;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:6: 1084:7
        _13 = _9;                        // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:10: 1084:11
        _11 = BitAnd(move _12, move _13); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:5: 1084:12
        _0 = Eq(move _11, const -1_i64); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1084:5: 1084:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1085:2: 1085:2
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1087:1: 1092:2>::eq(_1: &u32x4_sse2<S3, S4, NI>, _2: &u32x4_sse2<S3, S4, NI>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1089:11: 1089:16
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1089:18: 1089:21
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1089:33: 1089:37
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1090:27: 1090:33
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1090:35: 1090:40
    scope 1 {
    }

    bb0: {
        _3 = ((*_1).0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1090:27: 1090:33
        _4 = ((*_2).0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1090:35: 1090:40
        _0 = eq128_s2(move _3, move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1090:18: 1090:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1090:18: 1090:26
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> bool {eq128_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1091:6: 1091:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1093:1: 1101:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1095:34: 1095:35

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1095:34: 1095:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1095:34: 1095:35
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1093:1: 1101:2>::fmt(_1: &u32x4_sse2<S3, S4, NI>, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1098:12: 1098:17
    debug fmt => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1098:19: 1098:22
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1098:43: 1098:49
    let mut _3: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:9: 1099:65
    let mut _4: core::fmt::Arguments;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _5: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
    let mut _6: &[&str; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
    let _7: &[&str; 1];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
    let mut _8: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _9: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let _10: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let _11: [core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _12: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
    let mut _13: &&[u32; 4];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
    let _14: &&[u32; 4];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
    let _15: &[u32; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
    let _16: [u32; 4];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:48: 1099:63
    let mut _17: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:48: 1099:63
    let mut _18: &[core::fmt::rt::v1::Argument]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _19: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let _20: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _21: core::fmt::UnsafeArg;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _22: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _23: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
    scope 1 {
    }

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:9: 1099:65
        _23 = const <u32x4_sse2<S3, S4, NI> as Debug>::fmt::promoted[1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<u32x4_sse2<S3, S4, NI> as Debug>::fmt, [S3, S4, NI], Some(promoted[1])) }
        _7 = _23;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
        _17 = (*_1);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:48: 1099:63
        _16 = <u32x4_sse2<S3, S4, NI> as types::MultiLane<[u32; 4]>>::to_lanes(move _17) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:48: 1099:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:53: 1099:61
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>) -> [u32; 4] {<u32x4_sse2<S3, S4, NI> as types::MultiLane<[u32; 4]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _15 = &_16;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
        _14 = &_15;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
        _13 = _14;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
        _12 = ArgumentV1::new_debug::<&[u32; 4]>(move _13) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:47: 1099:63
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &[u32; 4]) -> ArgumentV1<'b> {ArgumentV1::new_debug::<&[u32; 4]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = [move _12];                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _10 = &_11;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _8 = move _9 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _22 = const <u32x4_sse2<S3, S4, NI> as Debug>::fmt::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
                                         // + literal: Const { ty: &[Argument; 1], val: Unevaluated(<u32x4_sse2<S3, S4, NI> as Debug>::fmt, [S3, S4, NI], Some(promoted[0])) }
        _20 = _22;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _19 = _20;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _18 = move _19 as &[core::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _21 = UnsafeArg::new() -> bb3;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
                                         // + literal: Const { ty: unsafe fn() -> UnsafeArg {UnsafeArg::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _4 = Arguments::new_v1_formatted(move _5, move _8, move _18, move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1], &[Argument], UnsafeArg) -> Arguments {Arguments::new_v1_formatted}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = Formatter::write_fmt(move _3, move _4) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:9: 1099:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:13: 1099:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1100:6: 1100:6
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1093:1: 1101:2>::fmt: &[Argument; 1] = {
    let mut _0: &[core::fmt::rt::v1::Argument; 1]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _1: [core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _2: core::fmt::rt::v1::Argument; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _3: core::fmt::rt::v1::FormatSpec; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _4: core::fmt::rt::v1::Alignment; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _5: core::fmt::rt::v1::Count; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    let mut _6: core::fmt::rt::v1::Count; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64

    bb0: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        discriminant(_4) = 3;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        discriminant(_5) = 2;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        ((_6 as Is).0: usize) = const 8_usize; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        discriminant(_6) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_3.0: char) = const ' ';        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_3.1: core::fmt::rt::v1::Alignment) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_3.2: u32) = const 24_u32;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_3.3: core::fmt::rt::v1::Count) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_3.4: core::fmt::rt::v1::Count) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_2.0: usize) = const 0_usize;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        (_2.1: core::fmt::rt::v1::FormatSpec) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _1 = [move _2];                  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:23: 1099:64
    }
}

promoted[1] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1093:1: 1101:2>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45

    bb0: {
        _1 = [const ""];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1099:36: 1099:45
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1103:1: 1108:2>::eq(_1: &u64x2_sse2<S3, S4, NI>, _2: &u64x2_sse2<S3, S4, NI>) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1105:11: 1105:16
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1105:18: 1105:21
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1105:33: 1105:37
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1106:27: 1106:33
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1106:35: 1106:40
    scope 1 {
    }

    bb0: {
        _3 = ((*_1).0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1106:27: 1106:33
        _4 = ((*_2).0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1106:35: 1106:40
        _0 = eq128_s2(move _3, move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1106:18: 1106:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1106:18: 1106:26
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> bool {eq128_s2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1107:6: 1107:6
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1109:1: 1117:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1111:34: 1111:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1111:34: 1111:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1111:34: 1111:35
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1109:1: 1117:2>::fmt(_1: &u64x2_sse2<S3, S4, NI>, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1114:12: 1114:17
    debug fmt => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1114:19: 1114:22
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1114:43: 1114:49
    let mut _3: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:9: 1115:66
    let mut _4: core::fmt::Arguments;    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _5: &[&str];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
    let mut _6: &[&str; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
    let _7: &[&str; 1];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
    let mut _8: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _9: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let _10: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let _11: [core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _12: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
    let mut _13: &&[u64; 2];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
    let _14: &&[u64; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
    let _15: &[u64; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
    let _16: [u64; 2];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:49: 1115:64
    let mut _17: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:49: 1115:64
    let mut _18: &[core::fmt::rt::v1::Argument]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _19: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let _20: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _21: core::fmt::UnsafeArg;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _22: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _23: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
    scope 1 {
    }

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:9: 1115:66
        _23 = const <u64x2_sse2<S3, S4, NI> as Debug>::fmt::promoted[1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<u64x2_sse2<S3, S4, NI> as Debug>::fmt, [S3, S4, NI], Some(promoted[1])) }
        _7 = _23;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
        _6 = _7;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
        _17 = (*_1);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:49: 1115:64
        _16 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes(move _17) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:49: 1115:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:54: 1115:62
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> [u64; 2] {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _15 = &_16;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
        _14 = &_15;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
        _13 = _14;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
        _12 = ArgumentV1::new_debug::<&[u64; 2]>(move _13) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:48: 1115:64
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &[u64; 2]) -> ArgumentV1<'b> {ArgumentV1::new_debug::<&[u64; 2]>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = [move _12];                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _10 = &_11;                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _9 = _10;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _8 = move _9 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _22 = const <u64x2_sse2<S3, S4, NI> as Debug>::fmt::promoted[0]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
                                         // + literal: Const { ty: &[Argument; 1], val: Unevaluated(<u64x2_sse2<S3, S4, NI> as Debug>::fmt, [S3, S4, NI], Some(promoted[0])) }
        _20 = _22;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _19 = _20;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _18 = move _19 as &[core::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _21 = UnsafeArg::new() -> bb3;   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
                                         // + literal: Const { ty: unsafe fn() -> UnsafeArg {UnsafeArg::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _4 = Arguments::new_v1_formatted(move _5, move _8, move _18, move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1], &[Argument], UnsafeArg) -> Arguments {Arguments::new_v1_formatted}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = Formatter::write_fmt(move _3, move _4) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:9: 1115:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:13: 1115:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1116:6: 1116:6
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1109:1: 1117:2>::fmt: &[Argument; 1] = {
    let mut _0: &[core::fmt::rt::v1::Argument; 1]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _1: [core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _2: core::fmt::rt::v1::Argument; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _3: core::fmt::rt::v1::FormatSpec; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _4: core::fmt::rt::v1::Alignment; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _5: core::fmt::rt::v1::Count; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    let mut _6: core::fmt::rt::v1::Count; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65

    bb0: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        discriminant(_4) = 3;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        discriminant(_5) = 2;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        ((_6 as Is).0: usize) = const 16_usize; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        discriminant(_6) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_3.0: char) = const ' ';        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_3.1: core::fmt::rt::v1::Alignment) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_3.2: u32) = const 24_u32;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_3.3: core::fmt::rt::v1::Count) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_3.4: core::fmt::rt::v1::Count) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_2.0: usize) = const 0_usize;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        (_2.1: core::fmt::rt::v1::FormatSpec) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _1 = [move _2];                  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:23: 1115:65
    }
}

promoted[1] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1109:1: 1117:2>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46

    bb0: {
        _1 = [const ""];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1115:36: 1115:46
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1119:1: 1128:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1121:52: 1121:53

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1121:52: 1121:53
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1121:52: 1121:53
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1119:1: 1128:2>::fmt(_1: &x2<u64x2_sse2<S3, S4, NI>, G1>, _2: &mut Formatter) -> Result<(), Error> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1124:12: 1124:17
    debug fmt => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1124:19: 1124:22
    let mut _0: core::result::Result<(), core::fmt::Error>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1124:43: 1124:49
    let _3: [u64; 2];                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:14: 1125:15
    let _4: [u64; 2];                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:17: 1125:18
    let mut _5: ([u64; 2], [u64; 2]);    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:22: 1125:66
    let mut _6: [u64; 2];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:23: 1125:43
    let mut _7: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:23: 1125:32
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:30: 1125:31
    let mut _9: [u64; 2];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:45: 1125:65
    let mut _10: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:45: 1125:54
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:52: 1125:53
    let mut _12: &mut core::fmt::Formatter; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:9: 1126:75
    let mut _13: core::fmt::Arguments;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _14: &[&str];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
    let mut _15: &[&str; 1];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
    let _16: &[&str; 1];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
    let mut _17: &[core::fmt::ArgumentV1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _18: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let _19: &[core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let _20: [core::fmt::ArgumentV1; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _21: core::fmt::ArgumentV1;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
    let mut _22: &&[u64; 4];             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
    let _23: &&[u64; 4];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
    let _24: &[u64; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
    let _25: [u64; 4];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:49: 1126:73
    let mut _26: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:50: 1126:54
    let _27: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:52: 1126:53
    let mut _28: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:56: 1126:60
    let _29: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:58: 1126:59
    let mut _30: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:62: 1126:66
    let _31: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:64: 1126:65
    let mut _32: u64;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:68: 1126:72
    let _33: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:70: 1126:71
    let mut _34: &[core::fmt::rt::v1::Argument]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _35: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let _36: &[core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _37: core::fmt::UnsafeArg;   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    scope 1 {
        debug a => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:14: 1125:15
        debug b => _4;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:17: 1125:18
        let mut _38: &[core::fmt::rt::v1::Argument; 1]; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        let mut _39: &[&str; 1];         // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
        scope 2 {
        }
    }

    bb0: {
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:30: 1125:31
        _7 = ((*_1).0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:23: 1125:32
        _6 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes(move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:23: 1125:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:33: 1125:41
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> [u64; 2] {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:52: 1125:53
        _10 = ((*_1).0: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2])[_11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:45: 1125:54
        _9 = <u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes(move _10) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:45: 1125:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:55: 1125:63
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> [u64; 2] {<u64x2_sse2<S3, S4, NI> as types::MultiLane<[u64; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:22: 1125:66
        (_5.0: [u64; 2]) = move _6;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:22: 1125:66
        (_5.1: [u64; 2]) = move _9;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:22: 1125:66
        _3 = (_5.0: [u64; 2]);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:14: 1125:15
        _4 = (_5.1: [u64; 2]);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1125:17: 1125:18
        _12 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:9: 1126:75
        _39 = const sse2::<impl Debug for x2<u64x2_sse2<S3, S4, NI>, G1>>::fmt::promoted[1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(sse2::<impl Debug for x2<u64x2_sse2<S3, S4, NI>, G1>>::fmt, [S3, S4, NI], Some(promoted[1])) }
        _16 = _39;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
        _15 = _16;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
        _27 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:52: 1126:53
        _26 = _3[_27];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:50: 1126:54
        _29 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:58: 1126:59
        _28 = _3[_29];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:56: 1126:60
        _31 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:64: 1126:65
        _30 = _4[_31];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:62: 1126:66
        _33 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:70: 1126:71
        _32 = _4[_33];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:68: 1126:72
        _25 = [move _26, move _28, move _30, move _32]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:49: 1126:73
        _24 = &_25;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
        _23 = &_24;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
        _22 = _23;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
        _21 = ArgumentV1::new_debug::<&[u64; 4]>(move _22) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:48: 1126:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &[u64; 4]) -> ArgumentV1<'b> {ArgumentV1::new_debug::<&[u64; 4]>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _20 = [move _21];                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _19 = &_20;                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _18 = _19;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _17 = move _18 as &[core::fmt::ArgumentV1] (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _38 = const sse2::<impl Debug for x2<u64x2_sse2<S3, S4, NI>, G1>>::fmt::promoted[0]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
                                         // + literal: Const { ty: &[Argument; 1], val: Unevaluated(sse2::<impl Debug for x2<u64x2_sse2<S3, S4, NI>, G1>>::fmt, [S3, S4, NI], Some(promoted[0])) }
        _36 = _38;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _35 = _36;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _34 = move _35 as &[core::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _37 = UnsafeArg::new() -> bb4;   // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
                                         // + literal: Const { ty: unsafe fn() -> UnsafeArg {UnsafeArg::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _13 = Arguments::new_v1_formatted(move _14, move _17, move _34, move _37) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1], &[Argument], UnsafeArg) -> Arguments {Arguments::new_v1_formatted}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = Formatter::write_fmt(move _12, move _13) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:9: 1126:75
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:13: 1126:22
                                         // + literal: Const { ty: for<'r, 's> fn(&'r mut Formatter, Arguments<'s>) -> Result<(), Error> {Formatter::write_fmt}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1127:6: 1127:6
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1119:1: 1128:2>::fmt: &[Argument; 1] = {
    let mut _0: &[core::fmt::rt::v1::Argument; 1]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _1: [core::fmt::rt::v1::Argument; 1]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _2: core::fmt::rt::v1::Argument; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _3: core::fmt::rt::v1::FormatSpec; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _4: core::fmt::rt::v1::Alignment; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _5: core::fmt::rt::v1::Count; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    let mut _6: core::fmt::rt::v1::Count; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74

    bb0: {
        Deinit(_4);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        discriminant(_4) = 3;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        Deinit(_5);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        discriminant(_5) = 2;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        ((_6 as Is).0: usize) = const 16_usize; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        discriminant(_6) = 0;            // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_3.0: char) = const ' ';        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_3.1: core::fmt::rt::v1::Alignment) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_3.2: u32) = const 24_u32;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_3.3: core::fmt::rt::v1::Count) = move _5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_3.4: core::fmt::rt::v1::Count) = move _6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        Deinit(_2);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_2.0: usize) = const 0_usize;   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        (_2.1: core::fmt::rt::v1::FormatSpec) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _1 = [move _2];                  // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:23: 1126:74
    }
}

promoted[1] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1119:1: 1128:2>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
    let mut _1: [&str; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46

    bb0: {
        _1 = [const ""];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1126:36: 1126:46
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1392:5: 1397:6>::new(_1: core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1394:16: 1394:17
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1394:31: 1394:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1395:20: 1395:21

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1395:20: 1395:21
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1395:13: 1395:40
        (_0.0: core::arch::x86_64::__m256i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1395:13: 1395:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1396:10: 1396:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1400:5: 1405:6>::unpack(_1: vec256_storage) -> u32x4x2_avx2<NI> {
    debug p => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1402:26: 1402:27
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1402:48: 1402:52
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1403:23: 1403:28

    bb0: {
        _2 = (_1.4: core::arch::x86_64::__m256i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1403:23: 1403:28
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1403:13: 1403:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1403:13: 1403:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1404:10: 1404:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1406:5: 1427:6>::unsafe_read_le(_1: &[u8]) -> u32x4x2_avx2<NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1408:34: 1408:39
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1408:51: 1408:55
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1409:24: 1409:35
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1409:24: 1409:35
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:23: 1410:69
    let mut _21: *const core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:68
    let mut _22: *const core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:68
    let mut _23: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:56
    let mut _24: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:56
    let mut _25: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1409:24: 1409:35
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1409:24: 1409:35
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _25 = const <u32x4x2_avx2<NI> as types::StoreBytes>::unsafe_read_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u32x4x2_avx2<NI> as types::StoreBytes>::unsafe_read_le, [NI], Some(promoted[0])) }
        _6 = _25;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:56
        _23 = slice::<impl [u8]>::as_ptr(move _24) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:48: 1410:54
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *const core::arch::x86_64::__m256i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:68
        _21 = _22;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:42: 1410:68
        _20 = core::arch::x86_64::_mm256_loadu_si256(move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:23: 1410:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:23: 1410:41
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_loadu_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u32x4x2_avx2::<NI>::new(move _20) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:13: 1410:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1410:13: 1410:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1411:10: 1411:10
    }
}

promoted[0] in avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1406:5: 1427:6>::unsafe_read_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1409:37: 1409:39

    bb0: {
        _1 = const 32_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1409:37: 1409:39
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1406:5: 1427:6>::unsafe_read_be(_1: &[u8]) -> u32x4x2_avx2<NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1413:34: 1413:39
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1413:51: 1413:55
    let mut _2: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:13: 1414:40
    let mut _3: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:34: 1414:39

    bb0: {
        _3 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:34: 1414:39
        _2 = <u32x4x2_avx2<NI> as types::StoreBytes>::unsafe_read_le(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:13: 1414:40
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:13: 1414:33
                                         // + literal: Const { ty: for<'r> unsafe fn(&'r [u8]) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::StoreBytes>::unsafe_read_le}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = <u32x4x2_avx2<NI> as types::BSwap>::bswap(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:13: 1414:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1414:41: 1414:46
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1415:10: 1415:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1406:5: 1427:6>::write_le(_1: u32x4x2_avx2<NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1417:21: 1417:25
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1417:27: 1417:30
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1417:43: 1417:43
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1419:28: 1419:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1419:28: 1419:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _21: *mut core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:63
    let mut _22: *mut core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:63
    let mut _23: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:53
    let mut _24: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:53
    let mut _25: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:65: 1420:71
    scope 1 {
        let _8: &usize;                  // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        let _9: &usize;                  // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let mut _26: &usize;             // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _6 = &(*_2);                     // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1419:28: 1419:37
        _5 = Len((*_6));                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1419:28: 1419:37
        _4 = &_5;                        // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u32x4x2_avx2<NI> as types::StoreBytes>::write_le::promoted[0]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u32x4x2_avx2<NI> as types::StoreBytes>::write_le, [NI], Some(promoted[0])) }
        _7 = _26;                        // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = &mut (*_2);                // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:53
        _23 = slice::<impl [u8]>::as_mut_ptr(move _24) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:53
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:41: 1420:51
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *mut core::arch::x86_64::__m256i (Misc); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:63
        _21 = _22;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:37: 1420:63
        _25 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:65: 1420:71
        _0 = core::arch::x86_64::_mm256_storeu_si256(move _21, move _25) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:17: 1420:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1420:17: 1420:36
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) {core::arch::x86_64::_mm256_storeu_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1422:10: 1422:10
    }
}

promoted[0] in avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1406:5: 1427:6>::write_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1419:39: 1419:41

    bb0: {
        _1 = const 32_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1419:39: 1419:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1406:5: 1427:6>::write_be(_1: u32x4x2_avx2<NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1424:21: 1424:25
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1424:27: 1424:30
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1424:43: 1424:43
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:13: 1425:25
    let mut _4: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:13: 1425:17
    let mut _5: &mut [u8];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:35: 1425:38

    bb0: {
        _4 = move _1;                    // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:13: 1425:17
        _3 = <u32x4x2_avx2<NI> as types::BSwap>::bswap(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:13: 1425:25
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:18: 1425:23
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = &mut (*_2);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:35: 1425:38
        _0 = <u32x4x2_avx2<NI> as types::StoreBytes>::write_le(move _3, move _5) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:13: 1425:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1425:26: 1425:34
                                         // + literal: Const { ty: for<'r> fn(u32x4x2_avx2<NI>, &'r mut [u8]) {<u32x4x2_avx2<NI> as types::StoreBytes>::write_le}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1426:10: 1426:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:55: 1428:56

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:55: 1428:56
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:55: 1428:56
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::to_lanes::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:70: 1433:71

    bb0: {
        _0 = const 0_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:70: 1433:71
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:70: 1433:71
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::to_lanes::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:70: 1434:71

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:70: 1434:71
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:70: 1434:71
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::to_lanes(_1: u32x4x2_avx2<NI>) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1430:21: 1430:25
    let mut _0: [x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1430:30: 1430:63
    let mut _2: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:21: 1433:73
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:37: 1433:72
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:62: 1433:68
    let mut _5: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:21: 1434:73
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:37: 1434:72
    let mut _7: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:62: 1434:68
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:62: 1433:68
        _3 = core::arch::x86_64::_mm256_extracti128_si256::<0_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:37: 1433:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:37: 1433:61
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm256_extracti128_si256::<0_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = u32x4_sse2::<YesS3, YesS4, NI>::new(move _3) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:21: 1433:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1433:21: 1433:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, YesS4, NI> {u32x4_sse2::<YesS3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _7 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:62: 1434:68
        _6 = core::arch::x86_64::_mm256_extracti128_si256::<1_i32>(move _7) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:37: 1434:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:37: 1434:61
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm256_extracti128_si256::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _5 = u32x4_sse2::<YesS3, YesS4, NI>::new(move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:21: 1434:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1434:21: 1434:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, YesS4, NI> {u32x4_sse2::<YesS3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = [move _2, move _5];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1432:17: 1435:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1437:10: 1437:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1430:61: 1430:62

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1430:61: 1430:62
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1430:61: 1430:62
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::from_lanes(_1: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> u32x4x2_avx2<NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1439:23: 1439:24
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1439:64: 1439:68
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:23: 1440:67
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:50: 1440:56
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:52: 1440:53
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:58: 1440:64
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:60: 1440:61
    scope 1 {
    }

    bb0: {
        _4 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:52: 1440:53
        _3 = (_1[_4].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:50: 1440:56
        _6 = const 1_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:60: 1440:61
        _5 = (_1[_6].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:58: 1440:64
        _2 = core::arch::x86_64::_mm256_setr_m128i(move _3, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:32: 1440:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:32: 1440:49
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_setr_m128i}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:13: 1440:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1440:13: 1440:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1441:10: 1441:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1428:5: 1442:6>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1439:57: 1439:58

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1439:57: 1439:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1439:57: 1439:58
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1443:5: 1464:6>::extract::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:75: 1448:76

    bb0: {
        _0 = const 0_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:75: 1448:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:75: 1448:76
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1443:5: 1464:6>::extract::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:75: 1449:76

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:75: 1449:76
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:75: 1449:76
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1443:5: 1464:6>::extract(_1: u32x4x2_avx2<NI>, _2: u32) -> u32x4_sse2<YesS3, YesS4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1445:20: 1445:24
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1445:26: 1445:27
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1445:37: 1445:65
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:42: 1448:77
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:67: 1448:73
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:42: 1449:77
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:67: 1449:73
    scope 1 {
    }

    bb0: {
        switchInt(_2) -> [0_u32: bb2, 1_u32: bb4, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1447:17: 1447:24
    }

    bb1: {
        panic(const "explicit panic");   // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:67: 1448:73
        _3 = core::arch::x86_64::_mm256_extracti128_si256::<0_i32>(move _4) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:42: 1448:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:42: 1448:66
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm256_extracti128_si256::<0_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<YesS3, YesS4, NI>::new(move _3) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:26: 1448:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1448:26: 1448:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, YesS4, NI> {u32x4_sse2::<YesS3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _6 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:67: 1449:73
        _5 = core::arch::x86_64::_mm256_extracti128_si256::<1_i32>(move _6) -> bb5; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:42: 1449:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:42: 1449:66
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm256_extracti128_si256::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = u32x4_sse2::<YesS3, YesS4, NI>::new(move _5) -> bb6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:26: 1449:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1449:26: 1449:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, YesS4, NI> {u32x4_sse2::<YesS3, YesS4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1453:10: 1453:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1443:5: 1464:6>::insert::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:63: 1458:64

    bb0: {
        _0 = const 0_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:63: 1458:64
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:63: 1458:64
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1443:5: 1464:6>::insert::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:63: 1459:64

    bb0: {
        _0 = const 1_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:63: 1459:64
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:63: 1459:64
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1443:5: 1464:6>::insert(_1: u32x4x2_avx2<NI>, _2: u32x4_sse2<YesS3, YesS4, NI>, _3: u32) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1455:19: 1455:23
    debug w => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1455:25: 1455:26
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1455:58: 1455:59
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1455:69: 1455:73
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1456:23: 1462:14
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:50: 1458:56
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:58: 1458:61
    let mut _7: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:50: 1459:56
    let mut _8: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:58: 1459:61
    scope 1 {
    }

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb3, otherwise: bb1]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1457:17: 1457:24
    }

    bb1: {
        panic(const "explicit panic");   // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _5 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:50: 1458:56
        _6 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:58: 1458:61
        _4 = core::arch::x86_64::_mm256_inserti128_si256::<0_i32>(move _5, move _6) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:26: 1458:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1458:26: 1458:49
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_inserti128_si256::<0_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _7 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:50: 1459:56
        _8 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:58: 1459:61
        _4 = core::arch::x86_64::_mm256_inserti128_si256::<1_i32>(move _7, move _8) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:26: 1459:65
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1459:26: 1459:49
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_inserti128_si256::<1_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u32x4x2_avx2::<NI>::new(move _4) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1456:13: 1462:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1456:13: 1456:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1463:10: 1463:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1513:5: 1518:6>::from(_1: u32x4x2_avx2<NI>) -> vec256_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1515:17: 1515:18
    let mut _0: x86_64::vec256_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1515:41: 1515:45
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1516:25: 1516:28

    bb0: {
        _2 = (_1.0: core::arch::x86_64::__m256i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1516:25: 1516:28
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1516:13: 1516:30
        (_0.4: core::arch::x86_64::__m256i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1516:13: 1516:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1517:10: 1517:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1555:5: 1564:6>::not(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1558:16: 1558:20
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1558:25: 1558:37
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:17: 1561:29
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:27: 1561:28
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:32: 1561:36
    scope 1 {
        let _2: core::arch::x86_64::__m256i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1560:21: 1560:22
        scope 2 {
            debug f => _2;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1560:21: 1560:22
        }
    }

    bb0: {
        _2 = core::arch::x86_64::_mm256_set1_epi8(const -127_i8) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1560:25: 1560:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1560:25: 1560:41
                                         // + literal: Const { ty: unsafe fn(i8) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_set1_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:27: 1561:28
        _3 = u32x4x2_avx2::<NI>::new(move _4) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:17: 1561:29
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:17: 1561:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = move _1;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:32: 1561:36
        _0 = <u32x4x2_avx2<NI> as core::ops::BitXor>::bitxor(move _3, move _5) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:17: 1561:36
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1561:17: 1561:36
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4x2_avx2<NI>) -> <u32x4x2_avx2<NI> as core::ops::BitXor>::Output {<u32x4x2_avx2<NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1563:10: 1563:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1570:5: 1578:6>::from(_1: x2<u128x1_sse2<YesS3, YesS4, NI>, G0>) -> u32x4x2_avx2<NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1575:17: 1575:18
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1575:62: 1575:66
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:23: 1576:71
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:50: 1576:58
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:54: 1576:55
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:60: 1576:68
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:64: 1576:65
    scope 1 {
    }

    bb0: {
        _4 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:54: 1576:55
        _3 = ((_1.0: [x86_64::sse2::u128x1_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2])[_4].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:50: 1576:58
        _6 = const 1_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:64: 1576:65
        _5 = ((_1.0: [x86_64::sse2::u128x1_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2])[_6].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:60: 1576:68
        _2 = core::arch::x86_64::_mm256_setr_m128i(move _3, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:32: 1576:69
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:32: 1576:49
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_setr_m128i}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:13: 1576:72
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1576:13: 1576:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1577:10: 1577:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1580:5: 1593:6>::shuffle_lane_words1230::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:61: 1583:72

    bb0: {
        _0 = const 147_i32;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:61: 1583:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:61: 1583:72
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1580:5: 1593:6>::shuffle_lane_words1230(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1582:35: 1582:39
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1582:44: 1582:48
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:23: 1583:75
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:53: 1583:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:53: 1583:59
        _2 = core::arch::x86_64::_mm256_shuffle_epi32::<147_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:32: 1583:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:32: 1583:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi32::<147_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:13: 1583:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1583:13: 1583:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1584:10: 1584:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1580:5: 1593:6>::shuffle_lane_words2301::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:61: 1587:72

    bb0: {
        _0 = const 78_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:61: 1587:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:61: 1587:72
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1580:5: 1593:6>::shuffle_lane_words2301(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1586:35: 1586:39
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1586:44: 1586:48
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:23: 1587:75
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:53: 1587:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:53: 1587:59
        _2 = core::arch::x86_64::_mm256_shuffle_epi32::<78_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:32: 1587:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:32: 1587:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi32::<78_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:13: 1587:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1587:13: 1587:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1588:10: 1588:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1580:5: 1593:6>::shuffle_lane_words3012::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:61: 1591:72

    bb0: {
        _0 = const 57_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:61: 1591:72
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:61: 1591:72
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1580:5: 1593:6>::shuffle_lane_words3012(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1590:35: 1590:39
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1590:44: 1590:48
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:23: 1591:75
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:53: 1591:59
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:53: 1591:59
        _2 = core::arch::x86_64::_mm256_shuffle_epi32::<57_i32>(move _3) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:32: 1591:73
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:32: 1591:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi32::<57_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:13: 1591:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1591:13: 1591:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1592:10: 1592:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1600:5: 1608:6>::unpack(_1: vec512_storage) -> x2<u32x4x2_avx2<NI>, G0> {
    debug p => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1602:26: 1602:27
    let mut _0: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1602:48: 1602:52
    let mut _2: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1603:23: 1606:14
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:17: 1604:47
    let mut _4: x86_64::vec256_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:38: 1604:46
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:44: 1604:45
    let mut _6: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:17: 1605:47
    let mut _7: x86_64::vec256_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:38: 1605:46
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:44: 1605:45

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:44: 1604:45
        _4 = (_1.4: [x86_64::vec256_storage; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:38: 1604:46
        _3 = <u32x4x2_avx2<NI> as types::Store<vec256_storage>>::unpack(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:17: 1604:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1604:17: 1604:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(vec256_storage) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::Store<vec256_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:44: 1605:45
        _7 = (_1.4: [x86_64::vec256_storage; 2])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:38: 1605:46
        _6 = <u32x4x2_avx2<NI> as types::Store<vec256_storage>>::unpack(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:17: 1605:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1605:17: 1605:37
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(vec256_storage) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::Store<vec256_storage>>::unpack}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1603:23: 1606:14
        _0 = x2::<u32x4x2_avx2<NI>, G0>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1603:13: 1606:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1603:13: 1603:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1607:10: 1607:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:5: 1622:6>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:61: 1609:62

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:61: 1609:62
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:61: 1609:62
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:5: 1622:6>::to_lanes(_1: x2<u32x4x2_avx2<NI>, G0>) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1611:21: 1611:25
    let mut _0: [x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 4]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1611:30: 1611:63
    let _2: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:18: 1612:19
    let _3: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:21: 1612:22
    let mut _4: [x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:26: 1612:46
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:26: 1612:35
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:33: 1612:34
    let mut _9: [x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:26: 1613:46
    let mut _10: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:26: 1613:35
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:33: 1613:34
    let mut _12: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:14: 1614:15
    let mut _13: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:17: 1614:18
    let mut _14: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:20: 1614:21
    let mut _15: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:23: 1614:24
    scope 1 {
        debug a => _2;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:18: 1612:19
        debug b => _3;                   // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:21: 1612:22
        let _7: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:18: 1613:19
        let _8: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:21: 1613:22
        scope 2 {
            debug c => _7;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:18: 1613:19
            debug d => _8;               // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:21: 1613:22
        }
    }

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:33: 1612:34
        _5 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:26: 1612:35
        _4 = <u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::to_lanes(move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:26: 1612:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:36: 1612:44
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {<u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = _4[0 of 2];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:18: 1612:19
        _3 = _4[1 of 2];                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1612:21: 1612:22
        _11 = const 1_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:33: 1613:34
        _10 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_11]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:26: 1613:35
        _9 = <u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::to_lanes(move _10) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:26: 1613:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:36: 1613:44
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {<u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::to_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _7 = _9[0 of 2];                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:18: 1613:19
        _8 = _9[1 of 2];                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1613:21: 1613:22
        _12 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:14: 1614:15
        _13 = _3;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:17: 1614:18
        _14 = _7;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:20: 1614:21
        _15 = _8;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:23: 1614:24
        _0 = [move _12, move _13, move _14, move _15]; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1614:13: 1614:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1615:10: 1615:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:5: 1622:6>::to_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1611:61: 1611:62

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1611:61: 1611:62
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1611:61: 1611:62
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:5: 1622:6>::from_lanes(_1: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> x2<u32x4x2_avx2<NI>, G0> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1617:23: 1617:24
    let mut _0: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1617:64: 1617:68
    let _2: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:17: 1618:19
    let mut _3: [x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:47: 1618:59
    let mut _4: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:48: 1618:52
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:50: 1618:51
    let mut _6: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:54: 1618:58
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:56: 1618:57
    let mut _9: [x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:47: 1619:59
    let mut _10: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:48: 1619:52
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:50: 1619:51
    let mut _12: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:54: 1619:58
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:56: 1619:57
    let mut _14: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:23: 1620:31
    let mut _15: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:24: 1620:26
    let mut _16: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:28: 1620:30
    scope 1 {
        debug ab => _2;                  // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:17: 1618:19
        let _8: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:17: 1619:19
        scope 2 {
            debug cd => _8;              // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:17: 1619:19
        }
    }

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:50: 1618:51
        _4 = _1[_5];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:48: 1618:52
        _7 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:56: 1618:57
        _6 = _1[_7];                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:54: 1618:58
        _3 = [move _4, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:47: 1618:59
        _2 = <u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::from_lanes(move _3) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:22: 1618:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1618:22: 1618:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32x4_sse2<YesS3, YesS4, NI>; 2]) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::from_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 2_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:50: 1619:51
        _10 = _1[_11];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:48: 1619:52
        _13 = const 3_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:56: 1619:57
        _12 = _1[_13];                   // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:54: 1619:58
        _9 = [move _10, move _12];       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:47: 1619:59
        _8 = <u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::from_lanes(move _9) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:22: 1619:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1619:22: 1619:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([u32x4_sse2<YesS3, YesS4, NI>; 2]) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::MultiLane<[u32x4_sse2<YesS3, YesS4, NI>; 2]>>::from_lanes}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = _2;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:24: 1620:26
        _16 = _8;                        // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:28: 1620:30
        _14 = [move _15, move _16];      // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:23: 1620:31
        _0 = x2::<u32x4x2_avx2<NI>, G0>::new(move _14) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:13: 1620:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1620:13: 1620:22
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1621:10: 1621:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1609:5: 1622:6>::from_lanes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1617:57: 1617:58

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1617:57: 1617:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1617:57: 1617:58
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1623:5: 1642:6>::extract(_1: x2<u32x4x2_avx2<NI>, G0>, _2: u32) -> u32x4_sse2<YesS3, YesS4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1625:20: 1625:24
    debug i => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1625:26: 1625:27
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1625:37: 1625:65
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1627:22: 1627:31
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1627:29: 1627:30
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1628:22: 1628:31
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1628:29: 1628:30
    let mut _7: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1629:22: 1629:31
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1629:29: 1629:30
    let mut _9: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1630:22: 1630:31
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1630:29: 1630:30

    bb0: {
        switchInt(_2) -> [0_u32: bb2, 1_u32: bb3, 2_u32: bb4, 3_u32: bb5, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1626:13: 1626:20
    }

    bb1: {
        panic(const "explicit panic");   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _4 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1627:29: 1627:30
        _3 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1627:22: 1627:31
        _0 = <u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract(move _3, const 0_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1627:22: 1627:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1627:32: 1627:39
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32) -> u32x4_sse2<YesS3, YesS4, NI> {<u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1628:29: 1628:30
        _5 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1628:22: 1628:31
        _0 = <u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract(move _5, const 1_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1628:22: 1628:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1628:32: 1628:39
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32) -> u32x4_sse2<YesS3, YesS4, NI> {<u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1629:29: 1629:30
        _7 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1629:22: 1629:31
        _0 = <u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract(move _7, const 0_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1629:22: 1629:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1629:32: 1629:39
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32) -> u32x4_sse2<YesS3, YesS4, NI> {<u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1630:29: 1630:30
        _9 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1630:22: 1630:31
        _0 = <u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract(move _9, const 1_u32) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1630:22: 1630:42
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1630:32: 1630:39
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32) -> u32x4_sse2<YesS3, YesS4, NI> {<u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::extract}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1633:10: 1633:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1623:5: 1642:6>::insert(_1: x2<u32x4x2_avx2<NI>, G0>, _2: u32x4_sse2<YesS3, YesS4, NI>, _3: u32) -> x2<u32x4x2_avx2<NI>, G0> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1635:19: 1635:23
    debug w => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1635:25: 1635:26
    debug i => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1635:58: 1635:59
    let mut _0: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1635:69: 1635:73
    let mut _4: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1636:23: 1640:14
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:27: 1637:49
    let mut _6: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:27: 1637:36
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:34: 1637:35
    let mut _8: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:44: 1637:45
    let mut _9: u32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:47: 1637:48
    let mut _10: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:51: 1637:60
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:58: 1637:59
    let mut _12: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:27: 1638:36
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:34: 1638:35
    let mut _14: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:38: 1638:64
    let mut _15: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:38: 1638:47
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:45: 1638:46
    let mut _17: x86_64::sse2::u32x4_sse2<x86_64::YesS3, x86_64::YesS4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:55: 1638:56
    let mut _18: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:63
    let mut _19: u32;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:59
    let mut _20: (u32, bool);            // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:63

    bb0: {
        switchInt(_3) -> [0_u32: bb2, 1_u32: bb2, 2_u32: bb4, 3_u32: bb4, otherwise: bb1]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1636:23: 1636:30
    }

    bb1: {
        panic(const "explicit panic");   // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(Scalar(<ZST>)) }
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:34: 1637:35
        _6 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:27: 1637:36
        _8 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:44: 1637:45
        _9 = _3;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:47: 1637:48
        _5 = <u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::insert(move _6, move _8, move _9) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:27: 1637:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:37: 1637:43
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4_sse2<YesS3, YesS4, NI>, u32) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::insert}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:58: 1637:59
        _10 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:51: 1637:60
        _4 = [move _5, move _10];        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:26: 1637:61
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1637:60: 1637:61
    }

    bb4: {
        _13 = const 0_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:34: 1638:35
        _12 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_13]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:27: 1638:36
        _16 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:45: 1638:46
        _15 = (_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_16]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:38: 1638:47
        _17 = _2;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:55: 1638:56
        _19 = _3;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:59
        _20 = CheckedSub(_19, const 2_u32); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:63
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const 2_u32) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:63
    }

    bb5: {
        _18 = move (_20.0: u32);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:58: 1638:63
        _14 = <u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::insert(move _15, move _17, move _18) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:38: 1638:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:48: 1638:54
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4_sse2<YesS3, YesS4, NI>, u32) -> u32x4x2_avx2<NI> {<u32x4x2_avx2<NI> as types::Vec2<u32x4_sse2<YesS3, YesS4, NI>>>::insert}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _4 = [move _12, move _14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:26: 1638:65
        goto -> bb7;                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1638:64: 1638:65
    }

    bb7: {
        _0 = x2::<u32x4x2_avx2<NI>, G0>::new(move _4) -> bb8; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1636:13: 1640:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1636:13: 1636:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1641:10: 1641:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:92: 1658:96

    bb0: {
        _0 = const 32_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:92: 1658:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:92: 1658:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:92: 1659:96

    bb0: {
        _0 = const 49_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:92: 1659:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:92: 1659:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#2}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:92: 1660:96

    bb0: {
        _0 = const 32_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:92: 1660:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:92: 1660:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#3}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:92: 1661:96

    bb0: {
        _0 = const 49_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:92: 1661:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:92: 1661:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#4}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:92: 1662:96

    bb0: {
        _0 = const 32_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:92: 1662:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:92: 1662:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#5}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:92: 1663:96

    bb0: {
        _0 = const 49_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:92: 1663:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:92: 1663:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#6}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:92: 1664:96

    bb0: {
        _0 = const 32_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:92: 1664:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:92: 1664:96
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4::{constant#7}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:92: 1665:96

    bb0: {
        _0 = const 49_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:92: 1665:96
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:92: 1665:96
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1643:5: 1674:6>::transpose4(_1: x2<u32x4x2_avx2<NI>, G0>, _2: x2<u32x4x2_avx2<NI>, G0>, _3: x2<u32x4x2_avx2<NI>, G0>, _4: x2<u32x4x2_avx2<NI>, G0>) -> (x2<u32x4x2_avx2<NI>, G0>, x2<u32x4x2_avx2<NI>, G0>, x2<u32x4x2_avx2<NI>, G0>, x2<u32x4x2_avx2<NI>, G0>) {
    debug a => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1645:23: 1645:24
    debug b => _2;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1645:32: 1645:33
    debug c => _3;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1645:41: 1645:42
    debug d => _4;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1645:50: 1645:51
    let mut _0: (soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>, soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>, soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>, soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>); // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1645:62: 1645:86
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:46: 1658:97
    let mut _7: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:72: 1658:80
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:76: 1658:77
    let mut _9: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:82: 1658:90
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:86: 1658:87
    let mut _12: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:46: 1659:97
    let mut _13: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:72: 1659:80
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:76: 1659:77
    let mut _15: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:82: 1659:90
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:86: 1659:87
    let mut _18: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:46: 1660:97
    let mut _19: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:72: 1660:80
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:76: 1660:77
    let mut _21: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:82: 1660:90
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:86: 1660:87
    let mut _24: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:46: 1661:97
    let mut _25: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:72: 1661:80
    let _26: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:76: 1661:77
    let mut _27: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:82: 1661:90
    let _28: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:86: 1661:87
    let mut _30: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:46: 1662:97
    let mut _31: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:72: 1662:80
    let _32: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:76: 1662:77
    let mut _33: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:82: 1662:90
    let _34: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:86: 1662:87
    let mut _36: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:46: 1663:97
    let mut _37: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:72: 1663:80
    let _38: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:76: 1663:77
    let mut _39: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:82: 1663:90
    let _40: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:86: 1663:87
    let mut _42: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:46: 1664:97
    let mut _43: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:72: 1664:80
    let _44: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:76: 1664:77
    let mut _45: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:82: 1664:90
    let _46: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:86: 1664:87
    let mut _48: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:46: 1665:97
    let mut _49: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:72: 1665:80
    let _50: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:76: 1665:77
    let mut _51: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:82: 1665:90
    let _52: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:86: 1665:87
    let mut _53: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:21: 1667:44
    let mut _54: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:31: 1667:43
    let mut _55: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:32: 1667:36
    let mut _56: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:38: 1667:42
    let mut _57: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:21: 1668:44
    let mut _58: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:31: 1668:43
    let mut _59: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:32: 1668:36
    let mut _60: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:38: 1668:42
    let mut _61: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:21: 1669:44
    let mut _62: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:31: 1669:43
    let mut _63: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:32: 1669:36
    let mut _64: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:38: 1669:42
    let mut _65: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:21: 1670:44
    let mut _66: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:31: 1670:43
    let mut _67: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:32: 1670:36
    let mut _68: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:38: 1670:42
    scope 1 {
        let _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:21: 1658:25
        scope 2 {
            debug ab00 => _5;            // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:21: 1658:25
            let _11: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:21: 1659:25
            scope 3 {
                debug ab01 => _11;       // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:21: 1659:25
                let _17: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:21: 1660:25
                scope 4 {
                    debug ab10 => _17;   // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:21: 1660:25
                    let _23: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:21: 1661:25
                    scope 5 {
                        debug ab11 => _23; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:21: 1661:25
                        let _29: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:21: 1662:25
                        scope 6 {
                            debug cd00 => _29; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:21: 1662:25
                            let _35: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:21: 1663:25
                            scope 7 {
                                debug cd01 => _35; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:21: 1663:25
                                let _41: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:21: 1664:25
                                scope 8 {
                                    debug cd10 => _41; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:21: 1664:25
                                    let _47: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:21: 1665:25
                                    scope 9 {
                                        debug cd11 => _47; // in scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:21: 1665:25
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _8 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:76: 1658:77
        _7 = ((_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_8].0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:72: 1658:80
        _10 = const 0_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:86: 1658:87
        _9 = ((_2.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_10].0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:82: 1658:90
        _6 = core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>(move _7, move _9) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:46: 1658:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:46: 1658:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = u32x4x2_avx2::<NI>::new(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:28: 1658:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1658:28: 1658:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = const 0_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:76: 1659:77
        _13 = ((_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_14].0: core::arch::x86_64::__m256i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:72: 1659:80
        _16 = const 0_usize;             // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:86: 1659:87
        _15 = ((_2.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_16].0: core::arch::x86_64::__m256i); // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:82: 1659:90
        _12 = core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>(move _13, move _15) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:46: 1659:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:46: 1659:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _11 = u32x4x2_avx2::<NI>::new(move _12) -> bb4; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:28: 1659:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1659:28: 1659:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _20 = const 1_usize;             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:76: 1660:77
        _19 = ((_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_20].0: core::arch::x86_64::__m256i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:72: 1660:80
        _22 = const 1_usize;             // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:86: 1660:87
        _21 = ((_2.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_22].0: core::arch::x86_64::__m256i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:82: 1660:90
        _18 = core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>(move _19, move _21) -> bb5; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:46: 1660:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:46: 1660:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _17 = u32x4x2_avx2::<NI>::new(move _18) -> bb6; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:28: 1660:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1660:28: 1660:45
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _26 = const 1_usize;             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:76: 1661:77
        _25 = ((_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_26].0: core::arch::x86_64::__m256i); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:72: 1661:80
        _28 = const 1_usize;             // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:86: 1661:87
        _27 = ((_2.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_28].0: core::arch::x86_64::__m256i); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:82: 1661:90
        _24 = core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>(move _25, move _27) -> bb7; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:46: 1661:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:46: 1661:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _23 = u32x4x2_avx2::<NI>::new(move _24) -> bb8; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:28: 1661:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1661:28: 1661:45
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _32 = const 0_usize;             // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:76: 1662:77
        _31 = ((_3.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_32].0: core::arch::x86_64::__m256i); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:72: 1662:80
        _34 = const 0_usize;             // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:86: 1662:87
        _33 = ((_4.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_34].0: core::arch::x86_64::__m256i); // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:82: 1662:90
        _30 = core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>(move _31, move _33) -> bb9; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:46: 1662:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:46: 1662:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _29 = u32x4x2_avx2::<NI>::new(move _30) -> bb10; // scope 5 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:28: 1662:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1662:28: 1662:45
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _38 = const 0_usize;             // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:76: 1663:77
        _37 = ((_3.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_38].0: core::arch::x86_64::__m256i); // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:72: 1663:80
        _40 = const 0_usize;             // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:86: 1663:87
        _39 = ((_4.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_40].0: core::arch::x86_64::__m256i); // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:82: 1663:90
        _36 = core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>(move _37, move _39) -> bb11; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:46: 1663:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:46: 1663:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _35 = u32x4x2_avx2::<NI>::new(move _36) -> bb12; // scope 6 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:28: 1663:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1663:28: 1663:45
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _44 = const 1_usize;             // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:76: 1664:77
        _43 = ((_3.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_44].0: core::arch::x86_64::__m256i); // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:72: 1664:80
        _46 = const 1_usize;             // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:86: 1664:87
        _45 = ((_4.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_46].0: core::arch::x86_64::__m256i); // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:82: 1664:90
        _42 = core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>(move _43, move _45) -> bb13; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:46: 1664:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:46: 1664:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<32_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _41 = u32x4x2_avx2::<NI>::new(move _42) -> bb14; // scope 7 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:28: 1664:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1664:28: 1664:45
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _50 = const 1_usize;             // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:76: 1665:77
        _49 = ((_3.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_50].0: core::arch::x86_64::__m256i); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:72: 1665:80
        _52 = const 1_usize;             // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:86: 1665:87
        _51 = ((_4.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_52].0: core::arch::x86_64::__m256i); // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:82: 1665:90
        _48 = core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>(move _49, move _51) -> bb15; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:46: 1665:97
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:46: 1665:71
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_permute2x128_si256::<49_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _47 = u32x4x2_avx2::<NI>::new(move _48) -> bb16; // scope 8 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:28: 1665:98
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1665:28: 1665:45
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _55 = _5;                        // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:32: 1667:36
        _56 = _29;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:38: 1667:42
        _54 = [move _55, move _56];      // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:31: 1667:43
        _53 = x2::<u32x4x2_avx2<NI>, G0>::new(move _54) -> bb17; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:21: 1667:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1667:21: 1667:30
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        _59 = _11;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:32: 1668:36
        _60 = _35;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:38: 1668:42
        _58 = [move _59, move _60];      // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:31: 1668:43
        _57 = x2::<u32x4x2_avx2<NI>, G0>::new(move _58) -> bb18; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:21: 1668:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1668:21: 1668:30
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb18: {
        _63 = _17;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:32: 1669:36
        _64 = _41;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:38: 1669:42
        _62 = [move _63, move _64];      // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:31: 1669:43
        _61 = x2::<u32x4x2_avx2<NI>, G0>::new(move _62) -> bb19; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:21: 1669:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1669:21: 1669:30
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb19: {
        _67 = _23;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:32: 1670:36
        _68 = _47;                       // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:38: 1670:42
        _66 = [move _67, move _68];      // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:31: 1670:43
        _65 = x2::<u32x4x2_avx2<NI>, G0>::new(move _66) -> bb20; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:21: 1670:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1670:21: 1670:30
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb20: {
        Deinit(_0);                      // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1666:17: 1671:18
        (_0.0: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>) = move _53; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1666:17: 1671:18
        (_0.1: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>) = move _57; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1666:17: 1671:18
        (_0.2: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>) = move _61; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1666:17: 1671:18
        (_0.3: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>) = move _65; // scope 9 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1666:17: 1671:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1673:10: 1673:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1675:5: 1680:6>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1675:33: 1675:35

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1675:33: 1675:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1675:33: 1675:35
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1675:5: 1680:6>::to_scalars(_1: x2<u32x4x2_avx2<NI>, G0>) -> [u32; 16] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1677:23: 1677:27
    let mut _0: [u32; 16];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1677:32: 1677:41
    let mut _2: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1678:43: 1678:47
    scope 1 {
    }

    bb0: {
        _2 = _1;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1678:43: 1678:47
        _0 = transmute::<x2<u32x4x2_avx2<NI>, G0>, [u32; 16]>(move _2) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1678:22: 1678:48
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1678:22: 1678:42
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(x2<u32x4x2_avx2<NI>, G0>) -> [u32; 16] {transmute::<x2<u32x4x2_avx2<NI>, G0>, [u32; 16]>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1679:10: 1679:10
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1675:5: 1680:6>::to_scalars::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1677:38: 1677:40

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1677:38: 1677:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1677:38: 1677:40
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1681:5: 1691:6>::from(_1: x2<u32x4x2_avx2<NI>, G0>) -> vec512_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1683:17: 1683:18
    let mut _0: x86_64::vec512_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1683:41: 1683:45
    let mut _2: [x86_64::vec256_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1685:22: 1688:18
    let mut _3: x86_64::vec256_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:21: 1686:53
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:43: 1686:51
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:47: 1686:48
    let mut _6: x86_64::vec256_storage;  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:21: 1687:53
    let mut _7: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:43: 1687:51
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:47: 1687:48

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:47: 1686:48
        _4 = ((_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_5].0: core::arch::x86_64::__m256i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:43: 1686:51
        Deinit(_3);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:21: 1686:53
        (_3.4: core::arch::x86_64::__m256i) = move _4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1686:21: 1686:53
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:47: 1687:48
        _7 = ((_1.0: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2])[_8].0: core::arch::x86_64::__m256i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:43: 1687:51
        Deinit(_6);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:21: 1687:53
        (_6.4: core::arch::x86_64::__m256i) = move _7; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1687:21: 1687:53
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1685:22: 1688:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1684:13: 1689:14
        (_0.4: [x86_64::vec256_storage; 2]) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1684:13: 1689:14
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1690:10: 1690:10
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1692:5: 1702:6>::from(_1: x4<u128x1_sse2<YesS3, YesS4, NI>>) -> x2<u32x4x2_avx2<NI>, G0> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1694:17: 1694:18
    let mut _0: soft::x2<x86_64::sse2::avx2::u32x4x2_avx2<NI>, x86_64::sse2::G0>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1694:58: 1694:62
    let mut _2: [x86_64::sse2::avx2::u32x4x2_avx2<NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1695:23: 1700:14
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:21: 1697:77
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:39: 1697:76
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:57: 1697:65
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:61: 1697:62
    let mut _7: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:67: 1697:75
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:71: 1697:72
    let mut _9: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:21: 1698:77
    let mut _10: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:39: 1698:76
    let mut _11: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:57: 1698:65
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:61: 1698:62
    let mut _13: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:67: 1698:75
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:71: 1698:72
    scope 1 {
    }

    bb0: {
        _6 = const 0_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:61: 1697:62
        _5 = ((_1.0: [x86_64::sse2::u128x1_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 4])[_6].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:57: 1697:65
        _8 = const 1_usize;              // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:71: 1697:72
        _7 = ((_1.0: [x86_64::sse2::u128x1_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 4])[_8].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:67: 1697:75
        _4 = core::arch::x86_64::_mm256_setr_m128i(move _5, move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:39: 1697:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:39: 1697:56
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_setr_m128i}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = u32x4x2_avx2::<NI>::new(move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:21: 1697:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1697:21: 1697:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _12 = const 2_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:61: 1698:62
        _11 = ((_1.0: [x86_64::sse2::u128x1_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 4])[_12].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:57: 1698:65
        _14 = const 3_usize;             // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:71: 1698:72
        _13 = ((_1.0: [x86_64::sse2::u128x1_sse2<x86_64::YesS3, x86_64::YesS4, NI>; 4])[_14].0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:67: 1698:75
        _10 = core::arch::x86_64::_mm256_setr_m128i(move _11, move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:39: 1698:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:39: 1698:56
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_setr_m128i}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _9 = u32x4x2_avx2::<NI>::new(move _10) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:21: 1698:77
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1698:21: 1698:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _9];         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1696:17: 1699:18
        _0 = x2::<u32x4x2_avx2<NI>, G0>::new(move _2) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1695:13: 1700:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1695:13: 1695:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32x4x2_avx2<NI>; 2]) -> x2<u32x4x2_avx2<NI>, G0> {x2::<u32x4x2_avx2<NI>, G0>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1701:10: 1701:10
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:37:1: 67:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:40:78: 40:79

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:40:78: 40:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:40:78: 40:79
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:37:1: 67:2>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:41:78: 41:79

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:41:78: 41:79
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:41:78: 41:79
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:37:1: 67:2>::instance() -> SseMachine<S3, S4, NI> {
    let mut _0: x86_64::SseMachine<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:64:29: 64:33

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:66:6: 66:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:71:1: 95:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:74:84: 74:85

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:74:84: 74:85
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:74:84: 74:85
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:71:1: 95:2>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:75:84: 75:85

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:75:84: 75:85
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:75:84: 75:85
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:71:1: 95:2>::instance() -> Avx2Machine<NI> {
    let mut _0: x86_64::Avx2Machine<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:92:29: 92:33

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:94:6: 94:6
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:116:1: 121:2>::unpack(_1: vec128_storage) -> vec128_storage {
    debug p => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:118:22: 118:23
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:118:44: 118:48

    bb0: {
        _0 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:119:9: 119:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:120:6: 120:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:122:1: 127:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:122:49: 122:50

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:122:49: 122:50
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:122:49: 122:50
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:122:1: 127:2>::from(_1: &vec128_storage) -> &[u32; 4] {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:124:13: 124:14
    let mut _0: &[u32; 4];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:125:18: 125:26
    scope 1 {
    }

    bb0: {
        _0 = &((*_1).0: [u32; 4]);       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:125:18: 125:26
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:126:6: 126:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:128:1: 133:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:128:17: 128:18

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:128:17: 128:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:128:17: 128:18
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:128:1: 133:2>::from(_1: [u32; 4]) -> vec128_storage {
    debug u32x4 => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:130:13: 130:18
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:130:33: 130:37
    let mut _2: [u32; 4];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:131:26: 131:31

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:131:26: 131:31
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:131:9: 131:33
        (_0.0: [u32; 4]) = move _2;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:131:9: 131:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:132:6: 132:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:128:1: 133:2>::from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:130:26: 130:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:130:26: 130:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:130:26: 130:27
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:134:1: 139:2>::default() -> vec128_storage {
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:136:21: 136:25
    let mut _1: [u128; 1];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:137:34: 137:37

    bb0: {
        _1 = [const 0_u128];             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:137:34: 137:37
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:137:9: 137:39
        (_0.2: [u128; 1]) = move _1;     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:137:9: 137:39
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:138:6: 138:6
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:141:1: 146:2>::eq(_1: &vec128_storage, _2: &vec128_storage) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:143:11: 143:16
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:143:18: 143:21
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:143:33: 143:37
    let mut _3: &[u128; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:144:18: 144:29
    let mut _4: &[u128; 1];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:144:33: 144:43
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).2: [u128; 1]);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:144:18: 144:29
        _4 = &((*_2).2: [u128; 1]);      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:144:33: 144:43
        _0 = <[u128; 1] as PartialEq>::eq(move _3, move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:144:18: 144:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:144:18: 144:43
                                         // + literal: Const { ty: for<'r, 's> fn(&'r [u128; 1], &'s [u128; 1]) -> bool {<[u128; 1] as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:145:6: 145:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:157:1: 162:2>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:157:17: 157:18

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:157:17: 157:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:157:17: 157:18
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:157:1: 162:2>::from(_1: [u64; 4]) -> vec256_storage {
    debug u64x4 => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:159:13: 159:18
    let mut _0: x86_64::vec256_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:159:33: 159:37
    let mut _2: [u64; 4];                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:160:26: 160:31

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:160:26: 160:31
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:160:9: 160:33
        (_0.1: [u64; 4]) = move _2;      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:160:9: 160:33
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:161:6: 161:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:157:1: 162:2>::from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:159:26: 159:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:159:26: 159:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:159:26: 159:27
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:163:1: 168:2>::default() -> vec256_storage {
    let mut _0: x86_64::vec256_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:165:21: 165:25
    let mut _1: [u128; 2];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:166:34: 166:40

    bb0: {
        _1 = [const 0_u128, const 0_u128]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:166:34: 166:40
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:166:9: 166:42
        (_0.2: [u128; 2]) = move _1;     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:166:9: 166:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:167:6: 167:6
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:169:1: 178:2>::new128(_1: [vec128_storage; 2]) -> vec256_storage {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:171:19: 171:21
    let mut _0: x86_64::vec256_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:171:47: 171:51
    let mut _2: [x86_64::vec128_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:172:22: 172:24

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:172:22: 172:24
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:172:9: 172:26
        (_0.3: [x86_64::vec128_storage; 2]) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:172:9: 172:26
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:173:6: 173:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:169:1: 178:2>::new128::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:171:40: 171:41

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:171:40: 171:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:171:40: 171:41
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:169:1: 178:2>::split128(_1: vec256_storage) -> [vec128_storage; 2] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:175:21: 175:25
    let mut _0: [x86_64::vec128_storage; 2]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:175:30: 175:49
    scope 1 {
    }

    bb0: {
        _0 = (_1.3: [x86_64::vec128_storage; 2]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:176:18: 176:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:177:6: 177:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:169:1: 178:2>::split128::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:175:47: 175:48

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:175:47: 175:48
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:175:47: 175:48
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:180:1: 185:2>::eq(_1: &vec256_storage, _2: &vec256_storage) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:182:11: 182:16
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:182:18: 182:21
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:182:33: 182:37
    let mut _3: &[x86_64::vec128_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:183:18: 183:27
    let mut _4: &[x86_64::vec128_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:183:31: 183:39
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).3: [x86_64::vec128_storage; 2]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:183:18: 183:27
        _4 = &((*_2).3: [x86_64::vec128_storage; 2]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:183:31: 183:39
        _0 = <[vec128_storage; 2] as PartialEq>::eq(move _3, move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:183:18: 183:39
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:183:18: 183:39
                                         // + literal: Const { ty: for<'r, 's> fn(&'r [vec128_storage; 2], &'s [vec128_storage; 2]) -> bool {<[vec128_storage; 2] as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:184:6: 184:6
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:196:1: 203:2>::default() -> vec512_storage {
    let mut _0: x86_64::vec512_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:198:21: 198:25
    let mut _1: [u128; 4];               // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:200:21: 200:33

    bb0: {
        _1 = [const 0_u128, const 0_u128, const 0_u128, const 0_u128]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:200:21: 200:33
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:199:9: 201:10
        (_0.2: [u128; 4]) = move _1;     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:199:9: 201:10
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:202:6: 202:6
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:204:1: 213:2>::new128(_1: [vec128_storage; 4]) -> vec512_storage {
    debug xs => _1;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:206:19: 206:21
    let mut _0: x86_64::vec512_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:206:47: 206:51
    let mut _2: [x86_64::vec128_storage; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:207:22: 207:24

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:207:22: 207:24
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:207:9: 207:26
        (_0.3: [x86_64::vec128_storage; 4]) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:207:9: 207:26
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:208:6: 208:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:204:1: 213:2>::new128::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:206:40: 206:41

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:206:40: 206:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:206:40: 206:41
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:204:1: 213:2>::split128(_1: vec512_storage) -> [vec128_storage; 4] {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:210:21: 210:25
    let mut _0: [x86_64::vec128_storage; 4]; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:210:30: 210:49
    scope 1 {
    }

    bb0: {
        _0 = (_1.3: [x86_64::vec128_storage; 4]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:211:18: 211:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:212:6: 212:6
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:204:1: 213:2>::split128::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:210:47: 210:48

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:210:47: 210:48
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:210:47: 210:48
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:215:1: 220:2>::eq(_1: &vec512_storage, _2: &vec512_storage) -> bool {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:217:11: 217:16
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:217:18: 217:21
    let mut _0: bool;                    // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:217:33: 217:37
    let mut _3: &[x86_64::vec256_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:218:18: 218:26
    let mut _4: &[x86_64::vec256_storage; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:218:30: 218:37
    scope 1 {
    }

    bb0: {
        _3 = &((*_1).4: [x86_64::vec256_storage; 2]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:218:18: 218:26
        _4 = &((*_2).4: [x86_64::vec256_storage; 2]); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:218:30: 218:37
        _0 = <[vec256_storage; 2] as PartialEq>::eq(move _3, move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:218:18: 218:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:218:18: 218:37
                                         // + literal: Const { ty: for<'r, 's> fn(&'r [vec256_storage; 2], &'s [vec256_storage; 2]) -> bool {<[vec256_storage; 2] as PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:219:6: 219:6
    }
}

x2::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:29: 10:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:29: 10:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:29: 10:30
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:16: 8:21>::clone(_1: &x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:16: 8:21
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:16: 8:21
    let _2: &[W; 2];                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
    let _3: &core::marker::PhantomData<G>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
    let mut _4: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
    let mut _5: &[W; 2];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
    let _6: &[W; 2];                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
    let mut _7: core::marker::PhantomData<G>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
    let mut _8: &core::marker::PhantomData<G>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
    let _9: &core::marker::PhantomData<G>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
    }

    bb0: {
        _2 = &((*_1).0: [W; 2]);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
        _3 = &((*_1).1: core::marker::PhantomData<G>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
        _6 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
        _5 = _6;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
        _4 = <[W; 2] as Clone>::clone(move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
                                         // + literal: Const { ty: for<'r> fn(&'r [W; 2]) -> [W; 2] {<[W; 2] as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
        _8 = _9;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
        _7 = <PhantomData<G> as Clone>::clone(move _8) -> [return: bb2, unwind: bb3]; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<G>) -> PhantomData<G> {<PhantomData<G> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:16: 8:21
        (_0.0: [W; 2]) = move _4;        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:16: 8:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:21: 8:21
    }

    bb3 (cleanup): {
        drop(_4) -> bb4;                 // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:20: 8:21
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:16: 8:21
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:23: 8:30>::default() -> x2<W, G> {
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:23: 8:30
    let mut _1: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
    let mut _2: core::marker::PhantomData<G>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47

    bb0: {
        _1 = <[W; 2] as Default>::default() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:21: 10:31
                                         // + literal: Const { ty: fn() -> [W; 2] {<[W; 2] as Default>::default}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = <PhantomData<G> as Default>::default() -> [return: bb2, unwind: bb3]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:33: 10:47
                                         // + literal: Const { ty: fn() -> PhantomData<G> {<PhantomData<G> as Default>::default}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:23: 8:30
        (_0.0: [W; 2]) = move _1;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:23: 8:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:30: 8:30
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:29: 8:30
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:8:23: 8:30
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right7(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right7(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:51:18: 51:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right7}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right7(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:51:18: 51:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right7}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right8(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right8(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:52:18: 52:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right8(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:52:18: 52:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right11(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right11(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:53:18: 53:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right11}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right11(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:53:18: 53:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right11}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right12(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right12(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:54:18: 54:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right12}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right12(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:54:18: 54:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right12}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right16(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right16(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:55:18: 55:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right16}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right16(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:55:18: 55:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right16}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right20(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right20(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:56:18: 56:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right20}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right20(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:56:18: 56:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right20}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right24(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right24(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:57:18: 57:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right24}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right24(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:57:18: 57:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right24}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:47:1: 59:2>::rotate_each_word_right25(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right25(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:58:18: 58:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right25}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right25(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:58:18: 58:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right25}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:60:1: 65:2>::rotate_each_word_right32(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::RotateEachWord64>::rotate_each_word_right32(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:64:18: 64:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord64>::rotate_each_word_right32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::RotateEachWord64>::rotate_each_word_right32(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:64:18: 64:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord64>::rotate_each_word_right32}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:19:9: 25:10>::bitand(_1: x2<W, G>, _2: x2<W, G>) -> x2<<W as core::ops::BitAnd>::Output, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:20: 22:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:26: 22:29
    let mut _0: soft::x2<<W as core::ops::BitAnd>::Output, G>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:40: 22:52
    let mut _3: [<W as core::ops::BitAnd>::Output; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
    let mut _4: <W as core::ops::BitAnd>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
    let mut _9: <W as core::ops::BitAnd>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
        _5 = (_1.0: [W; 2])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
        _7 = (_2.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
        _4 = <W as core::ops::BitAnd>::bitand(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:91:23: 91:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitAnd>::Output {<W as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
        _10 = (_1.0: [W; 2])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72
        _12 = (_2.0: [W; 2])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
        _9 = <W as core::ops::BitAnd>::bitand(move _10, move _12) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:91:23: 91:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitAnd>::Output {<W as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _3 = [move _4, move _9];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
        _0 = x2::<<W as core::ops::BitAnd>::Output, G>::new(move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([<W as core::ops::BitAnd>::Output; 2]) -> x2<<W as core::ops::BitAnd>::Output, G> {x2::<<W as core::ops::BitAnd>::Output, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:24:14: 24:14
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:74: 23:75
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:13: 24:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:19:9: 25:10>::bitor(_1: x2<W, G>, _2: x2<W, G>) -> x2<<W as core::ops::BitOr>::Output, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:20: 22:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:26: 22:29
    let mut _0: soft::x2<<W as core::ops::BitOr>::Output, G>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:40: 22:52
    let mut _3: [<W as core::ops::BitOr>::Output; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
    let mut _4: <W as core::ops::BitOr>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
    let mut _9: <W as core::ops::BitOr>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
        _5 = (_1.0: [W; 2])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
        _7 = (_2.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
        _4 = <W as core::ops::BitOr>::bitor(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:92:22: 92:27
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitOr>::Output {<W as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
        _10 = (_1.0: [W; 2])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72
        _12 = (_2.0: [W; 2])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
        _9 = <W as core::ops::BitOr>::bitor(move _10, move _12) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:92:22: 92:27
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitOr>::Output {<W as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _3 = [move _4, move _9];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
        _0 = x2::<<W as core::ops::BitOr>::Output, G>::new(move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([<W as core::ops::BitOr>::Output; 2]) -> x2<<W as core::ops::BitOr>::Output, G> {x2::<<W as core::ops::BitOr>::Output, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:24:14: 24:14
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:74: 23:75
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:13: 24:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:19:9: 25:10>::bitxor(_1: x2<W, G>, _2: x2<W, G>) -> x2<<W as core::ops::BitXor>::Output, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:20: 22:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:26: 22:29
    let mut _0: soft::x2<<W as core::ops::BitXor>::Output, G>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:40: 22:52
    let mut _3: [<W as core::ops::BitXor>::Output; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
    let mut _4: <W as core::ops::BitXor>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
    let mut _9: <W as core::ops::BitXor>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
        _5 = (_1.0: [W; 2])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
        _7 = (_2.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
        _4 = <W as core::ops::BitXor>::bitxor(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:93:23: 93:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitXor>::Output {<W as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
        _10 = (_1.0: [W; 2])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72
        _12 = (_2.0: [W; 2])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
        _9 = <W as core::ops::BitXor>::bitxor(move _10, move _12) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:93:23: 93:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitXor>::Output {<W as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _3 = [move _4, move _9];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
        _0 = x2::<<W as core::ops::BitXor>::Output, G>::new(move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([<W as core::ops::BitXor>::Output; 2]) -> x2<<W as core::ops::BitXor>::Output, G> {x2::<<W as core::ops::BitXor>::Output, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:24:14: 24:14
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:74: 23:75
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:13: 24:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:19:9: 25:10>::andnot(_1: x2<W, G>, _2: x2<W, G>) -> x2<<W as types::AndNot>::Output, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:20: 22:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:26: 22:29
    let mut _0: soft::x2<<W as types::AndNot>::Output, G>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:40: 22:52
    let mut _3: [<W as types::AndNot>::Output; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
    let mut _4: <W as types::AndNot>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
    let mut _9: <W as types::AndNot>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
        _5 = (_1.0: [W; 2])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
        _7 = (_2.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
        _4 = <W as types::AndNot>::andnot(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:94:23: 94:29
                                         // + literal: Const { ty: fn(W, W) -> <W as types::AndNot>::Output {<W as types::AndNot>::andnot}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
        _10 = (_1.0: [W; 2])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72
        _12 = (_2.0: [W; 2])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
        _9 = <W as types::AndNot>::andnot(move _10, move _12) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:94:23: 94:29
                                         // + literal: Const { ty: fn(W, W) -> <W as types::AndNot>::Output {<W as types::AndNot>::andnot}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _3 = [move _4, move _9];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
        _0 = x2::<<W as types::AndNot>::Output, G>::new(move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([<W as types::AndNot>::Output; 2]) -> x2<<W as types::AndNot>::Output, G> {x2::<<W as types::AndNot>::Output, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:24:14: 24:14
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:74: 23:75
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:13: 24:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:30:9: 36:10>::bitand_assign(_1: &mut x2<W, G>, _2: x2<W, G>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:49: 32:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
        _4 = &mut ((*_1).0: [W; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
        _6 = (_2.0: [W; 2])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
        _3 = <W as core::ops::BitAndAssign>::bitand_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:95:36: 95:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitAndAssign>::bitand_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
        _9 = &mut ((*_1).0: [W; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47
        _11 = (_2.0: [W; 2])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
        _8 = <W as core::ops::BitAndAssign>::bitand_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:95:36: 95:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitAndAssign>::bitand_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:35:14: 35:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:30:9: 36:10>::bitor_assign(_1: &mut x2<W, G>, _2: x2<W, G>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:49: 32:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
        _4 = &mut ((*_1).0: [W; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
        _6 = (_2.0: [W; 2])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
        _3 = <W as core::ops::BitOrAssign>::bitor_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:96:35: 96:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitOrAssign>::bitor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
        _9 = &mut ((*_1).0: [W; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47
        _11 = (_2.0: [W; 2])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
        _8 = <W as core::ops::BitOrAssign>::bitor_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:96:35: 96:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitOrAssign>::bitor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:35:14: 35:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:30:9: 36:10>::bitxor_assign(_1: &mut x2<W, G>, _2: x2<W, G>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:49: 32:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
        _4 = &mut ((*_1).0: [W; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
        _6 = (_2.0: [W; 2])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
        _3 = <W as core::ops::BitXorAssign>::bitxor_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:97:36: 97:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitXorAssign>::bitxor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
        _9 = &mut ((*_1).0: [W; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47
        _11 = (_2.0: [W; 2])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
        _8 = <W as core::ops::BitXorAssign>::bitxor_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:97:36: 97:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitXorAssign>::bitxor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:35:14: 35:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:19:9: 25:10>::add(_1: x2<W, G>, _2: x2<W, G>) -> x2<<W as core::ops::Add>::Output, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:20: 22:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:26: 22:29
    let mut _0: soft::x2<<W as core::ops::Add>::Output, G>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:40: 22:52
    let mut _3: [<W as core::ops::Add>::Output; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
    let mut _4: <W as core::ops::Add>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
    let mut _9: <W as core::ops::Add>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:33: 23:34
        _5 = (_1.0: [W; 2])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:35
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:46: 23:47
        _7 = (_2.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:40: 23:48
        _4 = <W as core::ops::Add>::add(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:26: 23:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:104:20: 104:23
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::Add>::Output {<W as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:58: 23:59
        _10 = (_1.0: [W; 2])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:60
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:71: 23:72
        _12 = (_2.0: [W; 2])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:65: 23:73
        _9 = <W as core::ops::Add>::add(move _10, move _12) -> [return: bb2, unwind: bb4]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:51: 23:74
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:104:20: 104:23
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::Add>::Output {<W as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _3 = [move _4, move _9];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:25: 23:75
        _0 = x2::<<W as core::ops::Add>::Output, G>::new(move _3) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:76
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:17: 23:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([<W as core::ops::Add>::Output; 2]) -> x2<<W as core::ops::Add>::Output, G> {x2::<<W as core::ops::Add>::Output, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:24:14: 24:14
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:23:74: 23:75
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:22:13: 24:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:30:9: 36:10>::add_assign(_1: &mut x2<W, G>, _2: x2<W, G>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:32:49: 32:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:25: 33:26
        _4 = &mut ((*_1).0: [W; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:46: 33:47
        _6 = (_2.0: [W; 2])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:40: 33:48
        _3 = <W as core::ops::AddAssign>::add_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:33:17: 33:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:105:33: 105:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::AddAssign>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:25: 34:26
        _9 = &mut ((*_1).0: [W; 2])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:46: 34:47
        _11 = (_2.0: [W; 2])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:40: 34:48
        _8 = <W as core::ops::AddAssign>::add_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:34:17: 34:49
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:105:33: 105:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::AddAssign>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:35:14: 35:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap1(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap1(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:151:18: 151:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap1}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap1(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:151:18: 151:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap2(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap2(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:152:18: 152:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap2(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:152:18: 152:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap2}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap4(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap4(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:153:18: 153:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap4}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap4(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:153:18: 153:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap4}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap8(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap8(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:154:18: 154:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap8(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:154:18: 154:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap16(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap16(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:155:18: 155:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap16}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap16(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:155:18: 155:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap16}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap32(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap32(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:156:18: 156:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap32(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:156:18: 156:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap32}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:147:1: 158:2>::swap64(_1: x2<W, G>) -> x2<W, G> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:16: 42:20
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:42:25: 42:29
    let mut _2: [W; 2];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:29: 43:30
        _4 = (_1.0: [W; 2])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:31
        _3 = <W as types::Swap64>::swap64(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:22: 43:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:157:18: 157:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:46: 43:47
        _7 = (_1.0: [W; 2])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:48
        _6 = <W as types::Swap64>::swap64(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:39: 43:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:157:18: 157:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap64}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:21: 43:55
        _0 = x2::<W, G>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:56
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:43:13: 43:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([W; 2]) -> x2<W, G> {x2::<W, G>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:44:10: 44:10
    }
}

x4::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:26: 225:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:26: 225:27
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:26: 225:27
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:16: 223:21>::clone(_1: &x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:16: 223:21
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:16: 223:21
    let _2: &[W; 4];                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
    let mut _3: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
    let mut _4: &[W; 4];                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
    let _5: &[W; 4];                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
    }

    bb0: {
        _2 = &((*_1).0: [W; 4]);         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
        _5 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
        _4 = _5;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
        _3 = <[W; 4] as Clone>::clone(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
                                         // + literal: Const { ty: for<'r> fn(&'r [W; 4]) -> [W; 4] {<[W; 4] as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:16: 223:21
        (_0.0: [W; 4]) = move _3;        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:16: 223:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:21: 223:21
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:23: 223:30>::default() -> x4<W> {
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:23: 223:30
    let mut _1: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28

    bb0: {
        _1 = <[W; 4] as Default>::default() -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:18: 225:28
                                         // + literal: Const { ty: fn() -> [W; 4] {<[W; 4] as Default>::default}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:23: 223:30
        (_0.0: [W; 4]) = move _1;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:23: 223:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:223:30: 223:30
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right7(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right7(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:278:18: 278:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right7}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right7(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:278:18: 278:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right7}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right7(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:278:18: 278:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right7}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right7(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:278:18: 278:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right7}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right8(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right8(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:279:18: 279:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right8(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:279:18: 279:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right8(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:279:18: 279:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right8}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right8(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:279:18: 279:41
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right8}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right11(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right11(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:280:18: 280:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right11}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right11(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:280:18: 280:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right11}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right11(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:280:18: 280:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right11}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right11(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:280:18: 280:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right11}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right12(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right12(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:281:18: 281:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right12}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right12(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:281:18: 281:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right12}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right12(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:281:18: 281:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right12}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right12(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:281:18: 281:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right12}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right16(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right16(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:282:18: 282:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right16}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right16(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:282:18: 282:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right16}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right16(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:282:18: 282:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right16}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right16(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:282:18: 282:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right16}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right20(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right20(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:283:18: 283:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right20}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right20(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:283:18: 283:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right20}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right20(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:283:18: 283:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right20}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right20(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:283:18: 283:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right20}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right24(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right24(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:284:18: 284:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right24}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right24(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:284:18: 284:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right24}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right24(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:284:18: 284:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right24}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right24(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:284:18: 284:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right24}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:274:1: 286:2>::rotate_each_word_right25(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord32>::rotate_each_word_right25(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:285:18: 285:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right25}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord32>::rotate_each_word_right25(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:285:18: 285:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right25}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord32>::rotate_each_word_right25(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:285:18: 285:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right25}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord32>::rotate_each_word_right25(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:285:18: 285:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord32>::rotate_each_word_right25}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:287:1: 292:2>::rotate_each_word_right32(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::RotateEachWord64>::rotate_each_word_right32(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:291:18: 291:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord64>::rotate_each_word_right32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::RotateEachWord64>::rotate_each_word_right32(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:291:18: 291:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord64>::rotate_each_word_right32}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::RotateEachWord64>::rotate_each_word_right32(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:291:18: 291:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord64>::rotate_each_word_right32}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::RotateEachWord64>::rotate_each_word_right32(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:291:18: 291:42
                                         // + literal: Const { ty: fn(W) -> W {<W as types::RotateEachWord64>::rotate_each_word_right32}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:234:9: 245:10>::bitand(_1: x4<W>, _2: x4<W>) -> x4<<W as core::ops::BitAnd>::Output> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:20: 237:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:26: 237:29
    let mut _0: soft::x4<<W as core::ops::BitAnd>::Output>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:40: 237:52
    let mut _3: [<W as core::ops::BitAnd>::Output; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
    let mut _4: <W as core::ops::BitAnd>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
    let mut _9: <W as core::ops::BitAnd>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
    let mut _14: <W as core::ops::BitAnd>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
    let mut _15: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
    let mut _17: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
    let mut _19: <W as core::ops::BitAnd>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
    let mut _20: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
    let _21: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
    let mut _22: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
        _5 = (_1.0: [W; 4])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
        _7 = (_2.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
        _4 = <W as core::ops::BitAnd>::bitand(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:298:23: 298:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitAnd>::Output {<W as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
        _12 = (_2.0: [W; 4])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
        _9 = <W as core::ops::BitAnd>::bitand(move _10, move _12) -> [return: bb2, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:298:23: 298:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitAnd>::Output {<W as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
        _15 = (_1.0: [W; 4])[_16];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
        _18 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
        _17 = (_2.0: [W; 4])[_18];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
        _14 = <W as core::ops::BitAnd>::bitand(move _15, move _17) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:298:23: 298:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitAnd>::Output {<W as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
        _20 = (_1.0: [W; 4])[_21];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
        _23 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42
        _22 = (_2.0: [W; 4])[_23];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
        _19 = <W as core::ops::BitAnd>::bitand(move _20, move _22) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:298:23: 298:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitAnd>::Output {<W as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = [move _4, move _9, move _14, move _19]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        (_0.0: [<W as core::ops::BitAnd>::Output; 4]) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:244:14: 244:14
    }

    bb5 (cleanup): {
        drop(_14) -> bb6;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb6 (cleanup): {
        drop(_9) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:13: 244:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:234:9: 245:10>::bitor(_1: x4<W>, _2: x4<W>) -> x4<<W as core::ops::BitOr>::Output> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:20: 237:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:26: 237:29
    let mut _0: soft::x4<<W as core::ops::BitOr>::Output>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:40: 237:52
    let mut _3: [<W as core::ops::BitOr>::Output; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
    let mut _4: <W as core::ops::BitOr>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
    let mut _9: <W as core::ops::BitOr>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
    let mut _14: <W as core::ops::BitOr>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
    let mut _15: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
    let mut _17: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
    let mut _19: <W as core::ops::BitOr>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
    let mut _20: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
    let _21: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
    let mut _22: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
        _5 = (_1.0: [W; 4])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
        _7 = (_2.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
        _4 = <W as core::ops::BitOr>::bitor(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:299:22: 299:27
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitOr>::Output {<W as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
        _12 = (_2.0: [W; 4])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
        _9 = <W as core::ops::BitOr>::bitor(move _10, move _12) -> [return: bb2, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:299:22: 299:27
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitOr>::Output {<W as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
        _15 = (_1.0: [W; 4])[_16];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
        _18 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
        _17 = (_2.0: [W; 4])[_18];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
        _14 = <W as core::ops::BitOr>::bitor(move _15, move _17) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:299:22: 299:27
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitOr>::Output {<W as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
        _20 = (_1.0: [W; 4])[_21];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
        _23 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42
        _22 = (_2.0: [W; 4])[_23];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
        _19 = <W as core::ops::BitOr>::bitor(move _20, move _22) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:299:22: 299:27
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitOr>::Output {<W as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = [move _4, move _9, move _14, move _19]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        (_0.0: [<W as core::ops::BitOr>::Output; 4]) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:244:14: 244:14
    }

    bb5 (cleanup): {
        drop(_14) -> bb6;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb6 (cleanup): {
        drop(_9) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:13: 244:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:234:9: 245:10>::bitxor(_1: x4<W>, _2: x4<W>) -> x4<<W as core::ops::BitXor>::Output> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:20: 237:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:26: 237:29
    let mut _0: soft::x4<<W as core::ops::BitXor>::Output>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:40: 237:52
    let mut _3: [<W as core::ops::BitXor>::Output; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
    let mut _4: <W as core::ops::BitXor>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
    let mut _9: <W as core::ops::BitXor>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
    let mut _14: <W as core::ops::BitXor>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
    let mut _15: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
    let mut _17: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
    let mut _19: <W as core::ops::BitXor>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
    let mut _20: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
    let _21: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
    let mut _22: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
        _5 = (_1.0: [W; 4])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
        _7 = (_2.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
        _4 = <W as core::ops::BitXor>::bitxor(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:300:23: 300:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitXor>::Output {<W as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
        _12 = (_2.0: [W; 4])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
        _9 = <W as core::ops::BitXor>::bitxor(move _10, move _12) -> [return: bb2, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:300:23: 300:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitXor>::Output {<W as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
        _15 = (_1.0: [W; 4])[_16];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
        _18 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
        _17 = (_2.0: [W; 4])[_18];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
        _14 = <W as core::ops::BitXor>::bitxor(move _15, move _17) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:300:23: 300:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitXor>::Output {<W as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
        _20 = (_1.0: [W; 4])[_21];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
        _23 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42
        _22 = (_2.0: [W; 4])[_23];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
        _19 = <W as core::ops::BitXor>::bitxor(move _20, move _22) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:300:23: 300:29
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::BitXor>::Output {<W as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = [move _4, move _9, move _14, move _19]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        (_0.0: [<W as core::ops::BitXor>::Output; 4]) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:244:14: 244:14
    }

    bb5 (cleanup): {
        drop(_14) -> bb6;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb6 (cleanup): {
        drop(_9) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:13: 244:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:234:9: 245:10>::andnot(_1: x4<W>, _2: x4<W>) -> x4<<W as types::AndNot>::Output> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:20: 237:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:26: 237:29
    let mut _0: soft::x4<<W as types::AndNot>::Output>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:40: 237:52
    let mut _3: [<W as types::AndNot>::Output; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
    let mut _4: <W as types::AndNot>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
    let mut _9: <W as types::AndNot>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
    let mut _14: <W as types::AndNot>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
    let mut _15: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
    let mut _17: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
    let mut _19: <W as types::AndNot>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
    let mut _20: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
    let _21: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
    let mut _22: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
        _5 = (_1.0: [W; 4])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
        _7 = (_2.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
        _4 = <W as types::AndNot>::andnot(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:301:23: 301:29
                                         // + literal: Const { ty: fn(W, W) -> <W as types::AndNot>::Output {<W as types::AndNot>::andnot}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
        _12 = (_2.0: [W; 4])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
        _9 = <W as types::AndNot>::andnot(move _10, move _12) -> [return: bb2, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:301:23: 301:29
                                         // + literal: Const { ty: fn(W, W) -> <W as types::AndNot>::Output {<W as types::AndNot>::andnot}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
        _15 = (_1.0: [W; 4])[_16];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
        _18 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
        _17 = (_2.0: [W; 4])[_18];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
        _14 = <W as types::AndNot>::andnot(move _15, move _17) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:301:23: 301:29
                                         // + literal: Const { ty: fn(W, W) -> <W as types::AndNot>::Output {<W as types::AndNot>::andnot}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
        _20 = (_1.0: [W; 4])[_21];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
        _23 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42
        _22 = (_2.0: [W; 4])[_23];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
        _19 = <W as types::AndNot>::andnot(move _20, move _22) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:301:23: 301:29
                                         // + literal: Const { ty: fn(W, W) -> <W as types::AndNot>::Output {<W as types::AndNot>::andnot}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = [move _4, move _9, move _14, move _19]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        (_0.0: [<W as types::AndNot>::Output; 4]) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:244:14: 244:14
    }

    bb5 (cleanup): {
        drop(_14) -> bb6;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb6 (cleanup): {
        drop(_9) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:13: 244:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:250:9: 258:10>::bitand_assign(_1: &mut x4<W>, _2: x4<W>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:27: 252:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:38: 252:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:49: 252:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
    let _13: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let mut _14: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let _15: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
    let mut _16: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
    let _17: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
    let _18: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let mut _19: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
    let mut _21: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
        _4 = &mut ((*_1).0: [W; 4])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
        _6 = (_2.0: [W; 4])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
        _3 = <W as core::ops::BitAndAssign>::bitand_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:302:36: 302:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitAndAssign>::bitand_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
        _9 = &mut ((*_1).0: [W; 4])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
        _11 = (_2.0: [W; 4])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
        _8 = <W as core::ops::BitAndAssign>::bitand_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:302:36: 302:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitAndAssign>::bitand_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
        _14 = &mut ((*_1).0: [W; 4])[_15]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
        _17 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
        _16 = (_2.0: [W; 4])[_17];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
        _13 = <W as core::ops::BitAndAssign>::bitand_assign(move _14, move _16) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:302:36: 302:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitAndAssign>::bitand_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _20 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
        _19 = &mut ((*_1).0: [W; 4])[_20]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
        _22 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45
        _21 = (_2.0: [W; 4])[_22];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
        _18 = <W as core::ops::BitAndAssign>::bitand_assign(move _19, move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:302:36: 302:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitAndAssign>::bitand_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:257:14: 257:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:250:9: 258:10>::bitor_assign(_1: &mut x4<W>, _2: x4<W>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:27: 252:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:38: 252:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:49: 252:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
    let _13: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let mut _14: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let _15: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
    let mut _16: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
    let _17: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
    let _18: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let mut _19: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
    let mut _21: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
        _4 = &mut ((*_1).0: [W; 4])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
        _6 = (_2.0: [W; 4])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
        _3 = <W as core::ops::BitOrAssign>::bitor_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:303:35: 303:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitOrAssign>::bitor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
        _9 = &mut ((*_1).0: [W; 4])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
        _11 = (_2.0: [W; 4])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
        _8 = <W as core::ops::BitOrAssign>::bitor_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:303:35: 303:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitOrAssign>::bitor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
        _14 = &mut ((*_1).0: [W; 4])[_15]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
        _17 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
        _16 = (_2.0: [W; 4])[_17];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
        _13 = <W as core::ops::BitOrAssign>::bitor_assign(move _14, move _16) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:303:35: 303:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitOrAssign>::bitor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _20 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
        _19 = &mut ((*_1).0: [W; 4])[_20]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
        _22 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45
        _21 = (_2.0: [W; 4])[_22];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
        _18 = <W as core::ops::BitOrAssign>::bitor_assign(move _19, move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:303:35: 303:47
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitOrAssign>::bitor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:257:14: 257:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:250:9: 258:10>::bitxor_assign(_1: &mut x4<W>, _2: x4<W>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:27: 252:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:38: 252:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:49: 252:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
    let _13: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let mut _14: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let _15: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
    let mut _16: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
    let _17: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
    let _18: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let mut _19: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
    let mut _21: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
        _4 = &mut ((*_1).0: [W; 4])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
        _6 = (_2.0: [W; 4])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
        _3 = <W as core::ops::BitXorAssign>::bitxor_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:304:36: 304:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitXorAssign>::bitxor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
        _9 = &mut ((*_1).0: [W; 4])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
        _11 = (_2.0: [W; 4])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
        _8 = <W as core::ops::BitXorAssign>::bitxor_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:304:36: 304:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitXorAssign>::bitxor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
        _14 = &mut ((*_1).0: [W; 4])[_15]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
        _17 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
        _16 = (_2.0: [W; 4])[_17];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
        _13 = <W as core::ops::BitXorAssign>::bitxor_assign(move _14, move _16) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:304:36: 304:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitXorAssign>::bitxor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _20 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
        _19 = &mut ((*_1).0: [W; 4])[_20]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
        _22 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45
        _21 = (_2.0: [W; 4])[_22];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
        _18 = <W as core::ops::BitXorAssign>::bitxor_assign(move _19, move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:304:36: 304:49
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::BitXorAssign>::bitxor_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:257:14: 257:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:234:9: 245:10>::add(_1: x4<W>, _2: x4<W>) -> x4<<W as core::ops::Add>::Output> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:20: 237:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:26: 237:29
    let mut _0: soft::x4<<W as core::ops::Add>::Output>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:40: 237:52
    let mut _3: [<W as core::ops::Add>::Output; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
    let mut _4: <W as core::ops::Add>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
    let mut _5: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
    let _6: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
    let mut _9: <W as core::ops::Add>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
    let _13: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
    let mut _14: <W as core::ops::Add>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
    let mut _15: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
    let _16: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
    let mut _17: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
    let _18: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
    let mut _19: <W as core::ops::Add>::Output; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
    let mut _20: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
    let _21: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
    let mut _22: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
    let _23: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42

    bb0: {
        _6 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:28: 239:29
        _5 = (_1.0: [W; 4])[_6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:30
        _8 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:41: 239:42
        _7 = (_2.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:35: 239:43
        _4 = <W as core::ops::Add>::add(move _5, move _7) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:239:21: 239:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:306:20: 306:23
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::Add>::Output {<W as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:28: 240:29
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:30
        _13 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:41: 240:42
        _12 = (_2.0: [W; 4])[_13];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:35: 240:43
        _9 = <W as core::ops::Add>::add(move _10, move _12) -> [return: bb2, unwind: bb7]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:240:21: 240:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:306:20: 306:23
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::Add>::Output {<W as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:28: 241:29
        _15 = (_1.0: [W; 4])[_16];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:30
        _18 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:41: 241:42
        _17 = (_2.0: [W; 4])[_18];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:35: 241:43
        _14 = <W as core::ops::Add>::add(move _15, move _17) -> [return: bb3, unwind: bb6]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:241:21: 241:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:306:20: 306:23
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::Add>::Output {<W as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:28: 242:29
        _20 = (_1.0: [W; 4])[_21];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:30
        _23 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:41: 242:42
        _22 = (_2.0: [W; 4])[_23];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:35: 242:43
        _19 = <W as core::ops::Add>::add(move _20, move _22) -> [return: bb4, unwind: bb5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:242:21: 242:44
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:306:20: 306:23
                                         // + literal: Const { ty: fn(W, W) -> <W as core::ops::Add>::Output {<W as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _3 = [move _4, move _9, move _14, move _19]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:20: 243:18
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        (_0.0: [<W as core::ops::Add>::Output; 4]) = move _3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:238:17: 243:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:244:14: 244:14
    }

    bb5 (cleanup): {
        drop(_14) -> bb6;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb6 (cleanup): {
        drop(_9) -> bb7;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:243:17: 243:18
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:237:13: 244:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:250:9: 258:10>::add_assign(_1: &mut x4<W>, _2: x4<W>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:27: 252:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:38: 252:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:252:49: 252:49
    let _3: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let mut _4: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
    let _7: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
    let _8: ();                          // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let mut _9: &mut W;                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
    let _10: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
    let mut _11: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
    let _12: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
    let _13: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let mut _14: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
    let _15: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
    let mut _16: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
    let _17: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
    let _18: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let mut _19: &mut W;                 // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
    let _20: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
    let mut _21: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
    let _22: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:24: 253:25
        _4 = &mut ((*_1).0: [W; 4])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
        _7 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:44: 253:45
        _6 = (_2.0: [W; 4])[_7];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:38: 253:46
        _3 = <W as core::ops::AddAssign>::add_assign(move _4, move _6) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:253:17: 253:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:307:33: 307:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::AddAssign>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _10 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:24: 254:25
        _9 = &mut ((*_1).0: [W; 4])[_10]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
        _12 = const 1_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:44: 254:45
        _11 = (_2.0: [W; 4])[_12];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:38: 254:46
        _8 = <W as core::ops::AddAssign>::add_assign(move _9, move _11) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:254:17: 254:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:307:33: 307:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::AddAssign>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _15 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:24: 255:25
        _14 = &mut ((*_1).0: [W; 4])[_15]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
        _17 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:44: 255:45
        _16 = (_2.0: [W; 4])[_17];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:38: 255:46
        _13 = <W as core::ops::AddAssign>::add_assign(move _14, move _16) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:255:17: 255:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:307:33: 307:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::AddAssign>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _20 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:24: 256:25
        _19 = &mut ((*_1).0: [W; 4])[_20]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
        _22 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:44: 256:45
        _21 = (_2.0: [W; 4])[_22];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:38: 256:46
        _18 = <W as core::ops::AddAssign>::add_assign(move _19, move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:256:17: 256:47
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:307:33: 307:43
                                         // + literal: Const { ty: for<'r> fn(&'r mut W, W) {<W as core::ops::AddAssign>::add_assign}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:257:14: 257:14
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap1(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap1(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:377:18: 377:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap1}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap1(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:377:18: 377:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap1(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:377:18: 377:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap1}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap1(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:377:18: 377:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap1}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap2(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap2(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:378:18: 378:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap2}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap2(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:378:18: 378:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap2}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap2(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:378:18: 378:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap2}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap2(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:378:18: 378:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap2}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap4(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap4(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:379:18: 379:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap4}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap4(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:379:18: 379:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap4}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap4(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:379:18: 379:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap4}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap4(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:379:18: 379:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap4}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap8(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap8(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:380:18: 380:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap8}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap8(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:380:18: 380:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap8(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:380:18: 380:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap8}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap8(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:380:18: 380:23
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap8}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap16(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap16(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:381:18: 381:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap16}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap16(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:381:18: 381:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap16}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap16(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:381:18: 381:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap16}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap16(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:381:18: 381:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap16}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap32(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap32(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:382:18: 382:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap32(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:382:18: 382:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap32}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap32(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:382:18: 382:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap32}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap32(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:382:18: 382:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap32}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

fn soft::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:373:1: 384:2>::swap64(_1: x4<W>) -> x4<W> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:16: 264:20
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:264:25: 264:29
    let mut _2: [W; 4];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
    let mut _3: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
    let mut _4: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
    let mut _6: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
    let mut _7: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
    let mut _9: W;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
    let mut _10: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
    let mut _12: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
    let mut _13: W;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:24: 266:25
        _4 = (_1.0: [W; 4])[_5];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:26
        _3 = <W as types::Swap64>::swap64(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:266:17: 266:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:383:18: 383:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:24: 267:25
        _7 = (_1.0: [W; 4])[_8];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:26
        _6 = <W as types::Swap64>::swap64(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:267:17: 267:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:383:18: 383:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap64}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:24: 268:25
        _10 = (_1.0: [W; 4])[_11];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:26
        _9 = <W as types::Swap64>::swap64(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:268:17: 268:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:383:18: 383:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap64}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:24: 269:25
        _13 = (_1.0: [W; 4])[_14];       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:26
        _12 = <W as types::Swap64>::swap64(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:269:17: 269:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:383:18: 383:24
                                         // + literal: Const { ty: fn(W) -> W {<W as types::Swap64>::swap64}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:16: 270:14
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        (_0.0: [W; 4]) = move _2;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:265:13: 270:15
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:271:10: 271:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right7::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:189:39: 189:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right7::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:189:39: 189:40
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right7(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<7_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<25_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right8(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:170:18: 170:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:170:27: 170:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:23: 171:84
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:49: 171:55
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:81
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:49: 171:55
        _4 = core::arch::x86_64::_mm_set_epi64x(const 868928702238099977_i64, const 290207319533486593_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:71
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:32: 171:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:32: 171:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:13: 171:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:13: 171:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:172:10: 172:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right11::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:195:40: 195:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right11::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:195:40: 195:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right11(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<11_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<11_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<21_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<21_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right12::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:196:40: 196:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right12::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:196:40: 196:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right12(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<12_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<20_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right16(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:170:18: 170:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:170:27: 170:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:23: 171:84
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:49: 171:55
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:81
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:49: 171:55
        _4 = core::arch::x86_64::_mm_set_epi64x(const 940142975169071882_i64, const 361421592464458498_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:71
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:32: 171:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:32: 171:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:13: 171:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:13: 171:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:172:10: 172:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right20::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:202:40: 202:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right20::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:202:40: 202:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right20(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<20_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<12_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right24(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:170:18: 170:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:170:27: 170:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:23: 171:84
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:49: 171:55
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:81
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:49: 171:55
        _4 = core::arch::x86_64::_mm_set_epi64x(const 1012478749960636427_i64, const 433757367256023043_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:57: 171:71
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:32: 171:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:32: 171:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:13: 171:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:171:13: 171:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:172:10: 172:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right25::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:208:40: 208:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right25::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:208:40: 208:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:188:1: 209:2>::rotate_each_word_right25(_1: u32x4_sse2<YesS3, S4, NI>) -> u32x4_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<25_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<7_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<YesS3, S4, NI> {u32x4_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right7::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:211:39: 211:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right7::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:211:39: 211:40
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right7(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<7_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<25_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right8::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:212:39: 212:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right8::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:212:39: 212:40
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right8(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<8_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<24_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<24_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right11::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:213:40: 213:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right11::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:213:40: 213:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right11(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<11_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<11_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<21_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<21_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right12::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:214:40: 214:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right12::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:214:40: 214:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right12(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<12_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<20_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right20::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:219:40: 219:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right20::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:219:40: 219:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right20(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<20_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<12_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right24::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 24_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:220:40: 220:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right24::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 24_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:220:40: 220:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right24(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<24_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<24_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<8_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right25::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53

    bb0: {
        _0 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:221:40: 221:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:44: 181:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right25::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:49: 182:58
        _1 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:221:40: 221:42
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:57: 182:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:44: 182:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:210:1: 222:2>::rotate_each_word_right25(_1: u32x4_sse2<NoS3, S4, NI>) -> u32x4_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:18: 178:22
    let mut _0: x86_64::sse2::u32x4_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:178:27: 178:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:23: 184:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:36: 181:42
        _3 = core::arch::x86_64::_mm_srli_epi32::<25_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:181:21: 181:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi32::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:36: 182:42
        _5 = core::arch::x86_64::_mm_slli_epi32::<7_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:182:21: 182:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi32::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 183:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:180:17: 180:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 184:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:179:13: 179:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<NoS3, S4, NI> {u32x4_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:185:10: 185:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right7::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:246:39: 246:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right7::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:246:39: 246:40
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right7(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<7_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<57_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<57_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right8(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:227:18: 227:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:227:27: 227:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:23: 228:84
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:49: 228:55
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:81
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:49: 228:55
        _4 = core::arch::x86_64::_mm_set_epi64x(const 580698326153497097_i64, const 1976943448883713_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:71
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:32: 228:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:32: 228:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:13: 228:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:13: 228:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:229:10: 229:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right11::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:252:40: 252:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right11::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:252:40: 252:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right11(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<11_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<11_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<53_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<53_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right12::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:253:40: 253:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right12::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:253:40: 253:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right12(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<12_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<52_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<52_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right16(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:227:18: 227:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:227:27: 227:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:23: 228:84
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:49: 228:55
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:81
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:49: 228:55
        _4 = core::arch::x86_64::_mm_set_epi64x(const 650786699177888522_i64, const 72065316473275138_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:71
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:32: 228:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:32: 228:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:13: 228:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:13: 228:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:229:10: 229:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right20::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:259:40: 259:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right20::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:259:40: 259:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right20(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<20_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<44_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<44_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right24(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:227:18: 227:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:227:27: 227:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:23: 228:84
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:49: 228:55
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:81
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:49: 228:55
        _4 = core::arch::x86_64::_mm_set_epi64x(const 723118075922942987_i64, const 144396693218329603_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:81
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:57: 228:71
                                         // + literal: Const { ty: unsafe fn(i64, i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:32: 228:82
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:32: 228:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:13: 228:85
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:228:13: 228:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:229:10: 229:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right25::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:265:40: 265:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right25::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:265:40: 265:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:245:1: 266:2>::rotate_each_word_right25(_1: u64x2_sse2<YesS3, S4, NI>) -> u64x2_sse2<YesS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::YesS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<25_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<39_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<39_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<YesS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<YesS3, S4, NI> {u64x2_sse2::<YesS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right7::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:268:39: 268:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right7::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:268:39: 268:40
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right7(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<7_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<57_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<57_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right8::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:269:39: 269:40
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right8::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:269:39: 269:40
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right8(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<8_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<56_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<56_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right11::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:270:40: 270:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right11::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:270:40: 270:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right11(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<11_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<11_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<53_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<53_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right12::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:271:40: 271:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right12::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:271:40: 271:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right12(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<12_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<52_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<52_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right20::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:276:40: 276:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right20::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:276:40: 276:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right20(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<20_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<44_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<44_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right24::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 24_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:277:40: 277:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right24::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 24_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:277:40: 277:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right24(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<24_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<24_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<40_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<40_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right25::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53

    bb0: {
        _0 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:278:40: 278:42
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:44: 238:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right25::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:49: 239:58
        _1 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:278:40: 278:42
        _2 = CheckedSub(const 64_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 64_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:57: 239:58
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:44: 239:58
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:267:1: 279:2>::rotate_each_word_right25(_1: u64x2_sse2<NoS3, S4, NI>) -> u64x2_sse2<NoS3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:18: 235:22
    let mut _0: x86_64::sse2::u64x2_sse2<x86_64::NoS3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:235:27: 235:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:23: 241:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:36: 238:42
        _3 = core::arch::x86_64::_mm_srli_epi64::<25_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:238:21: 238:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_epi64::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:36: 239:42
        _5 = core::arch::x86_64::_mm_slli_epi64::<39_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:239:21: 239:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_epi64::<39_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 240:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:237:17: 237:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u64x2_sse2::<NoS3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 241:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:236:13: 236:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<NoS3, S4, NI> {u64x2_sse2::<NoS3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:242:10: 242:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right7::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:302:40: 302:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right7::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:302:40: 302:41
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right7(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<7_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<121_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<121_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right8::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:303:40: 303:41
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right8::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 8_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:303:40: 303:41
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right8(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<8_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<8_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<120_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<120_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right11::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:304:41: 304:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right11::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:304:41: 304:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right11(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<11_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<11_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<117_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<117_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right12::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:305:41: 305:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right12::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:305:41: 305:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right12(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<12_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<116_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<116_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right16::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 16_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:306:41: 306:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right16::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 16_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:306:41: 306:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right16(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<16_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<16_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<112_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<112_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right20::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:307:41: 307:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right20::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:307:41: 307:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right20(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<20_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<108_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<108_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right24::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 24_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:308:41: 308:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right24::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 24_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:308:41: 308:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right24(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<24_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<24_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<104_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<104_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right25::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:309:41: 309:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right25::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:309:41: 309:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:301:1: 310:2>::rotate_each_word_right25(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<25_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<103_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<103_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:312:1: 314:2>::rotate_each_word_right32::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53

    bb0: {
        _0 = const 32_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:313:41: 313:43
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:44: 293:53
    }
}

sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:312:1: 314:2>::rotate_each_word_right32::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:50: 294:59
        _1 = const 32_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:313:41: 313:43
        _2 = CheckedSub(const 128_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 128_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:58: 294:59
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:44: 294:59
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:312:1: 314:2>::rotate_each_word_right32(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:18: 290:22
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:290:27: 290:31
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:23: 296:14
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:36: 293:42
        _3 = core::arch::x86_64::_mm_srli_si128::<32_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:293:21: 293:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_srli_si128::<32_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:36: 294:42
        _5 = core::arch::x86_64::_mm_slli_si128::<96_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:294:21: 294:35
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_slli_si128::<96_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm_or_si128(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 295:18
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:292:17: 292:29
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 296:15
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:291:13: 291:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:297:10: 297:10
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:50:9: 55:10>::unpack(_1: vec128_storage) -> u32x4_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:52:30: 52:31
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:52:52: 52:56
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:27: 53:33

    bb0: {
        _2 = (_1.3: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:27: 53:33
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:17: 53:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:17: 53:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:54:14: 54:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:56:9: 61:10>::from(_1: u32x4_sse2<S3, S4, NI>) -> vec128_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:58:21: 58:22
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:58:45: 58:49
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:40: 59:43

    bb0: {
        _2 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:40: 59:43
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:17: 59:45
        (_0.3: core::arch::x86_64::__m128i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:17: 59:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:60:14: 60:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:62:9: 72:10>::new(_1: core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:64:20: 64:21
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:64:35: 64:39
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:66:21: 66:22

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:66:21: 66:22
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:65:17: 70:18
        (_0.0: core::arch::x86_64::__m128i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:65:17: 70:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:71:14: 71:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_le(_1: &[u8]) -> u32x4_sse2<S3, S4, NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:79:38: 79:43
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:79:55: 79:59
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:70
    let mut _21: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
    let mut _22: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
    let mut _23: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
    let mut _24: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
    let mut _25: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _25 = const <u32x4_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u32x4_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_le, [S3, S4, NI], Some(promoted[0])) }
        _6 = _25;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
        _23 = slice::<impl [u8]>::as_ptr(move _24) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:49: 81:55
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *const core::arch::x86_64::__m128i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
        _21 = _22;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
        _20 = core::arch::x86_64::_mm_loadu_si128(move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:42
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_loadu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _20) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:17: 81:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:17: 81:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:82:14: 82:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:41: 80:43

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:41: 80:43
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_be(_1: &[u8]) -> u32x4_sse2<S3, S4, NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:84:38: 84:43
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:84:55: 84:59
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:71
    let mut _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:70
    let mut _22: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
    let mut _23: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
    let mut _24: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
    let mut _25: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
    let mut _26: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u32x4_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_be::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u32x4_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_be, [S3, S4, NI], Some(promoted[0])) }
        _6 = _26;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _25 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
        _24 = slice::<impl [u8]>::as_ptr(move _25) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:49: 86:55
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _23 = move _24 as *const core::arch::x86_64::__m128i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
        _21 = core::arch::x86_64::_mm_loadu_si128(move _22) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:42
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_loadu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _20 = u32x4_sse2::<S3, S4, NI>::new(move _21) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = <u32x4_sse2<S3, S4, NI> as types::BSwap>::bswap(move _20) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:72: 86:77
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:87:14: 87:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_be: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:41: 85:43

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:41: 85:43
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_le(_1: u32x4_sse2<S3, S4, NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:25: 89:29
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:31: 89:34
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:47: 89:47
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _21: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
    let mut _22: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
    let mut _23: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
    let mut _24: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
    let mut _25: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:71: 91:77
    let mut _26: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }
    scope 3 {
    }

    bb0: {
        _6 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
        _4 = &_5;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u32x4_sse2<S3, S4, NI> as types::StoreBytes>::write_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u32x4_sse2<S3, S4, NI> as types::StoreBytes>::write_le, [S3, S4, NI], Some(promoted[0])) }
        _7 = _26;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = &mut (*_2);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
        _23 = slice::<impl [u8]>::as_mut_ptr(move _24) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:47: 91:57
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *mut core::arch::x86_64::__m128i (Misc); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
        _21 = _22;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
        _25 = (_1.0: core::arch::x86_64::__m128i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:71: 91:77
        _0 = core::arch::x86_64::_mm_storeu_si128(move _21, move _25) -> bb4; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:26: 91:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:26: 91:42
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) {core::arch::x86_64::_mm_storeu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:92:14: 92:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:39: 90:41

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:39: 90:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_be(_1: u32x4_sse2<S3, S4, NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:25: 94:29
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:31: 94:34
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:47: 94:47
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:21: 96:22
    let mut _22: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:37
    let mut _23: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:29
    let _24: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:68
    let mut _25: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
    let mut _26: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
    let mut _27: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
    let mut _28: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
    let mut _29: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:66: 98:67
    let mut _30: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug x => _21;                  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:21: 96:22
        scope 4 {
        }
    }

    bb0: {
        _6 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
        _4 = &_5;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _30 = const <u32x4_sse2<S3, S4, NI> as types::StoreBytes>::write_be::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u32x4_sse2<S3, S4, NI> as types::StoreBytes>::write_be, [S3, S4, NI], Some(promoted[0])) }
        _7 = _30;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _23 = move _1;                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:29
        _22 = <u32x4_sse2<S3, S4, NI> as types::BSwap>::bswap(move _23) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:30: 96:35
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = (_22.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:39
        _28 = &mut (*_2);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
        _27 = slice::<impl [u8]>::as_mut_ptr(move _28) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:42: 98:52
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _26 = move _27 as *mut core::arch::x86_64::__m128i (Misc); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
        _25 = _26;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
        _29 = _21;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:66: 98:67
        _24 = core::arch::x86_64::_mm_storeu_si128(move _25, move _29) -> bb5; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:37
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) {core::arch::x86_64::_mm_storeu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:100:14: 100:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_be: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:39: 95:41

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:39: 95:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:103:9: 108:10>::default() -> u32x4_sse2<S3, S4, NI> {
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:105:29: 105:33
    let mut _1: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:27: 106:57
    scope 1 {
    }

    bb0: {
        _1 = core::arch::x86_64::_mm_setzero_si128() -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:36: 106:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:36: 106:53
                                         // + literal: Const { ty: unsafe fn() -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_setzero_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _1) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:17: 106:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:17: 106:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:107:14: 107:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:110:9: 119:10>::not(_1: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:113:20: 113:24
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:113:29: 113:41
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:25
    let mut _4: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:41
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:38: 116:40
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:25: 115:27
        scope 2 {
            debug ff => _2;              // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:25: 115:27
        }
    }

    bb0: {
        _2 = core::arch::x86_64::_mm_set1_epi64x(const -1_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:30: 115:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:30: 115:45
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = move _1;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:25
        _5 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:38: 116:40
        _4 = u32x4_sse2::<S3, S4, NI>::new(move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = <u32x4_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor(move _3, move _4) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:41
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>, u32x4_sse2<S3, S4, NI>) -> <u32x4_sse2<S3, S4, NI> as core::ops::BitXor>::Output {<u32x4_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:118:14: 118:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:128:9: 134:10>::andnot(_1: u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:23: 131:27
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:29: 131:32
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:43: 131:47
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:27: 132:69
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:53: 132:59
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:61: 132:66
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:53: 132:59
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:61: 132:66
        _3 = core::arch::x86_64::_mm_andnot_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:36: 132:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:36: 132:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_andnot_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:17: 132:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:17: 132:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:133:14: 133:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29>::clone(_1: &u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
    let _2: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let _3: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let _4: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let _5: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let mut _7: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let _8: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let mut _9: core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let mut _10: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let _11: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let mut _12: core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let mut _13: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let _14: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let mut _15: core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let mut _16: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let _17: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        debug __self_0_2 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        debug __self_0_3 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    }

    bb0: {
        _2 = &((*_1).0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _3 = &((*_1).1: core::marker::PhantomData<S3>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _4 = &((*_1).2: core::marker::PhantomData<S4>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _5 = &((*_1).3: core::marker::PhantomData<NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _6 = <core::arch::x86_64::__m128i as Clone>::clone(move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
                                         // + literal: Const { ty: for<'r> fn(&'r core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {<core::arch::x86_64::__m128i as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _10 = _11;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _9 = <PhantomData<S3> as Clone>::clone(move _10) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<S3>) -> PhantomData<S3> {<PhantomData<S3> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = _4;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _12 = <PhantomData<S4> as Clone>::clone(move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<S4>) -> PhantomData<S4> {<PhantomData<S4> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _17 = _5;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _16 = _17;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _15 = <PhantomData<NI> as Clone>::clone(move _16) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<NI>) -> PhantomData<NI> {<PhantomData<NI> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
        (_0.0: core::arch::x86_64::__m128i) = move _6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:29: 42:29
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitand(_1: u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_and_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitor(_1: u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_or_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitxor(_1: u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_xor_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_xor_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitand_assign(_1: &mut u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u32x4_sse2<S3, S4, NI> as core::ops::BitAnd>::bitand(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:125:63: 125:69
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>, u32x4_sse2<S3, S4, NI>) -> <u32x4_sse2<S3, S4, NI> as core::ops::BitAnd>::Output {<u32x4_sse2<S3, S4, NI> as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitor_assign(_1: &mut u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u32x4_sse2<S3, S4, NI> as core::ops::BitOr>::bitor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:126:61: 126:66
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>, u32x4_sse2<S3, S4, NI>) -> <u32x4_sse2<S3, S4, NI> as core::ops::BitOr>::Output {<u32x4_sse2<S3, S4, NI> as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitxor_assign(_1: &mut u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u32x4_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:127:63: 127:69
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>, u32x4_sse2<S3, S4, NI>) -> <u32x4_sse2<S3, S4, NI> as core::ops::BitXor>::Output {<u32x4_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:50:9: 55:10>::unpack(_1: vec128_storage) -> u64x2_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:52:30: 52:31
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:52:52: 52:56
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:27: 53:33

    bb0: {
        _2 = (_1.3: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:27: 53:33
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:17: 53:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:17: 53:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:54:14: 54:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:56:9: 61:10>::from(_1: u64x2_sse2<S3, S4, NI>) -> vec128_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:58:21: 58:22
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:58:45: 58:49
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:40: 59:43

    bb0: {
        _2 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:40: 59:43
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:17: 59:45
        (_0.3: core::arch::x86_64::__m128i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:17: 59:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:60:14: 60:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:62:9: 72:10>::new(_1: core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:64:20: 64:21
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:64:35: 64:39
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:66:21: 66:22

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:66:21: 66:22
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:65:17: 70:18
        (_0.0: core::arch::x86_64::__m128i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:65:17: 70:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:71:14: 71:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_le(_1: &[u8]) -> u64x2_sse2<S3, S4, NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:79:38: 79:43
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:79:55: 79:59
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:70
    let mut _21: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
    let mut _22: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
    let mut _23: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
    let mut _24: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
    let mut _25: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _25 = const <u64x2_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u64x2_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_le, [S3, S4, NI], Some(promoted[0])) }
        _6 = _25;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
        _23 = slice::<impl [u8]>::as_ptr(move _24) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:49: 81:55
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *const core::arch::x86_64::__m128i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
        _21 = _22;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
        _20 = core::arch::x86_64::_mm_loadu_si128(move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:42
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_loadu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _20) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:17: 81:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:17: 81:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:82:14: 82:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:41: 80:43

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:41: 80:43
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_be(_1: &[u8]) -> u64x2_sse2<S3, S4, NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:84:38: 84:43
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:84:55: 84:59
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:71
    let mut _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:70
    let mut _22: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
    let mut _23: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
    let mut _24: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
    let mut _25: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
    let mut _26: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u64x2_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_be::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u64x2_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_be, [S3, S4, NI], Some(promoted[0])) }
        _6 = _26;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _25 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
        _24 = slice::<impl [u8]>::as_ptr(move _25) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:49: 86:55
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _23 = move _24 as *const core::arch::x86_64::__m128i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
        _21 = core::arch::x86_64::_mm_loadu_si128(move _22) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:42
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_loadu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _20 = u64x2_sse2::<S3, S4, NI>::new(move _21) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = <u64x2_sse2<S3, S4, NI> as types::BSwap>::bswap(move _20) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:72: 86:77
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:87:14: 87:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_be: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:41: 85:43

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:41: 85:43
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_le(_1: u64x2_sse2<S3, S4, NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:25: 89:29
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:31: 89:34
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:47: 89:47
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _21: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
    let mut _22: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
    let mut _23: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
    let mut _24: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
    let mut _25: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:71: 91:77
    let mut _26: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }
    scope 3 {
    }

    bb0: {
        _6 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
        _4 = &_5;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u64x2_sse2<S3, S4, NI> as types::StoreBytes>::write_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u64x2_sse2<S3, S4, NI> as types::StoreBytes>::write_le, [S3, S4, NI], Some(promoted[0])) }
        _7 = _26;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = &mut (*_2);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
        _23 = slice::<impl [u8]>::as_mut_ptr(move _24) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:47: 91:57
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *mut core::arch::x86_64::__m128i (Misc); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
        _21 = _22;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
        _25 = (_1.0: core::arch::x86_64::__m128i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:71: 91:77
        _0 = core::arch::x86_64::_mm_storeu_si128(move _21, move _25) -> bb4; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:26: 91:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:26: 91:42
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) {core::arch::x86_64::_mm_storeu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:92:14: 92:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:39: 90:41

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:39: 90:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_be(_1: u64x2_sse2<S3, S4, NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:25: 94:29
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:31: 94:34
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:47: 94:47
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:21: 96:22
    let mut _22: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:37
    let mut _23: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:29
    let _24: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:68
    let mut _25: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
    let mut _26: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
    let mut _27: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
    let mut _28: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
    let mut _29: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:66: 98:67
    let mut _30: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug x => _21;                  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:21: 96:22
        scope 4 {
        }
    }

    bb0: {
        _6 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
        _4 = &_5;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _30 = const <u64x2_sse2<S3, S4, NI> as types::StoreBytes>::write_be::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u64x2_sse2<S3, S4, NI> as types::StoreBytes>::write_be, [S3, S4, NI], Some(promoted[0])) }
        _7 = _30;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _23 = move _1;                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:29
        _22 = <u64x2_sse2<S3, S4, NI> as types::BSwap>::bswap(move _23) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:30: 96:35
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = (_22.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:39
        _28 = &mut (*_2);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
        _27 = slice::<impl [u8]>::as_mut_ptr(move _28) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:42: 98:52
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _26 = move _27 as *mut core::arch::x86_64::__m128i (Misc); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
        _25 = _26;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
        _29 = _21;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:66: 98:67
        _24 = core::arch::x86_64::_mm_storeu_si128(move _25, move _29) -> bb5; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:37
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) {core::arch::x86_64::_mm_storeu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:100:14: 100:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_be: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:39: 95:41

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:39: 95:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:103:9: 108:10>::default() -> u64x2_sse2<S3, S4, NI> {
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:105:29: 105:33
    let mut _1: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:27: 106:57
    scope 1 {
    }

    bb0: {
        _1 = core::arch::x86_64::_mm_setzero_si128() -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:36: 106:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:36: 106:53
                                         // + literal: Const { ty: unsafe fn() -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_setzero_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _1) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:17: 106:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:17: 106:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:107:14: 107:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:110:9: 119:10>::not(_1: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:113:20: 113:24
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:113:29: 113:41
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:25
    let mut _4: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:41
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:38: 116:40
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:25: 115:27
        scope 2 {
            debug ff => _2;              // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:25: 115:27
        }
    }

    bb0: {
        _2 = core::arch::x86_64::_mm_set1_epi64x(const -1_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:30: 115:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:30: 115:45
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = move _1;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:25
        _5 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:38: 116:40
        _4 = u64x2_sse2::<S3, S4, NI>::new(move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = <u64x2_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor(move _3, move _4) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:41
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64x2_sse2<S3, S4, NI>) -> <u64x2_sse2<S3, S4, NI> as core::ops::BitXor>::Output {<u64x2_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:118:14: 118:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:128:9: 134:10>::andnot(_1: u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:23: 131:27
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:29: 131:32
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:43: 131:47
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:27: 132:69
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:53: 132:59
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:61: 132:66
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:53: 132:59
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:61: 132:66
        _3 = core::arch::x86_64::_mm_andnot_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:36: 132:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:36: 132:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_andnot_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:17: 132:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:17: 132:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:133:14: 133:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29>::clone(_1: &u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
    let _2: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let _3: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let _4: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let _5: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let mut _7: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let _8: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let mut _9: core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let mut _10: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let _11: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let mut _12: core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let mut _13: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let _14: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let mut _15: core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let mut _16: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let _17: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        debug __self_0_2 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        debug __self_0_3 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    }

    bb0: {
        _2 = &((*_1).0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _3 = &((*_1).1: core::marker::PhantomData<S3>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _4 = &((*_1).2: core::marker::PhantomData<S4>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _5 = &((*_1).3: core::marker::PhantomData<NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _6 = <core::arch::x86_64::__m128i as Clone>::clone(move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
                                         // + literal: Const { ty: for<'r> fn(&'r core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {<core::arch::x86_64::__m128i as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _10 = _11;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _9 = <PhantomData<S3> as Clone>::clone(move _10) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<S3>) -> PhantomData<S3> {<PhantomData<S3> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = _4;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _12 = <PhantomData<S4> as Clone>::clone(move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<S4>) -> PhantomData<S4> {<PhantomData<S4> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _17 = _5;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _16 = _17;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _15 = <PhantomData<NI> as Clone>::clone(move _16) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<NI>) -> PhantomData<NI> {<PhantomData<NI> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
        (_0.0: core::arch::x86_64::__m128i) = move _6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:29: 42:29
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitand(_1: u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_and_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitor(_1: u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_or_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitxor(_1: u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_xor_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_xor_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitand_assign(_1: &mut u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u64x2_sse2<S3, S4, NI> as core::ops::BitAnd>::bitand(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:125:63: 125:69
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64x2_sse2<S3, S4, NI>) -> <u64x2_sse2<S3, S4, NI> as core::ops::BitAnd>::Output {<u64x2_sse2<S3, S4, NI> as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitor_assign(_1: &mut u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u64x2_sse2<S3, S4, NI> as core::ops::BitOr>::bitor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:126:61: 126:66
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64x2_sse2<S3, S4, NI>) -> <u64x2_sse2<S3, S4, NI> as core::ops::BitOr>::Output {<u64x2_sse2<S3, S4, NI> as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitxor_assign(_1: &mut u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u64x2_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:127:63: 127:69
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64x2_sse2<S3, S4, NI>) -> <u64x2_sse2<S3, S4, NI> as core::ops::BitXor>::Output {<u64x2_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:50:9: 55:10>::unpack(_1: vec128_storage) -> u128x1_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:52:30: 52:31
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:52:52: 52:56
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:27: 53:33

    bb0: {
        _2 = (_1.3: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:27: 53:33
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:17: 53:34
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:53:17: 53:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:54:14: 54:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:56:9: 61:10>::from(_1: u128x1_sse2<S3, S4, NI>) -> vec128_storage {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:58:21: 58:22
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:58:45: 58:49
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:40: 59:43

    bb0: {
        _2 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:40: 59:43
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:17: 59:45
        (_0.3: core::arch::x86_64::__m128i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:59:17: 59:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:60:14: 60:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:62:9: 72:10>::new(_1: core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:64:20: 64:21
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:64:35: 64:39
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:66:21: 66:22

    bb0: {
        _2 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:66:21: 66:22
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:65:17: 70:18
        (_0.0: core::arch::x86_64::__m128i) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:65:17: 70:18
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:71:14: 71:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_le(_1: &[u8]) -> u128x1_sse2<S3, S4, NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:79:38: 79:43
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:79:55: 79:59
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:70
    let mut _21: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
    let mut _22: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
    let mut _23: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
    let mut _24: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
    let mut _25: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:28: 80:39
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _25 = const <u128x1_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u128x1_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_le, [S3, S4, NI], Some(promoted[0])) }
        _6 = _25;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
        _23 = slice::<impl [u8]>::as_ptr(move _24) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:49: 81:55
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *const core::arch::x86_64::__m128i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
        _21 = _22;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:43: 81:69
        _20 = core::arch::x86_64::_mm_loadu_si128(move _21) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:27: 81:42
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_loadu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _20) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:17: 81:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:81:17: 81:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:82:14: 82:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:41: 80:43

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:80:41: 80:43
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_be(_1: &[u8]) -> u128x1_sse2<S3, S4, NI> {
    debug input => _1;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:84:38: 84:43
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:84:55: 84:59
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
    let mut _5: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
    let mut _6: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _15: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _16: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _17: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _18: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _19: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _20: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:71
    let mut _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:70
    let mut _22: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
    let mut _23: *const core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
    let mut _24: *const u8;              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
    let mut _25: &[u8];                  // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
    let mut _26: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
        _4 = Len((*_5));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:28: 85:39
        _3 = &_4;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u128x1_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_be::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u128x1_sse2<S3, S4, NI> as types::StoreBytes>::unsafe_read_be, [S3, S4, NI], Some(promoted[0])) }
        _6 = _26;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_2);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.0: &usize) = move _3;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_2.1: &usize) = move _6;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _9) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_13);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_13) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = _7;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _18 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_19);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_19) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _25 = _1;                        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
        _24 = slice::<impl [u8]>::as_ptr(move _25) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:57
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:49: 86:55
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> *const u8 {slice::<impl [u8]>::as_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _23 = move _24 as *const core::arch::x86_64::__m128i (Misc); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
        _22 = _23;                       // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:43: 86:69
        _21 = core::arch::x86_64::_mm_loadu_si128(move _22) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:27: 86:42
                                         // + literal: Const { ty: unsafe fn(*const core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_loadu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _20 = u128x1_sse2::<S3, S4, NI>::new(move _21) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:71
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _0 = <u128x1_sse2<S3, S4, NI> as types::BSwap>::bswap(move _20) -> bb6; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:17: 86:79
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:86:72: 86:77
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {<u128x1_sse2<S3, S4, NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:87:14: 87:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::unsafe_read_be: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:41: 85:43

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:85:41: 85:43
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_le(_1: u128x1_sse2<S3, S4, NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:25: 89:29
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:31: 89:34
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:89:47: 89:47
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let mut _21: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
    let mut _22: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
    let mut _23: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
    let mut _24: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
    let mut _25: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:71: 91:77
    let mut _26: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }
    scope 3 {
    }

    bb0: {
        _6 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:28: 90:37
        _4 = &_5;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _26 = const <u128x1_sse2<S3, S4, NI> as types::StoreBytes>::write_le::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u128x1_sse2<S3, S4, NI> as types::StoreBytes>::write_le, [S3, S4, NI], Some(promoted[0])) }
        _7 = _26;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _24 = &mut (*_2);                // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
        _23 = slice::<impl [u8]>::as_mut_ptr(move _24) -> bb3; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:47: 91:57
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _22 = move _23 as *mut core::arch::x86_64::__m128i (Misc); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
        _21 = _22;                       // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:43: 91:69
        _25 = (_1.0: core::arch::x86_64::__m128i); // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:71: 91:77
        _0 = core::arch::x86_64::_mm_storeu_si128(move _21, move _25) -> bb4; // scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:26: 91:78
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:91:26: 91:42
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) {core::arch::x86_64::_mm_storeu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:92:14: 92:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_le: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:39: 90:41

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:90:39: 90:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_be(_1: u128x1_sse2<S3, S4, NI>, _2: &mut [u8]) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:25: 94:29
    debug out => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:31: 94:34
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:94:47: 94:47
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
    let mut _6: &[u8];                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
    let mut _7: &usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
    let mut _20: core::option::Option<core::fmt::Arguments>; // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
    let _21: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:21: 96:22
    let mut _22: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:37
    let mut _23: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:29
    let _24: ();                         // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:68
    let mut _25: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
    let mut _26: *mut core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
    let mut _27: *mut u8;                // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
    let mut _28: &mut [u8];              // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
    let mut _29: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:66: 98:67
    let mut _30: &usize;                 // in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug x => _21;                  // in scope 3 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:21: 96:22
        scope 4 {
        }
    }

    bb0: {
        _6 = &(*_2);                     // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
        _5 = Len((*_6));                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:28: 95:37
        _4 = &_5;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:16: 38:22
        _30 = const <u128x1_sse2<S3, S4, NI> as types::StoreBytes>::write_be::promoted[0]; // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<u128x1_sse2<S3, S4, NI> as types::StoreBytes>::write_be, [S3, S4, NI], Some(promoted[0])) }
        _7 = _30;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        Deinit(_3);                      // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.0: &usize) = move _4;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        (_3.1: &usize) = move _7;        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
        switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:40:20: 40:46
    }

    bb1: {
        Deinit(_14);                     // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        discriminant(_14) = 0;           // scope 1 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:41:32: 41:65
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _17 = _8;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:60: 45:70
        _19 = _9;                        // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:72: 45:83
        Deinit(_20);                     // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        discriminant(_20) = 0;           // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:85: 45:113
        assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(AssertKind, &'r usize, &'s usize, Option<Arguments<'t0>>) -> ! {assert_failed::<usize, usize>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _23 = move _1;                   // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:29
        _22 = <u128x1_sse2<S3, S4, NI> as types::BSwap>::bswap(move _23) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:37
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:30: 96:35
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {<u128x1_sse2<S3, S4, NI> as types::BSwap>::bswap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _21 = (_22.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:96:25: 96:39
        _28 = &mut (*_2);                // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
        _27 = slice::<impl [u8]>::as_mut_ptr(move _28) -> bb4; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:54
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:42: 98:52
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {slice::<impl [u8]>::as_mut_ptr}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _26 = move _27 as *mut core::arch::x86_64::__m128i (Misc); // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
        _25 = _26;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:38: 98:64
        _29 = _21;                       // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:66: 98:67
        _24 = core::arch::x86_64::_mm_storeu_si128(move _25, move _29) -> bb5; // scope 4 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:68
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:98:21: 98:37
                                         // + literal: Const { ty: unsafe fn(*mut core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) {core::arch::x86_64::_mm_storeu_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:100:14: 100:14
    }
}

promoted[0] in sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:74:9: 101:10>::write_be: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:39: 95:41

    bb0: {
        _1 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:95:39: 95:41
        _0 = &_1;                        // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/42e1761c704f074b7b8c7ff8a7433acfd65d2ee9\library\core\src\macros\mod.rs:38:24: 38:31
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:103:9: 108:10>::default() -> u128x1_sse2<S3, S4, NI> {
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:105:29: 105:33
    let mut _1: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:27: 106:57
    scope 1 {
    }

    bb0: {
        _1 = core::arch::x86_64::_mm_setzero_si128() -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:36: 106:55
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:36: 106:53
                                         // + literal: Const { ty: unsafe fn() -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_setzero_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _1) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:17: 106:58
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:106:17: 106:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:107:14: 107:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:110:9: 119:10>::not(_1: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:113:20: 113:24
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:113:29: 113:41
    let mut _3: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:25
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:41
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:38: 116:40
    scope 1 {
        let _2: core::arch::x86_64::__m128i; // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:25: 115:27
        scope 2 {
            debug ff => _2;              // in scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:25: 115:27
        }
    }

    bb0: {
        _2 = core::arch::x86_64::_mm_set1_epi64x(const -1_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:30: 115:52
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:115:30: 115:45
                                         // + literal: Const { ty: unsafe fn(i64) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_set1_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = move _1;                    // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:25
        _5 = _2;                         // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:38: 116:40
        _4 = u128x1_sse2::<S3, S4, NI>::new(move _5) -> bb2; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:28: 116:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = <u128x1_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor(move _3, move _4) -> bb3; // scope 2 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:41
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:116:21: 116:41
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>, u128x1_sse2<S3, S4, NI>) -> <u128x1_sse2<S3, S4, NI> as core::ops::BitXor>::Output {<u128x1_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:118:14: 118:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:128:9: 134:10>::andnot(_1: u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:23: 131:27
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:29: 131:32
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:131:43: 131:47
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:27: 132:69
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:53: 132:59
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:61: 132:66
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:53: 132:59
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:61: 132:66
        _3 = core::arch::x86_64::_mm_andnot_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:36: 132:67
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:36: 132:52
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_andnot_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:17: 132:70
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:132:17: 132:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:133:14: 133:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29>::clone(_1: &u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
    let _2: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let _3: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let _4: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let _5: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let mut _6: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let mut _7: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let _8: &core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
    let mut _9: core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let mut _10: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let _11: &core::marker::PhantomData<S3>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
    let mut _12: core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let mut _13: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let _14: &core::marker::PhantomData<S4>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
    let mut _15: core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let mut _16: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    let _17: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        debug __self_0_2 => _4;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        debug __self_0_3 => _5;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
    }

    bb0: {
        _2 = &((*_1).0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _3 = &((*_1).1: core::marker::PhantomData<S3>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _4 = &((*_1).2: core::marker::PhantomData<S4>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _5 = &((*_1).3: core::marker::PhantomData<NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _8 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _7 = _8;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
        _6 = <core::arch::x86_64::__m128i as Clone>::clone(move _7) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:44:13: 44:23
                                         // + literal: Const { ty: for<'r> fn(&'r core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {<core::arch::x86_64::__m128i as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _11 = _3;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _10 = _11;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
        _9 = <PhantomData<S3> as Clone>::clone(move _10) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:45:13: 45:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<S3>) -> PhantomData<S3> {<PhantomData<S3> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = _4;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _13 = _14;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
        _12 = <PhantomData<S4> as Clone>::clone(move _13) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:46:13: 46:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<S4>) -> PhantomData<S4> {<PhantomData<S4> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _17 = _5;                        // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _16 = _17;                       // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
        _15 = <PhantomData<NI> as Clone>::clone(move _16) -> bb4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:47:13: 47:32
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<NI>) -> PhantomData<NI> {<PhantomData<NI> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
        (_0.0: core::arch::x86_64::__m128i) = move _6; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:24: 42:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:42:29: 42:29
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitand(_1: u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_and_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_and_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitor(_1: u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_or_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_or_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::bitxor(_1: u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> u128x1_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_xor_si128(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_xor_si128}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u128x1_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u128x1_sse2<S3, S4, NI> {u128x1_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitand_assign(_1: &mut u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u128x1_sse2<S3, S4, NI> as core::ops::BitAnd>::bitand(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:125:63: 125:69
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>, u128x1_sse2<S3, S4, NI>) -> <u128x1_sse2<S3, S4, NI> as core::ops::BitAnd>::Output {<u128x1_sse2<S3, S4, NI> as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitor_assign(_1: &mut u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u128x1_sse2<S3, S4, NI> as core::ops::BitOr>::bitor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:126:61: 126:66
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>, u128x1_sse2<S3, S4, NI>) -> <u128x1_sse2<S3, S4, NI> as core::ops::BitOr>::Output {<u128x1_sse2<S3, S4, NI> as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::bitxor_assign(_1: &mut u128x1_sse2<S3, S4, NI>, _2: u128x1_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u128x1_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:127:63: 127:69
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>, u128x1_sse2<S3, S4, NI>) -> <u128x1_sse2<S3, S4, NI> as core::ops::BitXor>::Output {<u128x1_sse2<S3, S4, NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:429:9: 434:10>::from(_1: u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:431:21: 431:22
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:431:46: 431:50
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:26: 432:29

    bb0: {
        _2 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:26: 432:29
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:17: 432:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:17: 432:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:433:14: 433:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:429:9: 434:10>::from(_1: u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:431:21: 431:22
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:431:46: 431:50
    let mut _2: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:26: 432:29

    bb0: {
        _2 = (_1.0: core::arch::x86_64::__m128i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:26: 432:29
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _2) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:17: 432:30
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:432:17: 432:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:433:14: 433:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::add(_1: u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_add_epi32(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_add_epi32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u32x4_sse2<S3, S4, NI> {u32x4_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:15:9: 21:10>::add(_1: u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:20: 18:24
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:26: 18:29
    let mut _0: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:18:40: 18:52
    let mut _3: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:27: 19:61
    let mut _4: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
    let mut _5: core::arch::x86_64::__m128i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:45: 19:51
        _5 = (_2.0: core::arch::x86_64::__m128i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:53: 19:58
        _3 = core::arch::x86_64::_mm_add_epi64(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:59
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:36: 19:44
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m128i, core::arch::x86_64::__m128i) -> core::arch::x86_64::__m128i {core::arch::x86_64::_mm_add_epi64}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u64x2_sse2::<S3, S4, NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:19:17: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m128i) -> u64x2_sse2<S3, S4, NI> {u64x2_sse2::<S3, S4, NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:20:14: 20:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::add_assign(_1: &mut u32x4_sse2<S3, S4, NI>, _2: u32x4_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u32x4_sse2<S3, S4, NI> as core::ops::Add>::add(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:455:55: 455:58
                                         // + literal: Const { ty: fn(u32x4_sse2<S3, S4, NI>, u32x4_sse2<S3, S4, NI>) -> <u32x4_sse2<S3, S4, NI> as core::ops::Add>::Output {<u32x4_sse2<S3, S4, NI> as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:27:9: 35:10>::add_assign(_1: &mut u64x2_sse2<S3, S4, NI>, _2: u64x2_sse2<S3, S4, NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:27: 32:36
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:38: 32:41
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:32:49: 32:49
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _4: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
    let mut _5: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:34: 33:37
        _3 = <u64x2_sse2<S3, S4, NI> as core::ops::Add>::add(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:25: 33:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:456:55: 456:58
                                         // + literal: Const { ty: fn(u64x2_sse2<S3, S4, NI>, u64x2_sse2<S3, S4, NI>) -> <u64x2_sse2<S3, S4, NI> as core::ops::Add>::Output {<u64x2_sse2<S3, S4, NI> as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:33:17: 33:38
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:34:14: 34:14
    }
}

const sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap1::K: u8 = {
    let mut _0: u8;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:22: 780:24

    bb0: {
        _0 = const 170_u8;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:796:25: 796:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:13: 780:30
    }
}

const sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap2::K: u8 = {
    let mut _0: u8;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:22: 780:24

    bb0: {
        _0 = const 204_u8;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:800:25: 800:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:13: 780:30
    }
}

const sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:793:1: 828:2>::swap4::K: u8 = {
    let mut _0: u8;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:22: 780:24

    bb0: {
        _0 = const 240_u8;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:804:25: 804:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:13: 780:30
    }
}

const sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap1::K: u8 = {
    let mut _0: u8;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:22: 780:24

    bb0: {
        _0 = const 170_u8;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:832:25: 832:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:13: 780:30
    }
}

const sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap2::K: u8 = {
    let mut _0: u8;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:22: 780:24

    bb0: {
        _0 = const 204_u8;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:836:25: 836:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:13: 780:30
    }
}

const sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:829:1: 860:2>::swap4::K: u8 = {
    let mut _0: u8;                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:22: 780:24

    bb0: {
        _0 = const 240_u8;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:840:25: 840:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:780:13: 780:30
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:862:16: 862:21>::clone(_1: &G0) -> G0 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:862:16: 862:21
    let mut _0: x86_64::sse2::G0;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:862:16: 862:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:862:21: 862:21
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:864:16: 864:21>::clone(_1: &G1) -> G1 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:864:16: 864:21
    let mut _0: x86_64::sse2::G1;        // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:864:16: 864:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:864:21: 864:21
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1037:9: 1044:10>::from(_1: x2<u128x1_sse2<S3, S4, NI>, Gf>) -> x2<u64x2_sse2<S3, S4, NI>, Gt> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1041:21: 1041:22
    let mut _0: soft::x2<x86_64::sse2::u64x2_sse2<S3, S4, NI>, Gt>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1041:54: 1041:58
    let mut _2: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:25: 1042:63
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:26: 1042:43
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:36: 1042:42
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:40: 1042:41
    let mut _6: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:45: 1042:62
    let mut _7: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:55: 1042:61
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:59: 1042:60

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:40: 1042:41
        _4 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:36: 1042:42
        _3 = <u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:26: 1042:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:26: 1042:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:59: 1042:60
        _7 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 2])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:55: 1042:61
        _6 = <u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:45: 1042:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:45: 1042:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:25: 1042:63
        _0 = x2::<u64x2_sse2<S3, S4, NI>, Gt>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:17: 1042:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:17: 1042:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<S3, S4, NI>; 2]) -> x2<u64x2_sse2<S3, S4, NI>, Gt> {x2::<u64x2_sse2<S3, S4, NI>, Gt>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1043:14: 1043:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1045:9: 1055:10>::from(_1: x4<u128x1_sse2<S3, S4, NI>>) -> x4<u64x2_sse2<S3, S4, NI>> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1047:21: 1047:22
    let mut _0: soft::x4<x86_64::sse2::u64x2_sse2<S3, S4, NI>>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1047:50: 1047:54
    let mut _2: [x86_64::sse2::u64x2_sse2<S3, S4, NI>; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:25: 1053:18
    let mut _3: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:21: 1049:38
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:31: 1049:37
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:35: 1049:36
    let mut _6: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:21: 1050:38
    let mut _7: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:31: 1050:37
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:35: 1050:36
    let mut _9: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:21: 1051:38
    let mut _10: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:31: 1051:37
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:35: 1051:36
    let mut _12: x86_64::sse2::u64x2_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:21: 1052:38
    let mut _13: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:31: 1052:37
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:35: 1052:36

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:35: 1049:36
        _4 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:31: 1049:37
        _3 = <u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:21: 1049:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:21: 1049:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:35: 1050:36
        _7 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:31: 1050:37
        _6 = <u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:21: 1050:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:21: 1050:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:35: 1051:36
        _10 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:31: 1051:37
        _9 = <u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:21: 1051:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:21: 1051:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:35: 1052:36
        _13 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_14]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:31: 1052:37
        _12 = <u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:21: 1052:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:21: 1052:30
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u64x2_sse2<S3, S4, NI> {<u64x2_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:25: 1053:18
        _0 = x4::<u64x2_sse2<S3, S4, NI>>::new(move _2) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:17: 1053:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:17: 1048:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u64x2_sse2<S3, S4, NI>; 4]) -> x4<u64x2_sse2<S3, S4, NI>> {x4::<u64x2_sse2<S3, S4, NI>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1054:14: 1054:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1037:9: 1044:10>::from(_1: x2<u128x1_sse2<S3, S4, NI>, Gf>) -> x2<u32x4_sse2<S3, S4, NI>, Gt> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1041:21: 1041:22
    let mut _0: soft::x2<x86_64::sse2::u32x4_sse2<S3, S4, NI>, Gt>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1041:54: 1041:58
    let mut _2: [x86_64::sse2::u32x4_sse2<S3, S4, NI>; 2]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:25: 1042:63
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:26: 1042:43
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:36: 1042:42
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:40: 1042:41
    let mut _6: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:45: 1042:62
    let mut _7: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:55: 1042:61
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:59: 1042:60

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:40: 1042:41
        _4 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 2])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:36: 1042:42
        _3 = <u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:26: 1042:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:26: 1042:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:59: 1042:60
        _7 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 2])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:55: 1042:61
        _6 = <u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:45: 1042:62
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:45: 1042:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = [move _3, move _6];         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:25: 1042:63
        _0 = x2::<u32x4_sse2<S3, S4, NI>, Gt>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:17: 1042:64
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1042:17: 1042:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32x4_sse2<S3, S4, NI>; 2]) -> x2<u32x4_sse2<S3, S4, NI>, Gt> {x2::<u32x4_sse2<S3, S4, NI>, Gt>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1043:14: 1043:14
    }
}

fn sse2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1045:9: 1055:10>::from(_1: x4<u128x1_sse2<S3, S4, NI>>) -> x4<u32x4_sse2<S3, S4, NI>> {
    debug x => _1;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1047:21: 1047:22
    let mut _0: soft::x4<x86_64::sse2::u32x4_sse2<S3, S4, NI>>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1047:50: 1047:54
    let mut _2: [x86_64::sse2::u32x4_sse2<S3, S4, NI>; 4]; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:25: 1053:18
    let mut _3: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:21: 1049:38
    let mut _4: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:31: 1049:37
    let _5: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:35: 1049:36
    let mut _6: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:21: 1050:38
    let mut _7: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:31: 1050:37
    let _8: usize;                       // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:35: 1050:36
    let mut _9: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:21: 1051:38
    let mut _10: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:31: 1051:37
    let _11: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:35: 1051:36
    let mut _12: x86_64::sse2::u32x4_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:21: 1052:38
    let mut _13: x86_64::sse2::u128x1_sse2<S3, S4, NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:31: 1052:37
    let _14: usize;                      // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:35: 1052:36

    bb0: {
        _5 = const 0_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:35: 1049:36
        _4 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_5]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:31: 1049:37
        _3 = <u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _4) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:21: 1049:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1049:21: 1049:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _8 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:35: 1050:36
        _7 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_8]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:31: 1050:37
        _6 = <u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _7) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:21: 1050:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1050:21: 1050:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _11 = const 2_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:35: 1051:36
        _10 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_11]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:31: 1051:37
        _9 = <u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _10) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:21: 1051:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1051:21: 1051:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _14 = const 3_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:35: 1052:36
        _13 = (_1.0: [x86_64::sse2::u128x1_sse2<S3, S4, NI>; 4])[_14]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:31: 1052:37
        _12 = <u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from(move _13) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:21: 1052:38
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1052:21: 1052:30
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(u128x1_sse2<S3, S4, NI>) -> u32x4_sse2<S3, S4, NI> {<u32x4_sse2<S3, S4, NI> as From<u128x1_sse2<S3, S4, NI>>>::from}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _2 = [move _3, move _6, move _9, move _12]; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:25: 1053:18
        _0 = x4::<u32x4_sse2<S3, S4, NI>>::new(move _2) -> bb5; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:17: 1053:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1048:17: 1048:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32x4_sse2<S3, S4, NI>; 4]) -> x4<u32x4_sse2<S3, S4, NI>> {x4::<u32x4_sse2<S3, S4, NI>>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1054:14: 1054:14
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1386:20: 1386:25>::clone(_1: &u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1386:20: 1386:25
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1386:20: 1386:25
    let _2: &core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
    let _3: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
    let mut _5: &core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
    let _6: &core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
    let mut _7: core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
    let mut _8: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
    let _9: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
        debug __self_0_1 => _3;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
    }

    bb0: {
        _2 = &((*_1).0: core::arch::x86_64::__m256i); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
        _3 = &((*_1).1: core::marker::PhantomData<NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
        _6 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
        _5 = _6;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
        _4 = <core::arch::x86_64::__m256i as Clone>::clone(move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1388:9: 1388:19
                                         // + literal: Const { ty: for<'r> fn(&'r core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {<core::arch::x86_64::__m256i as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _9 = _3;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
        _8 = _9;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
        _7 = <PhantomData<NI> as Clone>::clone(move _8) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1389:9: 1389:28
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<NI>) -> PhantomData<NI> {<PhantomData<NI> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        Deinit(_0);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1386:20: 1386:25
        (_0.0: core::arch::x86_64::__m256i) = move _4; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1386:20: 1386:25
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1386:25: 1386:25
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right7::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60

    bb0: {
        _0 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1491:43: 1491:44
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right7::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
        _1 = const 7_i32;                // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1491:43: 1491:44
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:64: 1484:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right7(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:22: 1480:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:31: 1480:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:27: 1486:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
        _3 = core::arch::x86_64::_mm256_srli_epi32::<7_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_srli_epi32::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
        _5 = core::arch::x86_64::_mm256_slli_epi32::<25_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_slli_epi32::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm256_or_si256(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1485:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1482:36
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_or_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1486:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1481:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1487:14: 1487:14
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right8(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:22: 1470:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:31: 1470:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:27: 1473:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
        _4 = core::arch::x86_64::_mm256_set_epi64x(const 868928702238099977_i64, const 290207319533486593_i64, const 868928702238099977_i64, const 290207319533486593_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:66
                                         // + literal: Const { ty: unsafe fn(i64, i64, i64, i64) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm256_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:87
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:40
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1473:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1471:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1474:14: 1474:14
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right11::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60

    bb0: {
        _0 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1497:44: 1497:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right11::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
        _1 = const 11_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1497:44: 1497:46
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:64: 1484:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right11(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:22: 1480:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:31: 1480:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:27: 1486:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
        _3 = core::arch::x86_64::_mm256_srli_epi32::<11_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_srli_epi32::<11_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
        _5 = core::arch::x86_64::_mm256_slli_epi32::<21_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_slli_epi32::<21_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm256_or_si256(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1485:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1482:36
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_or_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1486:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1481:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1487:14: 1487:14
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right12::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60

    bb0: {
        _0 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1498:44: 1498:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right12::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
        _1 = const 12_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1498:44: 1498:46
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:64: 1484:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right12(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:22: 1480:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:31: 1480:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:27: 1486:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
        _3 = core::arch::x86_64::_mm256_srli_epi32::<12_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_srli_epi32::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
        _5 = core::arch::x86_64::_mm256_slli_epi32::<20_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_slli_epi32::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm256_or_si256(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1485:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1482:36
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_or_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1486:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1481:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1487:14: 1487:14
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right16(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:22: 1470:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:31: 1470:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:27: 1473:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
        _4 = core::arch::x86_64::_mm256_set_epi64x(const 940142975169071882_i64, const 361421592464458498_i64, const 940142975169071882_i64, const 361421592464458498_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:66
                                         // + literal: Const { ty: unsafe fn(i64, i64, i64, i64) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm256_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:87
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:40
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1473:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1471:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1474:14: 1474:14
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right20::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60

    bb0: {
        _0 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1504:44: 1504:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right20::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
        _1 = const 20_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1504:44: 1504:46
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:64: 1484:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right20(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:22: 1480:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:31: 1480:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:27: 1486:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
        _3 = core::arch::x86_64::_mm256_srli_epi32::<20_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_srli_epi32::<20_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
        _5 = core::arch::x86_64::_mm256_slli_epi32::<12_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_slli_epi32::<12_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm256_or_si256(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1485:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1482:36
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_or_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1486:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1481:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1487:14: 1487:14
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right24(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:22: 1470:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:31: 1470:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:27: 1473:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
        _4 = core::arch::x86_64::_mm256_set_epi64x(const 1012478749960636427_i64, const 433757367256023043_i64, const 1012478749960636427_i64, const 433757367256023043_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:66
                                         // + literal: Const { ty: unsafe fn(i64, i64, i64, i64) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm256_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:87
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:40
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1473:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1471:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1474:14: 1474:14
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right25::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60

    bb0: {
        _0 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1510:44: 1510:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:51: 1483:60
    }
}

avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right25::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    let mut _1: i32;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
    let mut _2: (i32, bool);             // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65

    bb0: {
        StorageLive(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:56: 1484:65
        _1 = const 25_i32;               // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1510:44: 1510:46
        _2 = CheckedSub(const 32_i32, _1); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, move _1) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }

    bb1: {
        _0 = move (_2.0: i32);           // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
        StorageDead(_1);                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:64: 1484:65
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:51: 1484:65
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1490:5: 1511:6>::rotate_each_word_right25(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:22: 1480:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1480:31: 1480:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:27: 1486:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
    let mut _6: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:43: 1483:49
        _3 = core::arch::x86_64::_mm256_srli_epi32::<25_i32>(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:61
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1483:25: 1483:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_srli_epi32::<25_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _6 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:43: 1484:49
        _5 = core::arch::x86_64::_mm256_slli_epi32::<7_i32>(move _6) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1484:25: 1484:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_slli_epi32::<7_i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = core::arch::x86_64::_mm256_or_si256(move _3, move _5) -> bb3; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1485:22
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1482:21: 1482:36
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_or_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb4; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1486:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1481:17: 1481:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1487:14: 1487:14
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1522:13: 1530:14>::bitxor_assign(_1: &mut u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:31: 1527:40
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:42: 1527:45
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:53: 1527:53
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _4: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45
        _3 = <u32x4x2_avx2<NI> as core::ops::BitXor>::bitxor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1533:61: 1533:67
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4x2_avx2<NI>) -> <u32x4x2_avx2<NI> as core::ops::BitXor>::Output {<u32x4x2_avx2<NI> as core::ops::BitXor>::bitxor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:21: 1528:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1529:18: 1529:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1522:13: 1530:14>::bitor_assign(_1: &mut u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:31: 1527:40
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:42: 1527:45
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:53: 1527:53
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _4: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45
        _3 = <u32x4x2_avx2<NI> as core::ops::BitOr>::bitor(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1534:59: 1534:64
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4x2_avx2<NI>) -> <u32x4x2_avx2<NI> as core::ops::BitOr>::Output {<u32x4x2_avx2<NI> as core::ops::BitOr>::bitor}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:21: 1528:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1529:18: 1529:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1522:13: 1530:14>::bitand_assign(_1: &mut u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:31: 1527:40
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:42: 1527:45
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:53: 1527:53
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _4: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45
        _3 = <u32x4x2_avx2<NI> as core::ops::BitAnd>::bitand(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1535:61: 1535:67
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4x2_avx2<NI>) -> <u32x4x2_avx2<NI> as core::ops::BitAnd>::Output {<u32x4x2_avx2<NI> as core::ops::BitAnd>::bitand}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:21: 1528:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1529:18: 1529:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1522:13: 1530:14>::add_assign(_1: &mut u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> () {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:31: 1527:40
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:42: 1527:45
    let mut _0: ();                      // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1527:53: 1527:53
    let mut _3: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _4: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
    let mut _5: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45

    bb0: {
        _4 = (*_1);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
        _5 = _2;                         // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:42: 1528:45
        _3 = <u32x4x2_avx2<NI> as core::ops::Add>::add(move _4, move _5) -> bb1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:29: 1528:46
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1536:55: 1536:58
                                         // + literal: Const { ty: fn(u32x4x2_avx2<NI>, u32x4x2_avx2<NI>) -> <u32x4x2_avx2<NI> as core::ops::Add>::Output {<u32x4x2_avx2<NI> as core::ops::Add>::add}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        (*_1) = move _3;                 // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1528:21: 1528:46
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1529:18: 1529:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1540:13: 1546:14>::bitxor(_1: u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:27: 1543:31
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:33: 1543:36
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:47: 1543:59
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:31: 1544:65
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
        _5 = (_2.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
        _3 = core::arch::x86_64::_mm256_xor_si256(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_xor_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1545:18: 1545:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1540:13: 1546:14>::bitor(_1: u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:27: 1543:31
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:33: 1543:36
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:47: 1543:59
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:31: 1544:65
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
        _5 = (_2.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
        _3 = core::arch::x86_64::_mm256_or_si256(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_or_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1545:18: 1545:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1540:13: 1546:14>::bitand(_1: u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:27: 1543:31
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:33: 1543:36
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:47: 1543:59
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:31: 1544:65
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
        _5 = (_2.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
        _3 = core::arch::x86_64::_mm256_and_si256(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_and_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1545:18: 1545:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1540:13: 1546:14>::andnot(_1: u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:27: 1543:31
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:33: 1543:36
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:47: 1543:59
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:31: 1544:65
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
        _5 = (_2.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
        _3 = core::arch::x86_64::_mm256_andnot_si256(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_andnot_si256}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1545:18: 1545:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1540:13: 1546:14>::add(_1: u32x4x2_avx2<NI>, _2: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:27: 1543:31
    debug rhs => _2;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:33: 1543:36
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1543:47: 1543:59
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:31: 1544:65
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
    let mut _5: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:49: 1544:55
        _5 = (_2.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:57: 1544:62
        _3 = core::arch::x86_64::_mm256_add_epi32(move _4, move _5) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:63
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:40: 1544:48
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_add_epi32}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _0 = u32x4x2_avx2::<NI>::new(move _3) -> bb2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:66
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1544:21: 1544:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1545:18: 1545:18
    }
}

fn avx2::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1566:5: 1568:6>::bswap(_1: u32x4x2_avx2<NI>) -> u32x4x2_avx2<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:22: 1470:26
    let mut _0: x86_64::sse2::avx2::u32x4x2_avx2<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1470:31: 1470:35
    let mut _2: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:27: 1473:18
    let mut _3: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
    let mut _4: core::arch::x86_64::__m256i; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
    scope 1 {
    }

    bb0: {
        _3 = (_1.0: core::arch::x86_64::__m256i); // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:41: 1472:47
        _4 = core::arch::x86_64::_mm256_set_epi64x(const 868365760874482187_i64, const 289644378169868803_i64, const 868365760874482187_i64, const 289644378169868803_i64) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:86
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:49: 1472:66
                                         // + literal: Const { ty: unsafe fn(i64, i64, i64, i64) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_set_epi64x}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _2 = core::arch::x86_64::_mm256_shuffle_epi8(move _3, move _4) -> bb2; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:87
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1472:21: 1472:40
                                         // + literal: Const { ty: unsafe fn(core::arch::x86_64::__m256i, core::arch::x86_64::__m256i) -> core::arch::x86_64::__m256i {core::arch::x86_64::_mm256_shuffle_epi8}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _0 = u32x4x2_avx2::<NI>::new(move _2) -> bb3; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1473:19
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1471:17: 1471:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(core::arch::x86_64::__m256i) -> u32x4x2_avx2<NI> {u32x4x2_avx2::<NI>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\sse2.rs:1474:14: 1474:14
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:8:16: 8:21>::clone(_1: &YesS3) -> YesS3 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:8:16: 8:21
    let mut _0: x86_64::YesS3;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:8:16: 8:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:8:21: 8:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:10:16: 10:21>::clone(_1: &NoS3) -> NoS3 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:10:16: 10:21
    let mut _0: x86_64::NoS3;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:10:16: 10:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:10:21: 10:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:13:16: 13:21>::clone(_1: &YesS4) -> YesS4 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:13:16: 13:21
    let mut _0: x86_64::YesS4;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:13:16: 13:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:13:21: 13:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:15:16: 15:21>::clone(_1: &NoS4) -> NoS4 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:15:16: 15:21
    let mut _0: x86_64::NoS4;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:15:16: 15:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:15:21: 15:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:18:16: 18:21>::clone(_1: &YesA1) -> YesA1 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:18:16: 18:21
    let mut _0: x86_64::YesA1;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:18:16: 18:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:18:21: 18:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:20:16: 20:21>::clone(_1: &NoA1) -> NoA1 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:20:16: 20:21
    let mut _0: x86_64::NoA1;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:20:16: 20:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:20:21: 20:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:23:16: 23:21>::clone(_1: &YesA2) -> YesA2 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:23:16: 23:21
    let mut _0: x86_64::YesA2;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:23:16: 23:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:23:21: 23:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:25:16: 25:21>::clone(_1: &NoA2) -> NoA2 {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:25:16: 25:21
    let mut _0: x86_64::NoA2;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:25:16: 25:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:25:21: 25:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:28:16: 28:21>::clone(_1: &YesNI) -> YesNI {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:28:16: 28:21
    let mut _0: x86_64::YesNI;           // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:28:16: 28:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:28:21: 28:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:30:16: 30:21>::clone(_1: &NoNI) -> NoNI {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:30:16: 30:21
    let mut _0: x86_64::NoNI;            // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:30:16: 30:21

    bb0: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:30:21: 30:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:35:16: 35:21>::clone(_1: &SseMachine<S3, S4, NI>) -> SseMachine<S3, S4, NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:35:16: 35:21
    let mut _0: x86_64::SseMachine<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:35:16: 35:21
    let _2: &core::marker::PhantomData<(S3, S4, NI)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
    let mut _3: core::marker::PhantomData<(S3, S4, NI)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
    let mut _4: &core::marker::PhantomData<(S3, S4, NI)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
    let _5: &core::marker::PhantomData<(S3, S4, NI)>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
    }

    bb0: {
        _2 = &((*_1).0: core::marker::PhantomData<(S3, S4, NI)>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
        _5 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
        _4 = _5;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
        _3 = <PhantomData<(S3, S4, NI)> as Clone>::clone(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:35: 36:60
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<(S3, S4, NI)>) -> PhantomData<(S3, S4, NI)> {<PhantomData<(S3, S4, NI)> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:35:21: 35:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:69:16: 69:21>::clone(_1: &Avx2Machine<NI>) -> Avx2Machine<NI> {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:69:16: 69:21
    let mut _0: x86_64::Avx2Machine<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:69:16: 69:21
    let _2: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
    let mut _3: core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
    let mut _4: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
    let _5: &core::marker::PhantomData<NI>; // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
    scope 1 {
        debug __self_0_0 => _2;          // in scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
    }

    bb0: {
        _2 = &((*_1).0: core::marker::PhantomData<NI>); // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
        _5 = _2;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
        _4 = _5;                         // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
        _3 = <PhantomData<NI> as Clone>::clone(move _4) -> bb1; // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
                                         // mir::Constant
                                         // + span: C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:28: 70:43
                                         // + literal: Const { ty: for<'r> fn(&'r PhantomData<NI>) -> PhantomData<NI> {<PhantomData<NI> as Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:69:21: 69:21
    }
}

vec128_storage::u32x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:111:18: 111:19

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:111:18: 111:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:111:18: 111:19
    }
}

vec128_storage::u64x2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:112:18: 112:19

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:112:18: 112:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:112:18: 112:19
    }
}

vec128_storage::u128x1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:113:20: 113:21

    bb0: {
        _0 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:113:20: 113:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:113:20: 113:21
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:109:16: 109:21>::clone(_1: &vec128_storage) -> vec128_storage {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:109:16: 109:21
    let mut _0: x86_64::vec128_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:109:16: 109:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:109:16: 109:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:109:21: 109:21
    }
}

vec256_storage::u32x8::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:151:18: 151:19

    bb0: {
        _0 = const 8_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:151:18: 151:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:151:18: 151:19
    }
}

vec256_storage::u64x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:152:18: 152:19

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:152:18: 152:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:152:18: 152:19
    }
}

vec256_storage::u128x2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:153:20: 153:21

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:153:20: 153:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:153:20: 153:21
    }
}

vec256_storage::sse2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:154:28: 154:29

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:154:28: 154:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:154:28: 154:29
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:149:16: 149:21>::clone(_1: &vec256_storage) -> vec256_storage {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:149:16: 149:21
    let mut _0: x86_64::vec256_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:149:16: 149:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:149:16: 149:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:149:21: 149:21
    }
}

vec512_storage::u32x16::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:190:19: 190:21

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:190:19: 190:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:190:19: 190:21
    }
}

vec512_storage::u64x8::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:191:18: 191:19

    bb0: {
        _0 = const 8_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:191:18: 191:19
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:191:18: 191:19
    }
}

vec512_storage::u128x4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:192:20: 192:21

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:192:20: 192:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:192:20: 192:21
    }
}

vec512_storage::sse2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:193:28: 193:29

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:193:28: 193:29
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:193:28: 193:29
    }
}

vec512_storage::avx::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:194:27: 194:28

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:194:27: 194:28
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:194:27: 194:28
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:188:16: 188:21>::clone(_1: &vec512_storage) -> vec512_storage {
    debug self => _1;                    // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:188:16: 188:21
    let mut _0: x86_64::vec512_storage;  // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:188:16: 188:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:188:16: 188:21
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:188:21: 188:21
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:232:34: 232:35

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:232:34: 232:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:232:34: 232:35
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec128_storage) -> [u32; 4] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u32; 4];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.0: [u32; 4]);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:233:34: 233:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:233:34: 233:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:233:34: 233:35
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec128_storage) -> [u64; 2] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u64; 2];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.1: [u64; 2]);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:234:35: 234:36

    bb0: {
        _0 = const 1_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:234:35: 234:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:234:35: 234:36
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec128_storage) -> [u128; 1] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u128; 1];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.2: [u128; 1]);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:235:34: 235:35

    bb0: {
        _0 = const 8_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:235:34: 235:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:235:34: 235:35
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec256_storage) -> [u32; 8] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u32; 8];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.0: [u32; 8]);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:236:34: 236:35

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:236:34: 236:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:236:34: 236:35
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec256_storage) -> [u64; 4] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u64; 4];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.1: [u64; 4]);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:237:35: 237:36

    bb0: {
        _0 = const 2_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:237:35: 237:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:237:35: 237:36
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec256_storage) -> [u128; 2] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u128; 2];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.2: [u128; 2]);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:238:34: 238:36

    bb0: {
        _0 = const 16_usize;             // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:238:34: 238:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:238:34: 238:36
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec512_storage) -> [u32; 16] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u32; 16];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.0: [u32; 16]);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:239:34: 239:35

    bb0: {
        _0 = const 8_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:239:34: 239:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:239:34: 239:35
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec512_storage) -> [u64; 8] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u64; 8];                // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.1: [u64; 8]);           // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:240:35: 240:36

    bb0: {
        _0 = const 4_usize;              // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:240:35: 240:36
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:240:35: 240:36
    }
}

fn x86_64::<impl at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:224:9: 229:10>::from(_1: vec512_storage) -> [u128; 4] {
    debug vec => _1;                     // in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:21: 226:24
    let mut _0: [u128; 4];               // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:226:39: 226:43
    scope 1 {
    }

    bb0: {
        _0 = (_1.2: [u128; 4]);          // scope 1 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:227:26: 227:35
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:228:14: 228:14
    }
}

fn x2(_1: [W; 2], _2: PhantomData<G>) -> x2<W, G> {
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
        (_0.0: [W; 2]) = move _1;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
        (_0.1: core::marker::PhantomData<G>) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
    }
}

// MIR FOR CTFE
fn x2(_1: [W; 2], _2: PhantomData<G>) -> x2<W, G> {
    let mut _0: soft::x2<W, G>;          // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
        (_0.0: [W; 2]) = move _1;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
        (_0.1: core::marker::PhantomData<G>) = move _2; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:10:1: 10:49
    }
}

fn x4(_1: [W; 4]) -> x4<W> {
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30
        (_0.0: [W; 4]) = move _1;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30
    }
}

// MIR FOR CTFE
fn x4(_1: [W; 4]) -> x4<W> {
    let mut _0: soft::x4<W>;             // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30
        (_0.0: [W; 4]) = move _1;        // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\soft.rs:225:1: 225:30
    }
}

fn SseMachine(_1: PhantomData<(S3, S4, NI)>) -> SseMachine<S3, S4, NI> {
    let mut _0: x86_64::SseMachine<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62
        (_0.0: core::marker::PhantomData<(S3, S4, NI)>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62
    }
}

// MIR FOR CTFE
fn SseMachine(_1: PhantomData<(S3, S4, NI)>) -> SseMachine<S3, S4, NI> {
    let mut _0: x86_64::SseMachine<S3, S4, NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62
        (_0.0: core::marker::PhantomData<(S3, S4, NI)>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:36:1: 36:62
    }
}

fn Avx2Machine(_1: PhantomData<NI>) -> Avx2Machine<NI> {
    let mut _0: x86_64::Avx2Machine<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45
        (_0.0: core::marker::PhantomData<NI>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45
    }
}

// MIR FOR CTFE
fn Avx2Machine(_1: PhantomData<NI>) -> Avx2Machine<NI> {
    let mut _0: x86_64::Avx2Machine<NI>; // return place in scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45

    bb0: {
        Deinit(_0);                      // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45
        (_0.0: core::marker::PhantomData<NI>) = move _1; // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45
        return;                          // scope 0 at C:\Users\iarte\.cargo\registry\src\github.com-1ecc6299db9ec823\ppv-lite86-0.2.16\src\x86_64\mod.rs:70:1: 70:45
    }
}
